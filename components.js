angular.module('demoApp')
.value('components', [
    {
        "name": "configs",
        "moduleName": "'encore.ui.configs'",
        "displayName": "Configs",
        "srcFiles": [
            "src/configs/configs.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/stable.svg\" alt=\"stable\"></a></p>\n<p>Common configs used throughout Encore.</p>\n<p>Most of the configs are <code>.constant</code> or <code>.value</code>, but <code>routesCdnPath</code> is configured as a <code>.provider</code>. This is to allow users to override the URL used when in a local/staging environment.</p>\n<p>The main reason for that is to let people test local versions of <a href=\"https://github.com/rackerlabs/encore-ui-nav/blob/staging/src/encoreNav.json\">the encore-ui-nav JSON file</a> before submitting pull requests to that repository.</p>\n<p>For example, to point to a local <code>mynav.json</code> file, put the following into your <code>app.js</code>:</p>\n<pre><code>.config(function (otherdependencies, ..., routesCdnPathProvider) {\n\n    // Other config stuff you need to do\n\n    routesCdnPathProvider.customURL = &#39;mynav.json&#39;;\n});\n</code></pre><p>The <code>mynav.json</code> file will likely have to live in your <code>app/</code> folder, depending on your configuration.</p>\n<p>If you do set <code>customURL</code> to a non <code>null</code> value, then <code>routesCdnPath.hasCustomURL</code> will automatically get set to <code>true</code>. <code>hasCustomURL</code> is intended only for the framework to use,\nbut we are documenting it in case you find your own use case for it.</p>\n",
            "js": "",
            "html": "",
            "less": "",
            "midway": "\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    },
    {
        "name": "grid",
        "moduleName": "'encore.ui.grid'",
        "displayName": "Grid",
        "srcFiles": [],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\"></a></p>\n<h1>Notice!</h1>\n<p>This feature will soon be deprecated in favor of the <a href=\"#/component/layout\">responsive layout module</a>. This new module implements a more intuitive, semantic, attribute-based syntax for creating responsive designs making use of flexbox.</p>\n<h1>Description</h1>\n<p>While EncoreUI was initially designed to be an AngularJS widget library, we recognize that teams will want to use a CSS layout framework. We have added the <a href=\"http://purecss.io/grids/\">Grids module from Yahoo!&#39;s Pure CSS framework</a> for teams to easily build out a grid or column system as part of EncoreUI. We chose this lightweight framework for its emphasis on flex based layouts.</p>\n<h1>Usage</h1>\n<p>No additional installation is required. We have automatically included <code>grids-min.css</code> into the encore-ui CSS libraries.</p>\n<p>Note that most of the grid layouts you will use will be in the context of <code>rxPage</code> inside <code>rxApp</code>. For this reason we will be using the regular grids only, and not responsive grids.</p>\n<p>The code sample below will probably give the clearest context of how grids work. Note that the <code>.pure-g</code> also has a <code>clear</code> class attached because title containers on <code>rxPage</code> components are defaulted to float left.</p>\n<p>You&#39;ll find that the grid components will not have borders or padding within the grid units themselves. If you need white space between grid columns, adding a <code>columns</code> class to the <code>.pure-g</code> container will give padding of 1.5ems per each individual cell, or 3ems together.</p>\n",
            "js": "",
            "html": "<rx-page title=\"'Customized Page Title'\">\n\n    <h2 class=\"clear title\">Two u-1-2 modules</h2>\n    <div class=\"pure-g clear\">\n        <div class=\"pure-u-1-2\">\n            <table class=\"table\">\n                <thead>\n                    <th>Header 1</th>\n                </thead>\n                <tbody><tr><td>Cell 1</tr></tbody>\n            </table>\n        </div>\n        <div class=\"pure-u-1-2\">\n            <table class=\"table\">\n                <thead>\n                    <th>Header 1</th>\n                </thead>\n                <tbody><tr><td>Cell 1</tr></tbody>\n            </table>\n        </div>\n    </div>\n\n    <h2 class=\"title\">Three u-1-3 modules</h2>\n    <div class=\"pure-g clear\">\n        <div class=\"pure-u-1-3\">\n            <table class=\"table\">\n                <thead>\n                    <th>Header 1</th>\n                </thead>\n                <tbody><tr><td>Cell 1</tr></tbody>\n            </table>\n        </div>\n        <div class=\"pure-u-1-3\">\n            <table class=\"table\">\n                <thead>\n                    <th>Header 1</th>\n                </thead>\n                <tbody><tr><td>Cell 1</tr></tbody>\n            </table>\n        </div>\n        <div class=\"pure-u-1-3\">\n            <table class=\"table\">\n                <thead>\n                    <th>Header 1</th>\n                </thead>\n                <tbody><tr><td>Cell 1</tr></tbody>\n            </table>\n        </div>\n    </div>\n\n\n    <h2 class=\"title\">Two u-1-2 modules with a columns class</h2>\n    <div class=\"pure-g columns clear\">\n        <div class=\"pure-u-1-2\">\n            <table class=\"table\">\n                <thead>\n                    <th>Header 1</th>\n                </thead>\n                <tbody><tr><td>Cell 1</tr></tbody>\n            </table>\n        </div>\n        <div class=\"pure-u-1-2\">\n            <table class=\"table\">\n                <thead>\n                    <th>Header 1</th>\n                </thead>\n                <tbody><tr><td>Cell 1</tr></tbody>\n            </table>\n        </div>\n    </div>\n\n    <h2 class=\"title\">Three u-1-3 modules with a columns class</h2>\n    <div class=\"pure-g columns clear\">\n        <div class=\"pure-u-1-3\">\n            <table class=\"table\">\n                <thead>\n                    <th>Header 1</th>\n                </thead>\n                <tbody><tr><td>Cell 1</tr></tbody>\n            </table>\n        </div>\n        <div class=\"pure-u-1-3\">\n            <table class=\"table\">\n                <thead>\n                    <th>Header 1</th>\n                </thead>\n                <tbody><tr><td>Cell 1</tr></tbody>\n            </table>\n        </div>\n        <div class=\"pure-u-1-3\">\n            <table class=\"table\">\n                <thead>\n                    <th>Header 1</th>\n                </thead>\n                <tbody><tr><td>Cell 1</tr></tbody>\n            </table>\n        </div>\n    </div>\n\n</rx-page>\n",
            "less": ".pure-g.columns > div {\n    -webkit-box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    box-sizing: border-box;\n    padding-left: 1.25em;\n    padding-right: 1.25em;\n\n    &:first-child {\n        padding-left: 0;\n    }\n    &:last-child {\n        padding-right: 0;\n    }\n}",
            "midway": "\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    },
    {
        "name": "hotkeys",
        "moduleName": "'encore.ui.hotkeys'",
        "displayName": "Hotkeys",
        "srcFiles": [],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\"></a></p>\n<p>This component is simply a reference guide to using <a href=\"http://chieffancypants.github.io/angular-hotkeys/\">the angular-hotkeys plugin</a> from within EncoreUI.</p>\n<p>Angular-hotkeys was chosen as the solution for hotkeys from within EncoreUI apps, due to its integration into Angular, it&#39;s use of the very good &#39;mousetrap&#39; library, and because it allows multiple ways to define hotkeys (through a directive, controller, route config, etc).</p>\n<h2>Global Shortcuts</h2>\n<p>Currently there is only one global shortcut key defined (<code>h</code>). This will collapse/expand the main menu on any page. More keys can be added as need for them is identified (suggestions welcome!).</p>\n<h2>Shortcut Keys</h2>\n<p>Because browsers and operating systems have a long list of defined shortcut keys, it can be difficult to find a keybinding that isn&#39;t already taken. When choosing a shortcut key for your app, you can avoid most conflicts by simple leaving off the modifier key (e.g. <code>ctrl</code>).</p>\n<p>For Encore, the best practice is to use a single letter for your keystroke. For example, the global key to show/hide the rxApp menu is simply <code>h</code>.</p>\n<p>If you&#39;ll be defining multiple shortcuts related to a specific set of actions, consider a combination of two letters, where the first letter is the same for all keystrokes. For example, an account menu might have the following shortcuts:</p>\n<ul>\n<li><code>a</code> <code>n</code> Creates a new account</li>\n<li><code>a</code> <code>v</code> Views the selected account</li>\n<li><code>a</code> <code>d</code> Deletes the selected account</li>\n</ul>\n<h2>Identifying shortcut keys</h2>\n<p>If you provide a description, the shortcut will be defined in a helper list provided when the user presses the <code>?</code> key. Currently there is no official guidance on a design pattern to identify to end-users what particular shortcuts are outside of the standard help window.</p>\n",
            "js": "/*jshint unused:false*/\nfunction hotkeysCtrl ($scope, hotkeys) {\n    $scope.volume = 5;\n\n    hotkeys.add({\n        combo: 'ctrl+up',\n        description: 'Turn up the volume!',\n        callback: function () {\n            $scope.volume += 1;\n        }\n    });\n\n    hotkeys.add({\n        combo: 'ctrl+down',\n        description: 'Turn it down!',\n        callback: function () {\n            $scope.volume -= 1;\n        }\n    });\n\n    var showHFSHE = function () {\n        var videoSrc = '//www.youtube.com/embed/Dach1nPbsY8?autoplay=1';\n\n        var iframe = document.createElement('iframe');\n        iframe.src = videoSrc;\n\n        var container = document.getElementById('hfshe');\n        container.appendChild(iframe);\n        container.style.display = 'block';\n    };\n\n    hotkeys.add({\n        combo: 'up+up+down+down+left+right+left+right+a+b',\n        callback: showHFSHE\n    });\n}\n",
            "html": "<style type=\"text/css\">\n    #hfshe {\n        display: none;\n        position: fixed;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        background: rgba(0, 0, 0, 0.9);\n    }\n    #hfshe iframe {\n        width: 560px;\n        height: 315px;\n        border: 0;\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        margin-top: -158px;\n        margin-left: -280px;\n    }\n</style>\n\n<div ng-controller=\"hotkeysCtrl\">\n    <p>Press `?` to see the shortcut cheat-sheet.</p>\n\n    <p>Current Volume: <span ng-bind=\"volume\"></span></p>\n\n    <div id=\"hfshe\"></div>\n</div>",
            "less": "",
            "midway": "describe('hotkeys', function () {\n    var volume, body;\n\n    before(function () {\n        demoPage.go('#/component/hotkeys');\n        volume = element(by.binding('volume'));\n        body = element(by.css('body'));\n    });\n\n    it('should turn volume up and down using hotkeys', function () {\n        expect(volume.getText()).to.eventually.equal('5');\n\n        // turn it up\n        var ctrlUp = protractor.Key.chord(protractor.Key.CONTROL, protractor.Key.ARROW_UP);\n        body.sendKeys(ctrlUp);\n\n        expect(volume.getText()).to.eventually.equal('6');\n\n        // turn it down\n        var ctrlDown = protractor.Key.chord(protractor.Key.CONTROL, protractor.Key.ARROW_DOWN);\n        body.sendKeys(ctrlDown);\n        body.sendKeys(ctrlDown);\n\n        expect(volume.getText()).to.eventually.equal('4');\n    });\n});\n\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    },
    {
        "name": "layout",
        "moduleName": "'encore.ui.layout'",
        "displayName": "Layout",
        "srcFiles": [],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\"></a></p>\n<h1>Description</h1>\n<p>Encore UI includes a grid system forked from <a href=\"https://material.angularjs.org/#/layout/container\">Angular Material&#39;s layout module</a> with minor usability enhancements to provide an assortment of attribute-based layout options based on the flexbox layout model. Included are intuitive attribute based styles that ease the creation of responsive row and/or column based page layouts.</p>\n<h2>Note About Responsive Features</h2>\n<p>Two versions of the Encore UI CSS file are included in this project. One includes responsive design style attributes (encore-ui-resp-x.x.x.css). The other omits these attributes to save space if desired (encore-ui-x.x.x.css). Be sure to only include the appropriate css file for your project. Any attributes which include the following suffixes require the responsive css file to work: &#39;-sm&#39;, &#39;-gt-sm&#39;, &#39;-md&#39;, &#39;-gt-md&#39;, &#39;-lg&#39;, &#39;-gt-lg&#39;.</p>\n",
            "js": "angular\n    .module('demoApp')\n    .controller('layoutController', function ($scope) {\n        $scope.layout = 'row';\n        $scope.align = { first: 'center', second: 'middle' };\n        $scope.options1 = ['left', 'center', 'right', 'spread', 'justify'];\n        $scope.options2 = ['top', 'middle', 'bottom', 'stretch'];\n\n        // Swap the first 3 items in each array and set new value\n        $scope.swap = function (option) {\n\n            if ($scope.layout === option) {\n                return;\n            }\n\n            var swap = $scope.options2.slice(0, 3).concat($scope.options1.slice(3));\n            $scope.options2 = $scope.options1.slice(0, 3).concat($scope.options2.slice(3));\n            $scope.options1 = swap;\n            swap = $scope.options1[$scope.options1.indexOf($scope.align.second)] || 'spread';\n            $scope.align.second = $scope.options2[$scope.options2.indexOf($scope.align.first)] || 'stretch';\n            $scope.align.first = swap;\n        };\n});\n",
            "html": "<div class=\"layout-demo\">\n\n    <!-- Overview -->\n    <a id=\"Overview\"></a>\n\n    <h1 class=\"title lg\">Overview</h1>\n\n    <p>Angular Material's responsive CSS layout is built on <a href=\"http://www.w3.org/TR/css3-flexbox/\" target=_blank>flexbox.</a></p>\n\n    <p>The layout system is based upon element attributes rather than CSS classes. Attributes provide an easy way to set a value (eg <code>layout=\"row\"</code>) and help separate concerns: attributes define layout, and classes define styling.</p>\n\n\n    <!-- Layout Attribute -->\n    <a id=\"Attribute\"></a>\n\n    <h1 class=\"title lg\">Layout Attribute</h1>\n\n    <p>Use the <code>layout</code> attribute on an element to arrange its children horizontally in a row (<code>layout=\"row\"</code>), or vertically in a column (<code>layout=\"column\"</code>).</p>\n\n    <h2 class=\"title\">Row Layout</h2>\n\n    <div layout=\"row\">\n      <div class=\"box dark-blue\">I'm left.</div>\n      <div class=\"box light-blue\">I'm right.</div>\n    </div>\n\n    <h2 class=\"title\">Column Layout</h2>\n    <div layout=\"column\">\n      <div class=\"box dark-blue\">I'm above.</div>\n      <div class=\"box light-blue\">I'm below.</div>\n    </div>\n\n    <p>See <a href=\"#/component/layout#Options\">Options</a> for information on responsive layouts and other options.</p>\n\n\n    <!-- Grid System-->\n    <a id=\"Grid\"></a>\n\n    <h1 class=\"title lg\">Grid System</h1>\n\n    <p>To customize the size and position of elements in a layout, use the <code>flex</code>, <code>flex-offset</code>, and <code>flex-order</code> attributes.</p>\n\n\n    <h2 class=\"title\">Flex Attribute</h2>\n\n    <div layout=\"row\">\n      <div flex class=\"flex-box dark-blue\">\n        [flex]\n      </div>\n      <div flex class=\"flex-box light-blue\">\n        [flex]\n      </div>\n      <div flex class=\"flex-box dark-green\">\n        [flex]\n      </div>\n    </div>\n\n    <p>Add the <code>flex</code> attribute to a layout's child element, and it will flex (stretch) to fill the available area.</p>\n\n\n    <h2 class=\"title\">Flex Percent Values</h2>\n\n    <div layout=\"row\" layout-wrap>\n      <div flex=\"33\" class=\"flex-box dark-blue\">\n        [flex=\"33\"]\n      </div>\n      <div flex=\"55\" class=\"flex-box light-blue\">\n        [flex=\"55\"]\n      </div>\n      <div flex class=\"flex-box orange\">\n        [flex]\n      </div>\n      <div flex=\"66\" class=\"flex-box light-green\">\n        [flex=\"66\"]\n      </div>\n      <div flex=\"33\" class=\"flex-box dark-green\">\n        [flex=\"33\"]\n      </div>\n    </div>\n\n    <p>A layout child's <code>flex</code> attribute can be given an integer value from 0-100. The element will stretch to the percentage of available space matching the value.</p>\n\n    <p>The <code>flex</code> attribute value is restricted to 33, 66, and multiples of five. For example: <code>flex=\"5\"</code>, <code>flex=\"20\"</code>, \"<code>flex=\"33\"</code>, <code>flex=\"50\"</code>, <code>flex=\"66\"</code>, <code>flex=\"75\"</code>, ....</p>\n\n    <p>See the <a href=\"#/component/layout#Options\">layout options</a> for more information on responsive flex attributes.</p>\n\n\n    <h2 class=\"title\">Flex Order Attribute</h2>\n\n    <div layout=\"row\" layout-margin>\n      <div flex flex-order=\"3\" class=\"flex-box dark-blue\">\n        [flex-order=\"3\"]\n      </div>\n      <div flex flex-order=\"2\" class=\"flex-box light-blue\">\n        [flex-order=\"2\"]\n      </div>\n      <div flex flex-order=\"1\" class=\"flex-box dark-green\">\n        [flex-order=\"1\"]\n      </div>\n    </div>\n\n    <p>Add the <code>flex-order</code> attribute to a layout child to set its position within the layout. Any value from 0-9 is accepted.</p>\n\n    <table>\n        <tr>\n            <td>flex-order</td>\n            <td>Sets element order.</td>\n        </tr>\n        <tr>\n            <td>flex-order-sm </td>\n            <td>Sets element order on devices less than 600px wide.</td>\n        </tr>\n        <tr>\n            <td>flex-order-gt-sm</td>\n            <td>Sets element order on devices greater than 600px wide.</td>\n        </tr>\n        <tr>\n            <td>flex-order-md</td>\n            <td>Sets element order on devices between 600px and 960px wide.</td>\n        </tr>\n        <tr>\n            <td>flex-order-gt-md</td>\n            <td>Sets element order on devices greater than 960px wide.</td>\n        </tr>\n        <tr>\n            <td>flex-order-lg</td>\n            <td>Sets element order on devices between 960px and 1200px wide.</td>\n        </tr>\n        <tr>\n            <td>flex-order-gt-lg</td>\n            <td>Sets element order on devices greater than 1200px wide.</td>\n        </tr>\n    </table>\n\n\n    <h2 class=\"title\">Flex Offset Attribute</h2>\n\n    <div layout=\"row\">\n      <div flex offset=\"33\" class=\"flex-box dark-blue\">\n        [flex offset=\"33\"]\n      </div>\n      <div flex class=\"flex-box light-blue\">\n        [flex]\n      </div>\n    </div>\n\n    <p>Add the <code>offset</code> attribute to a layout child to set its offset percentage within the layout. Values must be multiples of <code>5</code>, or <code>33</code>, <code>34</code>, <code>66</code>, <code>67</code>.</p>\n\n    <table>\n    <tr>\n        <td>offset</td>\n        <td>Sets element offset.</td>\n    </tr>\n    <tr>\n        <td>offset-sm</td>\n        <td>Sets element offset on devices less than 600px wide.</td>\n    </tr>\n    <tr>\n        <td>offset-gt-sm</td>\n        <td>Sets element offset on devices greater than 600px wide.</td>\n    </tr>\n    <tr>\n        <td>offset-md</td>\n        <td>Sets element offset on devices between 600px and 960px wide.</td>\n    </tr>\n    <tr>\n        <td>offset-gt-md</td>\n        <td>Sets element offset on devices greater than 960px wide.</td>\n    </tr>\n    <tr>\n        <td>offset-lg</td>\n        <td>Sets element offset on devices between 960px and 1200px wide.</td>\n    </tr>\n    <tr>\n        <td>offset-gt-lg</td>\n        <td>Sets element offset on devices greater than 1200px wide.</td>\n    </tr>\n    </table>\n\n\n    <!-- Child Alignment -->\n    <a id=\"ChildAlignment\"></a>\n\n    <h1 class=\"title lg\">Child Alignment</h1>\n\n    <p>The <code>layout-align</code> attribute takes two parameters in any order. Parameters <code>top</code>, <code>middle</code>, <code>bottom</code>, <code>left</code>, <code>right</code>, and <code>center</code> determine the alignment of child elements and may be combined in sensible ways (ie <code>top left</code> works but <code>top bottom</code> would not).</p>\n\n    <p>Parameters <code>stretch</code>, <code>justify</code>, and <code>spread</code> determine the justification of child elements. <code>Stretch</code> grows child elements perpendicular to layout axis (ie <code>layout=\"row\"</code> stretches up and down). <code>Justify</code> and <code>spread</code> space out child elements evenly perpendicular to layout axis either with or without side padding, respectively</p>\n\n    <p>Only one parameter is required for the attribute. For example, <code>layout=\"row\" layout-align=\"center\"</code> would make the elements center horizontally and use the default behavior vertically.\n\n    <p><code>layout=\"column\" layout-align=\"right middle\"</code> would align children along the center vertically and along the right horizontally.</p>\n\n    <table>\n        <tr>\n            <td>layout-align</td>\n            <td>Sets child alignment.</td>\n        </tr>\n        <tr>\n            <td>layout-align-sm</td>\n            <td>Sets child alignment on devices less than 600px wide.</td>\n        </tr>\n        <tr>\n            <td>layout-align-gt-sm</td>\n            <td>Sets child alignment on devices greater than 600px wide.</td>\n        </tr>\n        <tr>\n            <td>layout-align-md</td>\n            <td>Sets child alignment on devices between 600px and 960px wide.</td>\n        </tr>\n        <tr>\n            <td>layout-align-gt-md</td>\n            <td>Sets child alignment on devices greater than 960px wide.</td>\n        </tr>\n        <tr>\n            <td>layout-align-lg</td>\n            <td>Sets child alignment on devices between 960px and 1200px wide.</td>\n        </tr>\n        <tr>\n            <td>layout-align-gt-lg</td>\n            <td>Sets child alignment on devices greater than 1200px wide.</td>\n        </tr>\n    </table>\n\n    <div ng-controller=\"layoutController\">\n        <p>See below for more examples: <code>layout=\"{{layout}}\" layout-align=\"{{align.first}} {{align.second}}\"</code></p>\n\n        <div layout=\"{{layout}}\" layout-align=\"{{align.first}} {{align.second}}\" class=\"small-box-container\">\n          <div class=\"small-box light-blue\">one</div>\n          <div class=\"small-box dark-blue\">two</div>\n          <div class=\"small-box light-green\">three</div>\n        </div>\n\n        <div class=\"layout-examples\" layout=\"row\" layout-align=\"top spread\">\n\n            <div layout=\"column\">\n                <span>Layout Direction</span>\n                <label>\n                    <input type=\"radio\" ng-model=\"layout\" value=\"row\" ng-click=\"swap('row')\"> row\n                </label>\n\n                <label>\n                    <input type=\"radio\" ng-model=\"layout\" value=\"column\" ng-click=\"swap('column')\"> column\n                </label>\n            </div>\n\n            <div layout=\"column\">\n                <span>Alignment in Layout Direction</span>\n\n                <label ng-repeat=\"option in options1\" for=\"{{align1}}\">\n                    <input type=\"radio\" name=\"align1\" ng-model=\"align.first\" ng-value=\"option\"> {{option}}\n                </label>\n            </div>\n\n            <div layout=\"column\">\n                <span>Alignment in Perpendicular Direction</span>\n\n                <label ng-repeat=\"option in options2\" for=\"{{align2}}\">\n                    <input type=\"radio\" name=\"align2\" ng-model=\"align.second\" ng-value=\"option\"> {{option}}\n                </label>\n            </div>\n        </div>\n    </div>\n\n\n    <!-- Options -->\n    <a id=\"Options\"></a>\n\n    <h1 class=\"title lg\">Options</h1>\n\n    <h2 class=\"title\">Responsive Layout</h2>\n\n    <div layout=\"row\" layout-sm=\"column\">\n      <div flex class=\"grow-box dark-blue\">\n        I'm above on mobile, and to the left on larger devices.\n      </div>\n      <div flex class=\"grow-box light-blue\">\n        I'm below on mobile, and to the right on larger devices.\n      </div>\n    </div>\n\n    <p>See the <a href=\"#/component/layout#Attribute\">Attribute</a> section for a basic explanation of layout attributes.</p>\n    <p>To make your layout change depending upon the device size, there are other <code>layout</code> attributes available:</p>\n\n    <table>\n        <tr>\n            <td>layout</td>\n            <td>Sets the default layout on all devices.</td>\n        </tr>\n        <tr>\n            <td>layout-sm</td>\n            <td>Sets the layout on devices less than 600px wide (phones).</td>\n        </tr>\n        <tr>\n            <td>layout-gt-sm</td>\n            <td>Sets the layout on devices greater than 600px wide (bigger than phones).</td>\n        </tr>\n        <tr>\n            <td>layout-md</td>\n            <td>Sets the layout on devices between 600px and 960px wide (tablets in portrait).</td>\n        </tr>\n        <tr>\n            <td>layout-gt-md</td>\n            <td>Sets the layout on devices greater than 960px wide (bigger than tablets in portrait).</td>\n        </tr>\n        <tr>\n            <td>layout-lg</td>\n            <td>Sets the layout on devices between 960 and 1200px wide (tablets in landscape).</td>\n        </tr>\n        <tr>\n            <td>layout-gt-lg</td><td>Sets the layout on devices greater than 1200px wide (computers and large screens).</td>\n        </tr>\n    </table>\n\n\n    <h2 class=\"title\">Layout Margin, Padding, and Fill</h2>\n\n    <div layout=\"row\" layout-margin layout-fill layout-padding>\n      <div flex class=\"grow-box dark-blue\">I'm on the left, and there's an empty area around me.</div>\n      <div flex class=\"grow-box light-blue\">I'm on the right, and there's an empty area around me.</div>\n    </div>\n\n    <p><code>layout-margin</code> adds margin around each <code>flex</code> child. It also adds a margin to the layout container itself.</p>\n    <p><code>layout-padding</code> adds padding inside each <code>flex</code> child. It also adds padding to the layout container itself.</p>\n    <p><code>layout-fill</code> forces the layout element to fill its parent container.</p>\n\n\n    <h2 class=\"title\">Wrap</h2>\n\n    <div layout=\"row\" layout-wrap>\n      <div flex=\"33\" class=\"grow-box dark-blue\">[flex=33]</div>\n      <div flex=\"66\" class=\"grow-box light-blue\">[flex=66]</div>\n      <div flex=\"66\" class=\"grow-box light-green\">[flex=66]</div>\n      <div flex=\"33\" class=\"grow-box dark-green\">[flex=33]</div>\n    </div>\n\n    <p><code>layout-wrap</code> allows <code>flex</code> children to wrap within the container if the elements use more than 100%. By default, flex elements do not wrap.</p>\n\n\n    <h2 class=\"title\">Responsive Flex &amp; Offset Attributes</h2>\n\n    <div layout=\"row\">\n      <div flex=\"66\" flex-sm=\"33\" class=\"grow-box dark-blue\">\n        I flex to one-third of the space on mobile, and two-thirds on other devices.\n      </div>\n      <div flex=\"33\" flex-sm=\"66\" class=\"grow-box light-blue\">\n        I flex to two-thirds of the space on mobile, and one-third on other devices.\n      </div>\n    </div>\n\n    <p>See the <a href=\"#/component/layout#Grid\">Grid</a> section for a basic explanation of flex and offset attributes.</p>\n\n    <table>\n        <tr>\n            <td>flex</td>\n            <td>Sets flex.</td>\n        </tr>\n        <tr>\n            <td>flex-sm</td>\n            <td>Sets flex on devices less than 600px wide.</td>\n        </tr>\n        <tr>\n            <td>flex-gt-sm</td>\n            <td>Sets flex on devices greater than 600px wide.</td>\n        </tr>\n        <tr>\n            <td>flex-md</td>\n            <td>Sets flex on devices between 600px and 960px wide..</td>\n        </tr>\n        <tr>\n            <td>flex-gt-md</td>\n            <td>Sets flex on devices greater than 960px wide.</td>\n        </tr>\n        <tr>\n            <td>flex-lg</td>\n            <td>Sets flex on devices between 960px and 1200px.</td>\n        </tr>\n        <tr>\n            <td>flex-gt-lg</td>\n            <td>Sets flex on devices greater than 1200px wide.</td>\n        </tr>\n    </table>\n\n\n    <h2 class=\"title\">Hide and Show Attributes</h2>\n\n    <div layout layout-align=\"center center\" class=\"small-box-container\">\n      <div hide-sm class=\"grow-box dark-blue\">\n        I'm hidden on mobile and shown on larger devices.\n      </div>\n      <div hide-gt-sm class=\"grow-box dark-green\">\n        I'm shown on mobile and hidden on larger devices.\n      </div>\n    </div>\n\n    <table>\n        <tr>\n            <td>hide</td>\n            <td><code>display: none</code></td>\n        </tr>\n        <tr>\n            <td>hide-sm</td>\n            <td><code>display: none</code> on devices less than 600px wide.</td>\n        </tr>\n        <tr>\n            <td>hide-gt-sm</td>\n            <td><code>display: none</code> on devices greater than 600px wide.</td>\n        </tr>\n        <tr>\n            <td>hide-md</td>\n            <td><code>display: none</code> on devices between 600px and 960px wide.</td>\n        </tr>\n        <tr>\n            <td>hide-gt-md</td>\n            <td><code>display: none</code> on devices greater than 960px wide.</td>\n        </tr>\n        <tr>\n            <td>hide-lg</td>\n            <td><code>display: none</code> on devices between 960px and 1200px.</td>\n        </tr>\n        <tr>\n            <td>hide-gt-lg</td>\n            <td><code>display: none</code> on devices greater than 1200px wide.</td>\n        </tr>\n        <tr>\n            <td>show</td>\n            <td>Negates hide.</td>\n        </tr>\n        <tr>\n            <td>show-sm</td>\n            <td>Negates hide on devices less than 600px wide.</td>\n        </tr>\n        <tr>\n            <td>show-gt-sm</td>\n            <td>Negates hide on devices greater than 600px wide.</td>\n        </tr>\n        <tr>\n            <td>show-md</td>\n            <td>Negates hide on devices between 600px and 960px wide..</td>\n        </tr>\n        <tr>\n            <td>show-gt-md</td>\n            <td>Negates hide on devices greater than 960px wide.</td>\n        </tr>\n        <tr>\n            <td>show-lg</td>\n            <td>Negates hide on devices between 960px and 1200px.</td>\n        </tr>\n        <tr>\n            <td>show-gt-lg</td>\n            <td>Negates hide on devices greater than 1200px wide.</td>\n        </tr>\n    </table>\n</div>",
            "less": "// Adapted from https://github.com/angular/material/commits/master/src/core/style/layout.scss\n// commit 4216d242d78f1bdadd89ebd59e1d80b9cc4f2978\n\n@import 'flexbox';\n@import 'mixins';\n@import 'vars';\n\n// Layout\n// ------------------------------\n\n[layout] {\n  .box-sizing(border-box);\n  .flexbox;\n}\n\n[layout=\"column\"] {\n  .flex-direction(column);\n}\n\n[layout=\"row\"] {\n  .flex-direction(row);\n}\n\n[layout-padding],\n[layout-padding] > [flex] {\n  padding: @layout-gutter-width / 2;\n}\n\n[layout-margin],\n[layout-margin] > [flex] {\n  margin: @layout-gutter-width / 2;\n}\n\n[layout-wrap] {\n  .flex-wrap(wrap);\n}\n\n[layout-fill] {\n  margin: 0;\n  min-height: 100%;\n  width: 100%;\n}\n@-moz-document url-prefix() {\n  [layout-fill] {\n    margin: 0;\n    width: 100%;\n    min-height: auto;\n    height: inherit;\n  }\n}\n\n\n// Used to concatenate selectors with '-' delimiter or without if no value provided\n// Only works for variable name @selector\n.concat-selector(@base, @value) when not (@value = null) {\n  @selector: ~'@{base}-@{value}';\n}\n.concat-selector(@base, @value) when (@value = null) {\n  @selector: ~'@{base}';\n}\n\n\n.flex-order-for-name(@suffix: null) {\n  .concat-selector('flex-order', @suffix);\n  .loop (@i) when (@i < 10) {\n    [@{selector}=\"@{i}\"] { order: @i; }\n    .loop (@i + 1);\n  }\n  .loop (0);\n}\n\n.layout-for-name(@name) {\n  @selector: ~'layout-@{name}';\n  [@{selector}] {\n    .box-sizing(border-box);\n    .flexbox;\n  }\n  [@{selector}=\"column\"] {\n    .flex-direction(col);\n  }\n  [@{selector}=\"row\"] {\n    .flex-direction(row);\n  }\n}\n\n.offset-for-name(@suffix: null) {\n  .concat-selector('flex-offset', @suffix);\n  .loop (@i) when (@i < 20) {\n    @offset: @i * 5;\n    [@{selector}=\"@{offset}\"] {\n      margin-left: ~\"@{offset}%\";\n    }\n    .loop (@i + 1);\n  }\n  .loop (1);\n\n  [@{selector}=\"33\"], [@{selector}=\"34\"] {\n    margin-left: 33.33%;\n  }\n  [@{selector}=\"66\"], [@{selector}=\"67\"] {\n    margin-left: 66.66%;\n  }\n}\n\n\n.flex-properties-for-name(@suffix: null) {\n  .concat-selector('flex', @suffix);\n\n  [@{selector}] {\n    .box-sizing(border-box);\n    .flex(1);\n  }\n\n  // (0-20) * 5 = 0-100%\n  .loop (@i) when (@i < 21) {\n    @flex: @i * 5;\n    [@{selector}=\"@{flex}\"] {\n      .flex(0 0 ~'@{flex}%');\n    }\n    [layout=\"row\"] > [@{selector}=\"@{flex}\"] {\n      max-width: ~'@{flex}%';\n    }\n    [layout=\"column\"] > [@{selector}=\"@{flex}\"] {\n      max-height: ~'@{flex}%';\n    }\n    .loop (@i + 1);\n  }\n  .loop (0);\n\n  [@{selector}=\"33\"], [@{selector}=\"34\"] {\n    .flex(0 0 33.33%);\n  }\n  [@{selector}=\"66\"], [@{selector}=\"67\"] {\n    .flex(0 0 66.66%);\n  }\n\n  [layout=\"row\"] {\n    > [@{selector}=\"33\"], > [@{selector}=\"34\"] {\n      max-width: 33.33%;\n    }\n    > [@{selector}=\"66\"], > [@{selector}=\"67\"] {\n      max-width: 66.66%;\n    }\n  }\n  [layout=\"column\"] {\n    > [@{selector}=\"33\"], > [@{selector}=\"34\"] {\n      max-height: 33.33%;\n    }\n    > [@{selector}=\"66\"], > [@{selector}=\"67\"] {\n      max-height: 66.66%;\n    }\n  }\n}\n\n\n.layout-align-for-name(@suffix: null) {\n  .concat-selector('layout', @suffix);\n\n  [@{selector}=\"row\"] {\n    .concat-selector('layout-align', @suffix);\n\n    &[@{selector}~=\"left\"]    { .justify-content(flex-start); }\n    &[@{selector}~=\"center\"]  { .justify-content(center); }\n    &[@{selector}~=\"right\"]   { .justify-content(flex-end); }\n    &[@{selector}~=\"justify\"] { .justify-content(space-between); }\n    &[@{selector}~=\"spread\"]  { .justify-content(space-around); }\n\n    &[@{selector}~=\"top\"]     { .align-items(flex-start); }\n    &[@{selector}~=\"middle\"]  { .align-items(center); }\n    &[@{selector}~=\"bottom\"]  { .align-items(flex-end); }\n    &[@{selector}~=\"stretch\"] { .align-items(stretch); }\n  }\n\n  [@{selector}=\"column\"] {\n    .concat-selector('layout-align', @suffix);\n\n    &[@{selector}~=\"top\"]     { .justify-content(flex-start); }\n    &[@{selector}~=\"middle\"]  { .justify-content(center); }\n    &[@{selector}~=\"bottom\"]  { .justify-content(flex-end); }\n    &[@{selector}~=\"justify\"] { .justify-content(space-between); }\n    &[@{selector}~=\"spread\"]  { .justify-content(space-around); }\n\n    &[@{selector}~=\"left\"]    { .align-items(flex-start); }\n    &[@{selector}~=\"center\"]  { .align-items(center); }\n    &[@{selector}~=\"right\"]   { .align-items(flex-end); }\n    &[@{selector}~=\"stretch\"] { .align-items(stretch); }\n  }\n}\n\n// Flex attributes for layout children\n// ------------------------------\n\n.flex-properties-for-name();\n.layout-align-for-name();\n.flex-order-for-name();\n.offset-for-name();\n\n\n// Adapted from https://github.com/angular/material/commits/master/src/core/style/layout.scss\n// commit 4216d242d78f1bdadd89ebd59e1d80b9cc4f2978\n\n@import 'src/layout/layout.less';\n\n// Responsive attributes\n// ------------------------------\n\n[layout-padding] > [flex-sm],\n[layout-padding] > [flex-lt-md]\n{\n  padding: @layout-gutter-width / 4;\n}\n[layout-padding] > [flex-gt-sm],\n[layout-padding] > [flex-md],\n[layout-padding] > [flex-lt-lg]\n{\n  padding: @layout-gutter-width / 2;\n}\n[layout-padding] > [flex-gt-md],\n[layout-padding] > [flex-lg]\n{\n  padding: @layout-gutter-width / 1;\n}\n\n[layout-margin] > [flex-sm],\n[layout-margin] > [flex-lt-md]\n{\n  margin: @layout-gutter-width / 4;\n}\n[layout-margin] > [flex-gt-sm],\n[layout-margin] > [flex-md],\n[layout-margin] > [flex-lt-lg] {\n  margin: @layout-gutter-width / 2;\n}\n[layout-margin] > [flex-gt-md],\n[layout-margin] > [flex-lg]\n{\n  margin: @layout-gutter-width / 1;\n}\n\n\n/**\n * `hide-gt-sm show-gt-lg` should hide from 600px to 1200px\n * `show-md hide-gt-sm` should show from 0px to 960px and hide at > 960px\n * `hide-gt-md show-gt-sm` should show everywhere (show overrides hide)`\n */\n\n\n// SMALL SCREEN\n@media (max-width: (@layout-breakpoint-sm - 1)) {\n  [hide-sm], [hide] {\n    &:not([show-sm]):not([show]) {\n      display: none;\n    }\n  }\n\n  .flex-order-for-name(sm);\n  .layout-align-for-name(sm);\n  .layout-for-name(sm);\n  .offset-for-name(sm);\n  .flex-properties-for-name(sm);\n}\n\n// BIGGER THAN SMALL SCREEN\n@media (min-width: @layout-breakpoint-sm) {\n  .flex-order-for-name(gt-sm);\n  .layout-align-for-name(gt-sm);\n  .layout-for-name(gt-sm);\n  .offset-for-name(gt-sm);\n  .flex-properties-for-name(gt-sm);\n}\n\n// MEDIUM SCREEN\n@media (min-width: @layout-breakpoint-sm) and (max-width: (@layout-breakpoint-md - 1)) {\n  [hide], [hide-gt-sm] {\n    &:not([show-gt-sm]):not([show-md]):not([show]) {\n      display: none;\n    }\n  }\n  [hide-md]:not([show-md]):not([show]) {\n    display: none;\n  }\n\n  .flex-order-for-name(md);\n  .layout-align-for-name(md);\n  .layout-for-name(md);\n  .offset-for-name(md);\n  .flex-properties-for-name(md);\n}\n\n// BIGGER THAN MEDIUM SCREEN\n@media (min-width: @layout-breakpoint-md) {\n  .flex-order-for-name(gt-md);\n  .layout-align-for-name(gt-md);\n  .layout-for-name(gt-md);\n  .offset-for-name(gt-md);\n  .flex-properties-for-name(gt-md);\n}\n\n// LARGE SCREEN\n@media (min-width: @layout-breakpoint-md) and (max-width: (@layout-breakpoint-lg - 1)) {\n  [hide], [hide-gt-sm], [hide-gt-md] {\n    &:not([show-gt-sm]):not([show-gt-md]):not([show-lg]):not([show]) {\n      display: none;\n    }\n  }\n  [hide-lg]:not([show-lg]):not([show]) {\n    display: none;\n  }\n\n  .flex-order-for-name(lg);\n  .layout-align-for-name(lg);\n  .layout-for-name(lg);\n  .offset-for-name(lg);\n  .flex-properties-for-name(lg);\n}\n\n// BIGGER THAN LARGE SCREEN\n@media (min-width: @layout-breakpoint-lg) {\n  [hide-gt-sm], [hide-gt-md], [hide-gt-lg], [hide] {\n    &:not([show-gt-sm]):not([show-gt-md]):not([show-gt-lg]):not([show]) {\n      display: none;\n    }\n  }\n\n  .flex-order-for-name(gt-lg);\n  .layout-align-for-name(gt-lg);\n  .layout-for-name(gt-lg);\n  .offset-for-name(gt-lg);\n  .flex-properties-for-name(gt-lg);\n}\n\n.layout-demo {\n  .base-box {\n    height: 50px;\n    color: white;\n    font-weight: bold;\n    padding: 20px;\n    text-shadow: 0 0 4px rgba(100, 100, 100, 1);\n  }\n\n  .box {\n    &:extend(.layout-demo .base-box);\n    width: 150px;\n    margin: 10px 15px;\n  }\n\n  .flex-box {\n    &:extend(.layout-demo .base-box);\n    width: auto;\n  }\n\n  .dark-blue { background-color: #4881c0; }\n  .light-blue { background-color: #86cafd; }\n  .dark-green { background-color: #24b56a; }\n  .light-green { background-color: #c8e5bf; }\n  .orange { background-color: #db7820; }\n\n  .small-box-container {\n    width: 95%;\n    height: 300px;\n    margin: 0 auto 10px;\n    box-shadow: 0 0 5px 0 rgba(0,0,0,0.6);\n  }\n\n  .small-box {\n    &:extend(.layout-demo .base-box);\n    height: auto;\n    width: auto;\n    text-align: center;\n  }\n\n  .grow-box {\n    &:extend(.layout-demo .base-box);\n    height: auto;\n  }\n\n  .layout-examples {\n    input[type=\"radio\"] {\n      margin-right: 6px;\n    }\n\n    label {\n      margin: 10px 0 0 10px;\n    }\n  }\n}\n",
            "midway": "\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    },
    {
        "name": "metadata",
        "moduleName": "'encore.ui.metadata'",
        "displayName": "Metadata",
        "srcFiles": [],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\"></a></p>\n<p>This component provides styles and a demo for displays of metadata.</p>\n",
            "js": "",
            "html": "<!-- Sample HTML goes here as a live example of how to the component can be used -->\n<div class=\"metadata\">\n     <dl>\n         <dt>Status:</dt>\n         <dd>Active</dd>\n         <dt>RCN:</dt>\n         <dd>RCN-555-555-555</dd>\n         <dt>Type:</dt>\n         <dd>Cloud</dd>\n         <dt>Service Level:</dt>\n         <dd>Managed &rarr; Managed</dd>\n         <dt>Service Type:</dt>\n         <dd>DevOps &rarr; SysOps</dd>\n         <dt>Plan Change Status:</dt>\n         <dd>Pending</dd>\n         <dt>Service Team:</dt>\n         <dd><a href=\"#\">Link</a></dd>\n     </dl>\n </div>\n",
            "less": "/*\n * metadata\n */\n.metadata {\n    overflow: hidden;\n    font-size: 16px;\n    color: #727272;\n    line-height: 1.6em;\n\n    dl {\n        margin: 0;\n        clear: both;\n    }\n\n    dt {\n      float: left;\n      font-weight: 700;\n      text-align: left;\n      clear: left;\n      margin-right: 1em;\n    }\n    dd {\n        font-weight: 400;\n        text-align: left;\n        margin: 0;\n        display: list-item;\n        list-style-type: none;\n        list-style-image: url('');\n    }\n}\n",
            "midway": "\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    },
    {
        "name": "progressbar",
        "moduleName": "'encore.ui.progressbar'",
        "displayName": "Progressbar",
        "srcFiles": [],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/experimental.svg\" alt=\"experimental\"></a></p>\n<p>Angular Bootstrap progressbar. See the <a href=\"http://angular-ui.github.io/bootstrap/\">Angular Bootstrap page</a> for more details.</p>\n",
            "js": "/*jshint unused:false*/\n\n// This file is used to help build the 'demo' documentation page and should be updated with example code\nfunction progressbarCtrl ($scope) {\n\n}\n",
            "html": "<!-- Sample HTML goes here as a live example of how the component can be used -->\n<div ng-controller=\"progressbarCtrl\">\n     <div class=\"pure-g columns clear\">\n        <div class=\"pure-u-2-3\">\n            <progressbar class=\"progress-striped active\" value=\"45\" max=\"100\"></progressbar>\n        </div>\n    </div>\n     <div class=\"pure-g columns clear\">\n        <div class=\"pure-u-2-3\">\n            <progressbar class=\"progress-striped active\" value=\"22\">22%</progressbar>\n        </div>\n    </div>\n     <div class=\"pure-g columns clear\">\n        <div class=\"pure-u-2-3\">\n            <progressbar class=\"progress-striped active\" max=\"3\" value=\"2\"><i>2 of 3 servers processed</i></progressbar>\n        </div>\n    </div>\n     <div class=\"pure-g columns clear\">\n        <div class=\"pure-u-2-3\">\n            <progressbar class=\"progress active\" max=\"3\" value=\"3\"><i>3 of 3 servers processed</i></progressbar>\n        </div>\n    </div>\n\n</div>\n",
            "less": "@import 'vars';\n\n//** Background color of the whole progress component\n@progress-bg: #f5f5f5;\n\n//** Default progress bar color\n@progress-bar-bg: #86cafd;\n\n//** Secondary progress bar color\n@progress-bar-secondary-bg: @infoBlue;\n\n//** Tertiary progress bar color\n@progress-bar-tertiary-bg: @actionGreen;\n\n@font-size-base: @appFontSize;\n@font-size-large:         ceil((@font-size-base * 1.25));\n@font-size-small:         ceil((@font-size-base * 0.85)); \n\n//** Unit-less `line-height` for use in components like buttons.\n@line-height-base:        1.428571429; // 20/14\n\n//** Computed \"line-height\" (`font-size` * `line-height`) for use with `margin`, `padding`, etc.\n@line-height-computed:    floor((@font-size-base * @line-height-base)); // ~20px\n\n// Bar animations\n// -------------------------\n// WebKit\n@-webkit-keyframes progress-bar-stripes {\n    from  { background-position: 40px 0; }\n    to    { background-position: 0 0; }\n}\n\n// Spec and IE10+\n@keyframes progress-bar-stripes {\n    from  { background-position: 40px 0; }\n    to    { background-position: 0 0; }\n}\n\n// Bar itself\n// -------------------------\n\n.progress-bar-variant(@color) {\n    background-color: @color;\n\n    // Deprecated parent class requirement as of v3.2.0\n    .progress-striped & {\n        #gradient > .striped();\n    }\n}\n\n// Outer container\n.progress {\n    overflow: hidden;\n    height: @line-height-computed;\n    margin-bottom: @line-height-computed;\n    background-color: @progress-bg;\n    border: 1px solid #ccc;\n    padding: 1px;\n}\n\n// Bar of progress\n.progress-bar {\n    float: left;\n    width: 0%;\n    height: 100%;\n    font-size: @font-size-small;\n    line-height: @line-height-computed;\n    color: #1672b9;\n    text-align: center;\n    background-color: @progress-bar-bg;\n    .transition(width .6s ease);\n}\n\n// Striped bars\n//\n// `.progress-striped .progress-bar` is deprecated as of v3.2.0 in favor of the\n// `.progress-bar-striped` class, which you just add to an existing\n// `.progress-bar`.\n.progress-striped .progress-bar,\n.progress-bar-striped {\n    #gradient > .striped();\n    background-size: 40px 40px;\n}\n\n// Call animation for the active one\n//\n// `.progress.active .progress-bar` is deprecated as of v3.2.0 in favor of the\n// `.progress-bar.active` approach.\n.progress.active .progress-bar,\n.progress-bar.active {\n    .animation(progress-bar-stripes 2s linear infinite);\n}\n\n// Variations\n// -------------------------\n\n.progress-bar-secondary {\n    .progress-bar-variant(@progress-bar-secondary-bg);\n    color: #fff;\n}\n\n.progress-bar-tertiary {\n    .progress-bar-variant(@progress-bar-tertiary-bg);\n    color: #fff;\n}\n\n#gradient {\n\n    // Horizontal gradient, from left to right\n    //\n    // Creates two color stops, start and end, by specifying a color and position for each color stop.\n    // Color stops are not available in IE9 and below.\n    .horizontal(@start-color: #555; @end-color: #333; @start-percent: 0%; @end-percent: 100%) {\n        background-image: -webkit-linear-gradient(left, @start-color @start-percent, @end-color @end-percent); // Safari 5.1-6, Chrome 10+\n        background-image: -o-linear-gradient(left, @start-color @start-percent, @end-color @end-percent); // Opera 12\n        background-image: linear-gradient(to right, @start-color @start-percent, @end-color @end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+\n        background-repeat: repeat-x;\n        filter: e(%(\"progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)\",argb(@start-color),argb(@end-color))); // IE9 and down\n    }\n\n    // Vertical gradient, from top to bottom\n    //\n    // Creates two color stops, start and end, by specifying a color and position for each color stop.\n    // Color stops are not available in IE9 and below.\n    .vertical(@start-color: #555; @end-color: #333; @start-percent: 0%; @end-percent: 100%) {\n        background-image: -webkit-linear-gradient(top, @start-color @start-percent, @end-color @end-percent);  // Safari 5.1-6, Chrome 10+\n        background-image: -o-linear-gradient(top, @start-color @start-percent, @end-color @end-percent);  // Opera 12\n        background-image: linear-gradient(to bottom, @start-color @start-percent, @end-color @end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+\n        background-repeat: repeat-x;\n        filter: e(%(\"progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)\",argb(@start-color),argb(@end-color))); // IE9 and down\n    }\n\n    .directional(@start-color: #555; @end-color: #333; @deg: 45deg) {\n        background-repeat: repeat-x;\n        background-image: -webkit-linear-gradient(@deg, @start-color, @end-color); // Safari 5.1-6, Chrome 10+\n        background-image: -o-linear-gradient(@deg, @start-color, @end-color); // Opera 12\n        background-image: linear-gradient(@deg, @start-color, @end-color); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+\n    }\n\n    .horizontal-three-colors(@start-color: #00b3ee; @mid-color: #7a43b6; @color-stop: 50%; @end-color: #c3325f) {\n        background-image: -webkit-linear-gradient(left, @start-color, @mid-color @color-stop, @end-color);\n        background-image: -o-linear-gradient(left, @start-color, @mid-color @color-stop, @end-color);\n        background-image: linear-gradient(to right, @start-color, @mid-color @color-stop, @end-color);\n        background-repeat: no-repeat;\n        filter: e(%(\"progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)\",argb(@start-color),argb(@end-color))); // IE9 and down, gets no color-stop at all for proper fallback\n    }\n\n    .vertical-three-colors(@start-color: #00b3ee; @mid-color: #7a43b6; @color-stop: 50%; @end-color: #c3325f) {\n        background-image: -webkit-linear-gradient(@start-color, @mid-color @color-stop, @end-color);\n        background-image: -o-linear-gradient(@start-color, @mid-color @color-stop, @end-color);\n        background-image: linear-gradient(@start-color, @mid-color @color-stop, @end-color);\n        background-repeat: no-repeat;\n        filter: e(%(\"progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)\",argb(@start-color),argb(@end-color))); // IE9 and down, gets no color-stop at all for proper fallback\n    }\n\n    .radial(@inner-color: #555; @outer-color: #333) {\n        background-image: -webkit-radial-gradient(circle, @inner-color, @outer-color);\n        background-image: radial-gradient(circle, @inner-color, @outer-color);\n        background-repeat: no-repeat;\n    }\n\n    .striped(@color: rgba(255,255,255,.15); @angle: 45deg) {\n        background-image: -webkit-linear-gradient(@angle, @color 25%, transparent 25%, transparent 50%, @color 50%, @color 75%, transparent 75%, transparent);\n        background-image: -o-linear-gradient(@angle, @color 25%, transparent 25%, transparent 50%, @color 50%, @color 75%, transparent 75%, transparent);\n        background-image: linear-gradient(@angle, @color 25%, transparent 25%, transparent 50%, @color 50%, @color 75%, transparent 75%, transparent);\n    }\n}\n\n.animation(@animation) {\n    -webkit-animation: @animation;\n         -o-animation: @animation;\n            animation: @animation;\n}\n",
            "midway": "\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    },
    {
        "name": "rxAccountInfo",
        "moduleName": "'encore.ui.rxAccountInfo'",
        "displayName": "Rx Account Info",
        "srcFiles": [
            "src/rxAccountInfo/rxAccountInfo.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [
            "templates/rxAccountInfo/templates/rxAccountInfo.html",
            "templates/rxAccountInfo/templates/rxAccountInfoBanner.html"
        ],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/experimental.svg\" alt=\"experimental\"></a></p>\n<p>This component is used to draw an account info box at the top of each page, directly underneath the breadcrumbs. <code>rxPage</code> (through <code>rxApp</code>) integrates it directly into its template, and you activate it by passing <code>account-number=&quot;...&quot;</code> to <code>&lt;rx-page&gt;</code>.</p>\n<p>While you could theoretically use this component elsewhere, its design and style were done with the intention of sitting underneath the breadcrumbs.</p>\n<p>When placed on a page that has <code>:user</code> in its route parameters, this component will also draw a drop-down user selector, to allow the Racker to change which user they&#39;re looking at for the given account. At this time, this user-selection is <em>only</em> available for products under Cloud. If you need it for additional products, please let us know. </p>\n<p>This directive requires that <code>SupportAccount</code>, <code>Encore</code>, <code>AccountStatusGroup</code>, and <code>Teams</code> services are available. These are not provided by this project,\nbut are available in an internal Rackspace repository.</p>\n",
            "js": "// Note that these factories are only present for the purposes of this demo. In a real application,\n// SupportAccount, Teams, AccountStatusGroup, and Encore will have to be provided from elsewhere,\n// outside of encore-ui. Specifically, we implement them in encore-ui-svcs\n\nangular.module('encore.ui.rxAccountInfo')\n.value('Badges',\n    [\n        {\n            url: 'http://mirrors.creativecommons.org/presskit/icons/cc.large.png',\n            description: 'Enables the free distribution of an otherwise copyrighted work.',\n            name: 'Creative Commons'\n        }, {\n            url: 'http://mirrors.creativecommons.org/presskit/icons/by.large.png',\n            description: ['You must give appropriate credit, provide a link to the',\n                          'license, and indicate if changes were made.'].join(' '),\n            name: 'Attribution'\n        }, {\n            url: 'http://mirrors.creativecommons.org/presskit/icons/nc.large.png',\n            description: 'You may not use the material for commercial purposes.',\n            name: 'Non-Commercial'\n        }, {\n            url: 'http://mirrors.creativecommons.org/presskit/icons/zero.large.png',\n            description: 'Waives as many rights as legally possible, worldwide.',\n            name: 'Public Domain'\n        }\n    ]\n)\n.value('TeamBadges',\n    [\n        {\n            url: 'http://mirrors.creativecommons.org/presskit/icons/share.large.png',\n            description: ['Licensees may distribute derivative works only under a license',\n                          'identical to the license that governs the original work.'].join(' '),\n            name: 'ShareAlike'\n        }, {\n            url: 'http://mirrors.creativecommons.org/presskit/icons/nd.large.png',\n            description: ['Licensees may copy, distribute, display and perform only verbatim',\n                          'copies of the work, not derivative works based on it.'].join(' '),\n            name: 'No-Derivs'\n        }\n    ]\n)\n.factory('SupportAccount', function ($q, Badges) {\n    return {\n        getBadges: function (config, success, failure) {\n            var deferred = $q.defer();\n\n            if (config.accountNumber === '6789') {\n                deferred.reject();\n            } else {\n                deferred.resolve(Badges);\n            }\n\n            deferred.promise.then(success, failure);\n\n            return deferred.promise;\n        }\n    };\n})\n.factory('Teams', function ($q, TeamBadges) {\n    return {\n        badges: function (config) {\n            var deferred = $q.defer();\n\n            if (config.id === '9876') {\n                deferred.reject();\n            } else {\n                deferred.resolve(TeamBadges);\n            }\n\n            deferred.$promise = deferred.promise;\n\n            return deferred;\n        }\n    };\n})\n.factory('Encore', function ($q) {\n    return {\n        getAccount: function (config, success, failure) {\n            var deferred = $q.defer();\n\n            if (config.id === '9876') {\n                deferred.reject();\n            } else if (config.id === '5623') {\n                deferred.resolve({ name: 'DelinquentAccount', status: 'Delinquent' });\n            } else if (config.id === '3265') {\n                deferred.resolve({ name: 'UnverifiedAccount', status: 'Unverified' });\n            } else {\n                deferred.resolve({ name: 'Mosso', status: 'Active' });\n            }\n\n            deferred.promise.then(success, failure);\n\n            return deferred.promise;\n        }\n    };\n})\n.factory('AccountStatusGroup', function () {\n    var warning = ['suspended', 'delinquent'];\n    var info = ['unverified', 'pending approval', 'approval denied', 'teststatus', 'terminated'];\n\n    return function (statusText) {\n        var lower = statusText.toLowerCase();\n        if (_.contains(warning, lower)) {\n            return 'warning';\n        } else if (_.contains(info, lower)) {\n            return 'info';\n        }\n        return '';\n    };\n})\n.controller('rxAccountInfoDemo', function ($scope) {\n        $scope.customMenu = [{\n            title: 'Example Menu',\n            children: [\n                {\n                    href: 'Lvl1-1',\n                    linkText: '1st Order Item'\n                },\n                {\n                    linkText: '1st Order Item (w/o href) w/ Children',\n                    childVisibility: [ 'isUserDefined' ],\n                    childHeader: '<strong class=\"current-search\">Current User:</strong>' +\n                                 '<span class=\"current-result\">{{$root.user}}</span>',\n                    children: [\n                        {\n                            href: 'Lvl1-2-Lvl2-1',\n                            linkText: '2nd Order Item w/ Children',\n                            children: [{\n                                href: 'Lvl1-2-Lvl2-1-Lvl3-1',\n                                linkText: '3rd Order Item'\n                            }]\n                        },\n                        {\n                            href: 'Lvl1-2-Lvl2-2',\n                            linkText: '2nd Order Item w/ Children',\n                            children: [\n                                {\n                                    href: 'Lvl1-2-Lvl2-2-Lvl3-1',\n                                    linkText: '3rd Order Item'\n                                },\n                                {\n                                    href: 'Lvl1-2-Lvl2-2-Lvl3-2',\n                                    linkText: '3rd Order Item'\n                                },\n                                {\n                                    href: 'Lvl1-2-Lvl2-2-Lvl3-3',\n                                    linkText: '3rd Order Item'\n                                },\n                                {\n                                    href: 'Lvl1-2-Lvl2-2-Lvl3-4',\n                                    linkText: '3rd Order Item'\n                                }\n                            ]\n                        },\n                        {\n                            href: 'Lvl1-2-Lvl2-3',\n                            linkText: '2nd Order Item'\n                        }\n                    ]\n                },\n                {\n                    href: 'Lvl1-3',\n                    linkText: '1st Order Item w/ Children',\n                    children: [\n                        {\n                            href: 'Lvl1-3-Lvl2-1',\n                            linkText: '2nd Order Item'\n                        }\n                    ]\n                }\n            ]\n        }];\n    });\n",
            "html": "<!-- Sample HTML goes here as a live example of how to the component can be used -->\n\n<h3 class=\"title\">Account Info Enabled</h3>\n<p>When <code>account-number=\"...\"</code> is passed to <code>&lt;rx-page&gt;</code>, the account info banner will automatically be drawn underneath the breadcrumbs, as shown here.\n</p>\n<div ng-controller='rxAccountInfoDemo'>\n<rx-app collapsible-nav=\"true\" site-title=\"My App\" id=\"custom-rxApp\" menu=\"customMenu\" new-instance=\"true\" hide-feedback=\"true\">\n<rx-page title=\"'Demo Title'\" subtitle=\"subtitle\" status=\"alpha\"\n    account-number=\"12345\" team-id=\"123\">\n    </rx-page>\n</rx-app>\n</div>\n\nThe rest of the examples just show the affect of different conditions on the account info banner, rather than showing an entire <code>rxApp</code> sample again.\n\n<hr />\n\n<h3 class=\"title sm\">Working Account Info</h3>\n<div class=\"demo-working-account\">\n    <rx-account-info account-info-banner='true' account-number=\"12345\"></rx-account-info>\n</div>\n\n<hr />\n\n<h3 class=\"title sm\">Deliquent Account </h3>\n<p>Note the changed styling on \"Account Status\".<p>\n<div class=\"delinquent-account\">\n    <rx-account-info account-info-banner='true' account-number=\"5623\"></rx-account-info>\n</div>\n<hr />\n\n<h3 class=\"title sm\">Working Account Info with Team Badges</h3>\n<div class=\"demo-working-teams unverified-account\">\n    <rx-account-info account-info-banner='true' account-number=\"3265\" team-id=\"123\"></rx-account-info>\n</div>\n\n<hr />\n\n<div>\n    <h3 class=\"title sm\">Can't Load Badges</h3>\n    <rx-notifications stack=\"badgeError\"></rx-notifications>\n    <div class=\"demo-badge-error\">\n        <rx-account-info account-info-banner='true' account-number=\"6789\" notify-stack=\"badgeError\"></rx-account-info>\n    </div>\n</div>\n\n<hr />\n\n<div>\n    <h3 class=\"title sm\">Can't Load Team Badges</h3>\n    <rx-notifications stack=\"teamBadgeError\"></rx-notifications>\n    <div class=\"demo-team-badge-error\">\n        <rx-account-info account-info-banner='true' account-number=\"12345\" team-id=\"9876\" notify-stack=\"teamBadgeError\"></rx-account-info>\n    </div>\n</div>\n\n<hr />\n\n<div>\n    <h3 class=\"title sm\">Can't Load Account Name</h3>\n    <rx-notifications stack=\"nameError\"></rx-notifications>\n    <div class=\"demo-name-error\">\n        <rx-account-info account-info-banner='true' account-number=\"9876\" notify-stack=\"nameError\"></rx-account-info>\n    </div>\n</div>\n\n<hr />\n\n<p>The Account Info box is intended to appear as a banner directly beneath a page's breadcrumbs, and <code>rxPage</code> has been augmented to support this. In the past though, we supported a different format for the Account Info, which you would explicitly place wherever on the page you liked.</p>\n\n<p>This old format is still available. Simply use <code>rx-account-info</code> as above, but leave out the <code>account-info-banner='true'</code> attribute. This style is considered deprecated, and should not be used for new work.</p>\n\n<div class=\"demo-working-account-old\">\n    <rx-account-info account-number=\"12345\"></rx-account-info>\n</div>\n",
            "less": "/*\n * rxAccountInfo\n */\n.rx-account-info {\n    .info-panel {\n        overflow: hidden;\n    }\n    .account-info-wrapper {\n        float: left;\n        margin-right: 5em;\n    }\n    .account-info-label {\n        color: #777;\n    }\n    .account-info-data {\n        color: #777;\n        font-size: 26px;\n        img {\n            height: 35px;\n            margin-right: 5px;\n        }\n    }\n\n}\n\n/*\n * rxAccountInfoBanner\n */\n.rx-page {\n    // Account Info Banner\n\n    .account-info-banner {\n        clear: both;\n        background: #d1d1d1;\n        width: 100%;\n        border-top: 1px solid;\n        border-color: #b9b9b9;\n    }\n\n    ul.account-info-text {\n        padding: 5px 50px 5px 12px;\n        overflow: hidden;\n        li {\n            float: left;\n            padding-right: 40px;\n            .label {\n                color: #797979;\n                text-shadow: 0 1px #efefef;\n                font-size: 9px;\n            }\n            .account-data {\n                color: #505050;\n                font-size: 18px;\n                font-weight: 300;\n                .field-select {\n                    width: 140px;\n                    &:before { // background behind arrow\n                        background: #959595;\n                        top: 4px;\n                        height: 80%;\n                    }\n                    &:after { // arrow color\n                        color: #6c6c6c;\n                    }\n                }\n                select {\n                    font-size: 12px;\n                    background: #959595; // select box background\n                    border: 1px solid #6c6c6c;\n                    color: #fff;\n                }\n            }\n            .msg-warn {\n                color: #cb2124;\n            }\n            .msg-info {\n                color: #dd7800;\n            }\n        }\n        li.badges {\n            float: right;\n            padding: 0;\n            .account-info-badge {\n                .tooltip {\n                    width: 150px;\n                }\n                img {\n                    width: 35px;\n                    float: left;\n                    margin: 5px 2px;\n                }\n            }\n        }\n    }\n\n    ul.account-info-badges {\n        overflow: hidden;\n    }\n}\n",
            "midway": "var rxAccountInfoPage = require('../rxAccountInfo.page').rxAccountInfo;\nvar notifications = require('../../rxNotify/rxNotify.page').rxNotify;\nvar expect = require('chai').use(require('chai-as-promised')).expect;\n\ndescribe('rxAccountInfo', function () {\n    var rxAccountInfo;\n\n    before(function () {\n        demoPage.go('#/component/rxAccountInfo');\n        rxAccountInfo = rxAccountInfoPage.initialize($('.demo-working-account rx-account-info'));\n    });\n\n    it('should show element', function () {\n        expect(rxAccountInfo.isDisplayed()).to.eventually.be.true;\n    });\n\n    it('should show the account name', function () {\n        expect(rxAccountInfo.name).to.eventually.equal('Mosso');\n    });\n\n    it('should show the account number', function () {\n        expect(rxAccountInfo.number).to.eventually.equal('12345');\n    });\n\n    describe('badges', function () {\n        var badgeNames = ['Creative Commons', 'Attribution', 'Non-Commercial', 'Public Domain'];\n\n        it('should have four badges on the first Account Info box', function () {\n            expect(rxAccountInfo.badge.count()).to.eventually.equal(4);\n        });\n\n        it('should have the correct first badge src via byIndex', function () {\n            var src = 'http://mirrors.creativecommons.org/presskit/icons/cc.large.png';\n            expect(rxAccountInfo.badge.byIndex(0).src).to.eventually.equal(src);\n        });\n\n        it('should have badge names', function () {\n            expect(rxAccountInfo.badge.names).to.eventually.eql(badgeNames);\n        });\n\n        it('should have the right name on the last badge', function () {\n            expect(rxAccountInfo.badge.byIndex(-1).name).to.eventually.equal('Public Domain');\n        });\n\n        it('should have the right description on the last badge', function () {\n            var description = 'Waives as many rights as legally possible, worldwide.';\n            expect(rxAccountInfo.badge.byIndex(-1).description).to.eventually.equal(description);\n        });\n\n        describe('searching', function () {\n\n            it('should search for just one badge by string for an exact match', function () {\n                expect(rxAccountInfo.badge.byName('Attribution').name).to.eventually.equal('Attribution');\n            });\n\n            it('should report that a badge exists', function () {\n                expect(rxAccountInfo.badge.exists('Non-Commercial')).to.eventually.be.true;\n            });\n\n            it('should report that a badge does not exist', function () {\n                expect(rxAccountInfo.badge.exists('Caveat Emptor')).to.eventually.be.false;\n            });\n\n            it('should search for many badges with a regular expression', function () {\n                rxAccountInfo.badges.matchingName(/\\w\\s\\w/).then(function (twoWordBadges) {\n                    expect(twoWordBadges[0].name).to.eventually.equal('Creative Commons');\n                    expect(twoWordBadges[1].name).to.eventually.equal('Public Domain');\n                });\n            });\n\n        });\n\n    });\n\n    var statuses = rxAccountInfoPage.statuses;\n    var statusTypes = rxAccountInfoPage.statusTypes;\n    describe('account with warning status type', function () {\n        var warningAccount;\n\n        before(function () {\n            warningAccount = rxAccountInfoPage.initialize($('.delinquent-account rx-account-info'));\n        });\n\n        it('should have a name', function () {\n            expect(warningAccount.name).to.eventually.equal('DelinquentAccount');\n        });\n\n        it('should have a deliquent status', function () {\n            expect(warningAccount.status).to.eventually.equal(statuses.delinquent);\n        });\n\n        it('should have a warning type', function () {\n            expect(warningAccount.statusType).to.eventually.equal(statusTypes.warning);\n        });\n\n    });\n\n    describe('account with info status type', function () {\n        var infoAccount;\n\n        before(function () {\n            infoAccount = rxAccountInfoPage.initialize($('.unverified-account rx-account-info'));\n        });\n\n        it('should have a name', function () {\n            expect(infoAccount.name).to.eventually.equal('UnverifiedAccount');\n        });\n\n        it('should have a deliquent status', function () {\n            expect(infoAccount.status).to.eventually.equal(statuses.unverified);\n        });\n\n        it('should have a warning type', function () {\n            expect(infoAccount.statusType).to.eventually.equal(statusTypes.info);\n        });\n\n    });\n\n    describe('error messages', function () {\n\n        it('should show an error notification when it cannot load badges', function () {\n            var errorMessage = 'Error retrieving badges for this account';\n            expect(notifications.byStack('badgeError').exists(errorMessage)).to.eventually.be.true;\n        });\n\n        it('should show an error notification when it cannot load account name', function () {\n            var errorMessage = 'Error retrieving account name';\n            expect(notifications.byStack('nameError').exists(errorMessage)).to.eventually.be.true;\n        });\n    });\n\n});\n\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    },
    {
        "name": "rxActionMenu",
        "moduleName": "'encore.ui.rxActionMenu'",
        "displayName": "Rx Action Menu",
        "srcFiles": [
            "src/rxActionMenu/rxActionMenu.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [
            "templates/rxActionMenu/templates/rxActionMenu.html"
        ],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/stable.svg\" alt=\"stable\"></a></p>\n<p>Directive to add a clickable cog which brings up a menu of configurable actions. </p>\n<p>Normally the menu is dismissable by clicking anywhere on the page, but this can be disabled by \npassing an optional <code>global-dismiss=&quot;false&quot;</code> attribute to the directive.</p>\n",
            "js": "/*jshint unused:false*/\nfunction rxActionMenuCtrl ($scope, rxNotify) {\n\n    $scope.add = function () {\n        rxNotify.add('Added!', {\n            type: 'success',\n            repeat: false,\n            timeout: 3\n        });\n    };\n\n    $scope.remove = function () {\n        rxNotify.add('Deleted!', {\n            type: 'error',\n            repeat: false,\n            timeout: 3\n        });\n    };\n\n}\n",
            "html": "<div>\n    <p>The cog in the first row is dismissable by clicking anywhere, but the second cog can only be dismissed\n    by clicking on the cog itself.\n    </p>\n\n    <h3 class=\"title\">Typical Usage</h3>\n    <table>\n        <thead>\n            <tr>\n                <th>\n                    Name\n                </th>\n                <th>\n                </th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>Globally dismissible</td>\n                <td>\n                    <rx-action-menu id=\"globalDismissal\">\n                        <ul class=\"actions-area\">\n                            <li>\n                                <rx-modal-action\n                                    template-url=\"addActionTemplate.html\"\n                                    classes=\"msg-action\">\n                                    <i class=\"fa fa-plus fa-lg\"></i> Add\n                                </rx-modal-action>\n                            </li>\n                            <li>\n                                <rx-modal-action\n                                    template-url=\"deleteActionTemplate.html\"\n                                    classes=\"msg-warn\">\n                                    <i class=\"fa fa-times fa-lg\"></i> Delete\n                                </rx-modal-action>\n                            </li>\n                        </ul>\n                    </rx-action-menu>\n                </td>\n            </tr>\n            <tr>\n                <td>Only dismissible by clicking on cog</td>\n                <td>\n                    <rx-action-menu global-dismiss=\"false\">\n                        <ul class=\"actions-area\">\n                            <li>\n                                <rx-modal-action\n                                    template-url=\"addActionTemplate.html\"\n                                    classes=\"msg-action\">\n                                    <i class=\"fa fa-plus fa-lg\"></i> Add\n                                </rx-modal-action>\n                            </li>\n                            <li>\n                                <rx-modal-action\n                                    template-url=\"deleteActionTemplate.html\"\n                                    classes=\"msg-warn\">\n                                    <i class=\"fa fa-times fa-lg\"></i> Delete\n                                </rx-modal-action>\n                            </li>\n                        </ul>\n                    </rx-action-menu>\n                </td>\n            </tr>\n                <td>Unorthodox Behaviors (no modals, hidden item)</td>\n                <td ng-controller=\"rxActionMenuCtrl\">\n                    <rx-action-menu id=\"custom\">\n                        <ul class=\"actions-area\">\n                            <li>\n                              <button class=\"btn-link trigger\" ng-click=\"add()\">\n                                  <span class=\"msg-action\"><i class=\"fa fa-plus fa-lg\"></i> Add</span>\n                              </button>\n                            </li>\n                            <li>\n                              <button class=\"btn-link trigger\" ng-click=\"remove()\">\n                                  <span class=\"msg-warn\"><i class=\"fa fa-times fa-lg\"></i> Delete</span>\n                              </button>\n                            </li>\n                            <li ng-show=\"false\">\n                              <button class=\"btn-link trigger\">\n                                  <span class=\"msg-warn\"><i class=\"fa fa-times fa-lg\"></i> Visually Hidden</span>\n                              </button>\n                            </li>\n                        </ul>\n                    </rx-action-menu>\n                </td>\n        </tbody>\n    </table>\n\n    <script type=\"text/ng-template\" id=\"deleteActionTemplate.html\">\n        <rx-modal-form title=\"Delete Action\" submit-text=\"Delete\">\n            <span>Do you want to delete something?</span>\n        </rx-modal-form>\n    </script>\n    <script type=\"text/ng-template\" id=\"addActionTemplate.html\">\n        <rx-modal-form title=\"Add Action\" submit-text=\"Add\">\n            <span>Do you want to add something?</span>\n        </rx-modal-form>\n    </script>\n</div>\n",
            "less": "@import 'vars';\n\n// containers for actionmenus that spawn modals\n.action-menu-container {\n    position: relative;\n    width: 15px;\n    & > i {\n        cursor: pointer;\n        color: @subduedText;\n        &:hover {\n            color: @subduedTextHover;\n        }\n    }\n}\n\n.actions-area {\n    font-size: 115%;\n    line-height: 2em;\n}\n\n.action-list-hideable {\n    float: left;\n    z-index: 99;\n    position: absolute;\n    top: -10px;\n    right: 15px;\n    min-width: 20em;\n    font-size: .9em;\n    border: 4px solid @white;\n    .border-radius(4px);\n    background: @white;\n    text-shadow: rgba(0, 0, 0, 0.09) 1px 1px 1px;\n    box-shadow: rgba(0, 0, 0, 0.35) 1px 1px 4px 0px;\n    padding: 6px;\n\n    &:before {\n        content:  \"\\f0da\";\n        text-shadow: rgba(0, 0, 0, 0.35) 1px 1px 1px;\n        font-family: FontAwesome;\n        text-decoration: inherit;\n        color: @white;\n        font-size: 24px;\n        display: block;\n        left: 249px;\n        position: absolute;\n        top: 0;\n        width: 0;\n        z-index: 1;\n    }\n\n    i {\n        margin-right: 5px;\n    }\n}\n\n.action-list {\n    float: right;\n}\n",
            "midway": "var Page = require('astrolabe').Page;\n\nvar actionMenu = require('../rxActionMenu.page').rxActionMenu;\nvar rxForm = require('../../rxForm/rxForm.page').rxForm;\nvar notifications = require('../../rxNotify/rxNotify.page').rxNotify;\n\ndescribe('rxActionMenu', function () {\n    var globalDismiss, localDismiss, customActions;\n    var customActionMenuItem = function (actionElement) {\n        return Page.create({\n\n            triggerNotification: {\n                value: function () {\n                    rxForm.slowClick(actionElement.$('.trigger'));\n                }\n            }\n\n        });\n    };\n\n    var clickSomewhereElse = function () {\n        $('.component-demo .title').click();\n    };\n\n    before(function () {\n        demoPage.go('#/component/rxActionMenu');\n        globalDismiss = actionMenu.initialize($('rx-action-menu#globalDismissal'));\n        localDismiss = actionMenu.initialize($('rx-action-menu[global-dismiss=\"false\"]'));\n        customActions = actionMenu.initialize($('rx-action-menu#custom'), customActionMenuItem);\n    });\n\n    it('should be collapsed by default', function () {\n        expect(globalDismiss.isExpanded()).to.eventually.be.false;\n    });\n\n    it('should expand', function () {\n        globalDismiss.expand();\n        expect(globalDismiss.isExpanded()).to.eventually.be.true;\n    });\n\n    it('should also collapse', function () {\n        globalDismiss.collapse();\n        expect(globalDismiss.isExpanded()).to.eventually.be.false;\n    });\n\n    it('should support global dismiss', function () {\n        globalDismiss.expand();\n        clickSomewhereElse();\n        expect(globalDismiss.isExpanded()).to.eventually.be.false;\n    });\n\n    it('should not globally dismiss if unsupported', function () {\n        localDismiss.expand();\n        clickSomewhereElse();\n        expect(localDismiss.isExpanded()).to.eventually.be.true;\n    });\n\n    it('should only dismiss exactly if supported', function () {\n        localDismiss.collapse();\n        expect(localDismiss.isExpanded()).to.eventually.be.false;\n    });\n\n    it('should find an action that is present and displayed', function () {\n        expect(localDismiss.hasAction('Delete')).to.eventually.be.true;\n    });\n\n    it('should not find an action that is present but not displayed', function () {\n        expect(customActions.hasAction('Visually Hidden')).to.eventually.be.false;\n    });\n\n    it('should not find an action that is neither present nor displayed', function () {\n        expect(localDismiss.hasAction('Non-Existent')).to.eventually.be.false;\n    });\n\n    describe('default action menu items', function () {\n        var actionItem;\n\n        before(function () {\n            actionItem = globalDismiss.action('Add');\n        });\n\n        it('should have two items', function () {\n            expect(globalDismiss.actionCount()).to.eventually.equal(2);\n        });\n\n        it('should have a root element', function () {\n            expect(actionItem.rootElement).to.exist;\n        });\n\n        it('should have text', function () {\n            expect(actionItem.text).to.eventually.equal('Add');\n        });\n\n        it('should include custom functionality for a modal', function () {\n            var modal = actionItem.openModal({});\n            expect(modal.title).to.eventually.equal('Add Action');\n            modal.cancel();\n        });\n\n    });\n\n    describe('custom action menu items', function () {\n        var actionItem;\n\n        before(function () {\n            actionItem = customActions.action('Delete');\n        });\n\n        it('should not have any text', function () {\n            expect(actionItem.text).to.not.exist;\n        });\n\n        it('should not have a root element', function () {\n            expect(actionItem.rootElement).to.not.exist;\n        });\n\n        it('should offer custom functionality', function () {\n            actionItem.triggerNotification();\n            expect(notifications.all.count()).to.eventually.equal(1);\n        });\n\n    });\n\n});\n\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    },
    {
        "name": "rxActiveUrl",
        "moduleName": "'encore.ui.rxActiveUrl'",
        "displayName": "Rx Active Url",
        "srcFiles": [
            "src/rxActiveUrl/rxActiveUrl.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [
            "templates/rxActiveUrl/templates/rxActiveUrl.html"
        ],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/hughsk/stability-badges\"><img src=\"http://hughsk.github.io/stability-badges/dist/deprecated.svg\" alt=\"deprecated\"></a></p>\n<p>Adds a class name of &#39;selected&#39; to an LI if the current url matches a pre-defined value</p>\n<p><strong>THIS COMPONENT IS MARKED TO BE REMOVED IN A FUTURE RELEASE.</strong></p>\n",
            "js": "",
            "html": "<ul>\n    <rx-active-url url=\"/servers\">\n        <a href=\"/servers\">Servers</a>\n    </rx-active-url>\n    <rx-active-url url=\"/cbs\">\n        <a href=\"/cbs\">Storage</a>\n        <ul>\n            <rx-active-url url=\"/cbs/volumes\">\n                <a href=\"/cbs/volumes/\">Volumes</a>\n            </rx-active-url>\n            <rx-active-url url=\"/cbs/snapshots\">\n                <a href=\"/cbs/snapshots/\">Snapshots</a>\n            </rx-active-url>\n        </ul>\n    </rx-active-url>\n</ul>",
            "less": "",
            "midway": "// Midway tests for the example/demo component page go here\n\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    },
    {
        "name": "rxAge",
        "moduleName": "'encore.ui.rxAge'",
        "displayName": "Rx Age",
        "srcFiles": [
            "src/rxAge/rxAge.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/stable.svg\" alt=\"stable\"></a></p>\n<p>Filter to parse an age based on a date in the past.</p>\n<p><strong>Note: This component requires <a href=\"http://momentjs.com/\">moment.js</a> be loaded.</strong></p>\n<p>This function has several different ways you can use it:</p>\n<ol>\n<li>You can just have it use the default abbreviated method and it truncates it\nto the two largest units.</li>\n<li>You can also pass in a second value of <code>true</code> and have it expand the units\nfrom the first letter to their full word representation.</li>\n<li>Or you can pass in a number from <code>1</code> to <code>3</code> as the second value to allow for\ndifferent amounts of units.</li>\n<li><strong>OR</strong> you can pass in a number as the second argument and <code>true</code> as the\nthird argument to combine these two effects.</li>\n</ol>\n",
            "js": "/*jshint unused:false*/\n\n// This file is used to help build the 'demo' documentation page and should be updated with example code\nfunction rxAgeCtrl ($scope) {\n    var day = 1000 * 60 * 60 * 24;\n    $scope.ageHours = new Date((Date.now() - (day / 2.3))).toString();\n    $scope.ageDays = new Date((Date.now() - (day * 1.5))).toString();\n    $scope.ageMonths = new Date((Date.now() - (day * 40.2))).toString();\n    $scope.ageYears = new Date((Date.now() - (day * 380.1))).toString();\n}\n",
            "html": "<div ng-controller=\"rxAgeCtrl\">\n    <ul>\n        <li>{{ageHours}} &rarr; {{ageHours | rxAge}}</li>\n        <li>{{ageDays}} &rarr; {{ageDays | rxAge}}</li>\n        <li>{{ageMonths}} &rarr; {{ageMonths | rxAge}}</li>\n        <li>{{ageYears}} &rarr; {{ageYears | rxAge}}</li>\n        <li>{{ageHours}} &rarr; {{ageHours | rxAge:true}}</li>\n        <li>{{ageDays}} &rarr; {{ageDays | rxAge:true}}</li>\n        <li>{{ageMonths}} &rarr; {{ageMonths | rxAge:true}}</li>\n        <li>{{ageYears}} &rarr; {{ageYears | rxAge:true}}</li>\n        <li>{{ageHours}} &rarr; {{ageHours | rxAge:1:true}}</li>\n        <li>{{ageDays}} &rarr; {{ageDays | rxAge:2:true}}</li>\n        <li>{{ageMonths}} &rarr; {{ageMonths | rxAge:3:true}}</li>\n        <li>{{ageYears}} &rarr; {{ageYears | rxAge:3}}</li>\n    </ul>\n</div>\n",
            "less": "",
            "midway": "var _ = require('lodash');\nvar moment = require('moment');\n\nvar rxAge = require('../rxAge.page').rxAge;\n\ndescribe('rxAge', function () {\n    var momentsTable, isoString;\n    var oneHour = 1000 * 60 * 60;\n    var ageStrings = [\n        '10h 26m',\n        '1d 12h',\n        '40d 4h',\n        '380d 2h',\n        '10 hours, 26 minutes',\n        '1 day, 12 hours',\n        '40 days, 4 hours',\n        '380 days, 2 hours',\n        '10 hours',\n        '1 day, 12 hours',\n        '40 days, 4 hours, 48 minutes',\n        '380d 2h 24m'\n    ];\n\n    before(function () {\n        demoPage.go('#/component/rxAge');\n        momentsTable = $$('.component-demo ul li');\n    });\n\n    _.forEach(ageStrings, function (testData, index) {\n        it('should still have ' + testData + ' as test data on the page', function () {\n            momentsTable.get(index).getText().then(function (text) {\n                var onPage = text.split('→')[1].trim();\n                expect(onPage).to.equal(testData);\n            });\n        });\n\n        it('should convert ' + testData + ' accurate within the hour', function () {\n            momentsTable.get(index).getText().then(function (text) {\n                isoString = new Date(text.split('→')[0].trim());\n                expect(rxAge.toMoment(testData).valueOf()).to.be.closeTo(moment(isoString).valueOf(), oneHour);\n            });\n        });\n    });\n});\n\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    },
    {
        "name": "rxApp",
        "moduleName": "'encore.ui.rxApp'",
        "displayName": "Rx App",
        "srcFiles": [
            "src/rxApp/rxApp.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [
            "templates/rxApp/templates/rxAccountSearch.html",
            "templates/rxApp/templates/rxAccountUsers.html",
            "templates/rxApp/templates/rxApp.html",
            "templates/rxApp/templates/rxAppNav.html",
            "templates/rxApp/templates/rxAppNavItem.html",
            "templates/rxApp/templates/rxAppSearch.html",
            "templates/rxApp/templates/rxBillingSearch.html",
            "templates/rxApp/templates/rxPage.html"
        ],
        "dependencies": [
            "rxAppRoutes",
            "rxEnvironment",
            "rxSession",
            "rxLocalStorage"
        ],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\"></a></p>\n<h1>Description</h1>\n<p>This component is responsible for creating the HTML necessary for a common Encore layout. It builds out the main navigation, plus breadcrumbs and page titles.</p>\n<h1>Usage</h1>\n<p>For apps that want to use the default Encore navigation, usage is pretty simple. In your index.html file, add the <code>rx-app</code> directive inside your app:</p>\n<pre><code>&lt;body ng-app=&quot;myApp&quot;&gt;\n    &lt;rx-app&gt;\n        &lt;ng-view&gt;&lt;/ng-view&gt;\n    &lt;/rx-app&gt;\n&lt;/body&gt;\n</code></pre><p>By including <code>ng-view</code>, your view content will be added inside the directive. This makes setting up views for each page much simpler, since you don&#39;t have to include <code>rx-app</code> in each view.</p>\n<p>Inside your view, you&#39;ll likely want to use <code>rx-page</code> to wrap your content. See the <code>rx-page</code> docs for more information on this.</p>\n<h1>rxApp Navigation</h1>\n<p>Left-hand navigation is included as part of the app template. There are many options to control the navigation from an app level, as outlined with the following.</p>\n<p>Note: With the current set up, some app-specific menu items are defined in EncoreUI. While it&#39;s preferred to keep app-specific details outside of EncoreUI, because some top-level navigation is accessible from any app, it&#39;s important to store that information in a common location inside EncoreUI.</p>\n<h2>Accessing route information</h2>\n<p>Sometimes it&#39;s helpful to have the current route information available for menu items. For example, re-using the current params for path building.</p>\n<p>To help with this, $route is exposed on the scope of all menu items. <a href=\"http://devdocs.io/angular/ngroute.$route\"><code>$route</code> provides many details on the current view</a>, including the ability to access the current controller and scope for the view.</p>\n<p>To see this in action, check out the &#39;childVisibility&#39; property for Account-level Tool in <code>encoreNav</code>.</p>\n<h2>Accessing properties on $rootScope</h2>\n<p>If you have a property available on the <code>$rootScope</code> of your app that the menu data needs to access, <a href=\"http://stackoverflow.com/questions/22216441/what-is-the-difference-between-scope-root-and-rootscope-angular-js\">you can reference <code>$rootScope</code> via <code>$root</code></a>. See the demo for an example of this.</p>\n<h2>Dynamically updating the menu</h2>\n<p>By default, rxApp will create the navigation menu based on the routes defined in the &#39;encoreNav&#39; value. This menu is built using the rxAppRoutes service.</p>\n<p>To update a route, use the <code>setRouteByKey</code> function on the rxAppRoutes service:</p>\n<pre><code>rxAppRoutes.setRouteByKey(&#39;myKey&#39;, {\n    linkText: &#39;myUpdatedRoute&#39;\n})\n</code></pre><p>You would normally either set this in your app&#39;s <code>.run</code> function, or in a specific controller.</p>\n<h2>Custom Menus</h2>\n<p>If you&#39;d like to create an entirely custom menu, you can pass that data in to the <code>rx-app</code> directive via the <code>menu</code> attribute. View the demo for an example of this.</p>\n<h1>Sub-directives</h1>\n<h2>rx-page</h2>\n<p>You&#39;ll likely want to use <code>rx-page</code> inside your template view. For example, inside a &#39;myView.html&#39; file:</p>\n<pre><code>&lt;rx-page title=&quot;&#39;Example Page&#39;&quot;&gt;\n    Here is my content\n&lt;/rx-page&gt;\n</code></pre><p><code>rx-page</code> is used to create a common wrapper for specific page views. It automatically adds the breadcrumbs and page title/subtitle (if specified), along with the correct styling.</p>\n<p>Both the <code>title</code> and <code>subtitle</code> attributes accept an Angular expression, which can be a string (shown in the previous example) or a scope property. This string/property can accept other expressions, enabling you to build custom titles. The demo has an example of this usage.</p>\n<p>If you wish to use arbitrary HTML in your title, you can use the <code>unsafe-html-title</code> attribute instead of <code>title</code>. This is considered &quot;unsafe&quot; because it is\ncapable of executing arbitrary Javascript, so you must ensure that you trust the source of the title. The &quot;Customized Page Title&quot; in the demo shows the use of HTML tags.</p>\n<p>In either case (<code>title</code> or <code>unsafe-html-title</code>), the document title (i.e. visible in the browser tab) will be set to your chosen title. If you use <code>unsafe-html-title</code>, all HTML tags will be stripped before setting the document title.</p>\n<h3>Account Info below Breadcrumbs</h3>\n<p><code>rxPage</code> integrates the <a href=\"#/component/rxAccountInfo\">rxAccountInfo</a> component, to draw the Account Info box directly underneath the <code>rxBreadcrumbs</code>. This is opt-in. By default, it will not appear. To enable it, pass the <code>account-number=&quot;...&quot;</code> attribute to <code>&lt;rx-page&gt;</code> in your template, i.e</p>\n<pre><code>&lt;rx-page account-number=&quot;{{ accountNumber }}&quot;&gt;\n</code></pre><p>As noted on the <a href=\"#/component/rxAccountInfo\">rxAccountInfo</a> demo page, this directive requires that <code>SupportAccount</code>, <code>Encore</code> and <code>Teams</code> services are available to the Angular Dependency Injection system. These are <em>not</em> provided by EncoreUI, but are available in an internal Rackspace repository.</p>\n<h3>Status tags</h3>\n<p>A final attribute that <code>rx-page</code> accepts is <code>status</code>. This takes a string, and has the effect of drawing a status &quot;tag&quot; beside the page title. The &quot;Customized rxApp&quot; demo shows the use of this with the <code>&quot;alpha&quot;</code> tag.</p>\n<p>The framework currently provides <code>&quot;alpha&quot;</code> and <code>&quot;beta&quot;</code> tags, but any product can specify their own custom tags using the <code>rxStatusTagsProvider</code>. It currently\nhas one method, <code>addStatus</code>, which takes an unique <code>key</code> for the new tag, the <code>class</code> it should use in the HTML, and the <code>text</code> that will be drawn. All custom\ntags are drawn inside of a <code>&lt;span&gt;</code>, essentially as:</p>\n<pre><code>&lt;span class=&quot;status-tag {{ class }}&quot;&gt;{{ text }}&lt;/span&gt;\n</code></pre><p>To use this, do the following in your application&#39;s <code>.config()</code> method:</p>\n<pre><code>rxStatusTagsProvider.addStatus({ key: &#39;gamma&#39;, class: &#39;alpha-status&#39;, text: &#39;Hello World!&#39; });\n</code></pre><p>This will create a new status tag called <code>&quot;gamma&quot;</code>, which you can pass to <code>rx-page</code> as:</p>\n<pre><code>&lt;rx-page title=&quot;&#39;Some Title&#39;&quot; status=&quot;gamma&quot;&gt;\n</code></pre><p>And the title will appear with a <code>Hello World!</code> tag beside it, styled the same way as our <code>&quot;alpha&quot;</code> status tag is styled. You can also define your own CSS style in your application and use those instead, passing it as the <code>class</code> value to <code>addStatus()</code>.</p>\n<p>All the tags are accessible inside of <a href=\"./#/component/rxBreadcrumbs\">rxBreadcrumbs</a> as well. Any breadcrumb that was created with <code>useStatusTag: true</code> will automatically receive the same status tag as you passed to <code>&lt;rx-page&gt;</code>.</p>\n<h3>.page-actions</h3>\n<p>A <code>page-actions</code> class is provided by rx-app to easily add custom page actions to the top right of a page. For example:</p>\n<pre><code>&lt;rx-page title=&quot;&#39;Servers Overview&#39;&quot;&gt;\n    &lt;div class=&quot;page-actions&quot;&gt;\n        &lt;a href=&quot;/create&quot; class=&quot;link-action msg-action&quot;&gt;Create New Server&lt;/a&gt;\n    &lt;/div&gt;\n    &lt;img src=&quot;http://cdn.memegenerator.net/instances/500x/48669250.jpg&quot; alt=&quot;Look at all these servers there are so many&quot;\n&lt;/rx-page&gt;\n</code></pre><h2>rx-app-nav and rx-app-nav-item</h2>\n<p>These two directives are responsible for creating the menu in the left sidebar. They&#39;re not intended for use outside of the rx-app template code.</p>\n<h1>Common Styling</h1>\n<p>The rxApp common.less file defines many base CSS rules and classes for app use. Included in this is <a href=\"http://necolas.github.io/normalize.css/\">normalize.css</a>. This helps create a consistent starting point for styles across all browsers.</p>\n<h2>Fonts</h2>\n<p>The EncoreUI default font is Roboto. This is used for all text on the page and is loaded via Google Fonts. Be sure your app includes the following line:</p>\n<pre><code>&lt;link href=&quot;https://fonts.googleapis.com/css?family=Roboto:400,100,100italic,300,300italic,400italic,700,700italic&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;\n</code></pre>",
            "js": "/*jshint unused:false*/\nfunction rxAppCtrl ($scope, $location, $rootScope, $window, encoreRoutes, rxVisibility) {\n    $scope.subtitle = 'With a subtitle';\n\n    $scope.changeSubtitle = function () {\n        $scope.subtitle = 'With a new subtitle at ' + Date.now();\n    };\n\n    rxVisibility.addMethod(\n        'isUserDefined',\n        function (scope, locals) {\n            return !_.isEmpty($rootScope.user);\n        }\n    );\n\n    $scope.changeRoutes = function () {\n        var newRoute = {\n            linkText: 'Updated Route',\n            childVisibility: 'true',\n            children: [\n                {\n                    linkText: 'New child route'\n                }\n            ]\n        };\n\n        encoreRoutes.setRouteByKey('accountLvlTools', newRoute);\n    };\n\n    // Fake navigation\n    var customApp = document.getElementById('custom-rxApp');\n    customApp.addEventListener('click', function (ev) {\n        var target = ev.target;\n\n        if (target.className.indexOf('item-link') > -1) {\n            // prevent the default jump to top\n            ev.preventDefault();\n\n            var href = target.getAttribute('href');\n\n            // update angular location (if href has a value)\n            if (!_.isEmpty(href)) {\n                // we need to prevent the window from scrolling (the demo does this)\n                // so we get the current scrollTop position\n                // and set it after the demo page has run '$routeChangeSuccess'\n                var currentScollTop = document.body.scrollTop;\n\n                $location.hash(href);\n\n                $rootScope.$apply();\n\n                $window.scrollTo(0, currentScollTop);\n            }\n        }\n    });\n\n    var searchDirective = 'rx-app-search placeholder=\"Enter User\" model=\"$root.user\" pattern=\"/^([0-9a-zA-Z._ -]{2,})$/\"';\n\n    $scope.customMenu = [{\n        title: 'Example Menu',\n        children: [\n            {\n                href: 'Lvl1-1',\n                linkText: '1st Order Item'\n            },\n            {\n                linkText: '1st Order Item (w/o href) w/ Children',\n                childVisibility: [ 'isUserDefined' ],\n                childHeader: '<strong class=\"current-search\">Current User:</strong>' +\n                             '<span class=\"current-result\">{{$root.user}}</span>',\n                directive: searchDirective,\n                children: [\n                    {\n                        href: 'Lvl1-2-Lvl2-1',\n                        linkText: '2nd Order Item w/ Children',\n                        children: [{\n                            href: 'Lvl1-2-Lvl2-1-Lvl3-1',\n                            linkText: '3rd Order Item'\n                        }]\n                    },\n                    {\n                        href: 'Lvl1-2-Lvl2-2',\n                        linkText: '2nd Order Item w/ Children',\n                        children: [\n                            {\n                                href: 'Lvl1-2-Lvl2-2-Lvl3-1',\n                                linkText: '3rd Order Item'\n                            },\n                            {\n                                href: 'Lvl1-2-Lvl2-2-Lvl3-2',\n                                linkText: '3rd Order Item'\n                            },\n                            {\n                                href: 'Lvl1-2-Lvl2-2-Lvl3-3',\n                                linkText: '3rd Order Item'\n                            },\n                            {\n                                href: 'Lvl1-2-Lvl2-2-Lvl3-4',\n                                linkText: '3rd Order Item'\n                            }\n                        ]\n                    },\n                    {\n                        href: 'Lvl1-2-Lvl2-3',\n                        linkText: '2nd Order Item'\n                    }\n                ]\n            },\n            {\n                href: 'Lvl1-3',\n                linkText: '1st Order Item w/ Children',\n                children: [\n                    {\n                        href: 'Lvl1-3-Lvl2-1',\n                        linkText: '2nd Order Item'\n                    }\n                ]\n            }\n        ]\n    }];\n}\n",
            "html": "<div ng-controller=\"rxAppCtrl\">\n    <h1 class=\"title\">Standard rxApp</h1>\n    <rx-app id=\"standard-rxApp\">\n        <rx-page title=\"'Standard Page Title'\">\n            <p class=\"clear\">This is my page content</p>\n            <button ng-click=\"changeRoutes()\" class=\"button\">Change Routes</button>\n        </rx-page>\n    </rx-app>\n\n    <h1 class=\"title\">Customized rxApp (collapsible)</h1>\n    <rx-app collapsible-nav=\"true\" site-title=\"My App\" id=\"custom-rxApp\" menu=\"customMenu\" new-instance=\"true\" hide-feedback=\"true\">\n    <rx-page unsafe-html-title=\"'Customized Page <a href=&quot;http://rackspace.com&quot;>Title</a>'\" subtitle=\"subtitle\" status=\"alpha\"\n        account-number=\"12345\">\n            <p class=\"clear\">Click a link in the menu to see the active state change</p>\n            <p>Click the toggle to hide the menu</p>\n            <button ng-click=\"changeSubtitle()\" class=\"changeSubtitle button\">Change Subtitle</button>\n        </rx-page>\n    </rx-app>\n</div>\n\n<!--\nYou'll likely want to implement your HTML in your index.html file as:\n<div ng-app=\"sampleApp\">\n    <rx-app ng-view></rx-app>\n</div>\n\nAnd the template for each view/page will be something like:\n<rx-page title=\"'Example Page'\">\n    Example content\n</rx-page>\n-->\n",
            "less": "@import (less) 'demo/bower_components/font-awesome/less/font-awesome.less';\n@fa-font-path: 'font';\n@import 'vars';\n@import (inline) 'normalize.css';\n\n// Resets for HTML elements\nhtml, body {\n    height: 100%;\n    font-size: @appFontSize;\n    color: @appTextColor;\n    font-family: @appFont;\n}\n\n// Set default font\nbutton, input, select,\n.pure-g [class *= \"pure-u\"],\n.pure-g-r [class *= \"pure-u\"] {\n    font-family: @appFont;\n}\n\n// Remove default margin/padding/etc\nheader, nav,\nol, ul, li,\nh1, h2, h3, h4, h5, h6,\nfieldset {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    font: inherit;\n    font-size: 100%;\n    vertical-align: baseline;\n}\n\n// No list styles for lists\nol, ul, li {\n    list-style: none;\n}\n\n// We want a little bit more line-spacing in paragraphs\np {\n    line-height: @appLineHeight;\n}\n\n// Link Styles\na {\n    text-decoration: none;\n    color: @linkColor;\n}\na:hover,\na:focus {\n    text-decoration: underline;\n    color: @linkColorHover;\n}\n\n// Table Styles\ntable {\n    clear: both;\n    width: 100%;\n    padding: 0;\n    margin: 0;\n    border-collapse: collapse;\n    td,\n    th {\n        border: 1px solid @tableBorder;\n        padding: @tableCellPadding;\n        color: @tableCellText;\n    }\n    thead th {\n        text-align: left;\n        background: @tableHeaderBg;\n        color: @tableHeaderText;\n        border: 1px solid @tableHeaderBorder;\n        &.actions {\n          width: 15px;\n        }\n    }\n    tr {\n        background: @tableBg;\n    }\n    &.table-striped {\n        tr:nth-child(even), tbody:nth-child(odd) > tr {\n            background: @tableBgAlt;\n        }\n    }\n    td.double-chevron-cell {\n        width: 10px;\n        padding: 0px 10px;\n        .double-chevron {\n            cursor: pointer;\n            &::after {\n                display: inline-block;\n                color: @subduedText;\n                font-size: 20px;\n                .chevron-mixin;\n            }\n        }\n    }\n    td.expanded {\n        background-color: @subtableBorder;\n        border-bottom-color: @subtableBorder;\n        .double-chevron::after {\n            color: @white;\n            .chevron-mixin(-1);\n        }\n    }\n}\n\n.expanded-container {\n    padding: 0 3px 3px 3px;\n    background-color: @subtableBorder;\n    & > * {\n        margin-left: 2%;\n        width: 98%;\n    }\n    table.subtable {\n        table-layout: fixed;\n\n        th:first-child {\n            border-left-width: 0;\n        }\n\n        th:last-child {\n            border-right-width: 0;\n        }\n\n        th {\n            border-color: darken(@subtableBorder, 15%);\n            background-color: @subtableBorder;\n            border-top: 0;\n            border-bottom: 0;\n        }\n    }\n    .expanded-content {\n        background-color: @white;\n        margin-top: 3px;\n    }\n}\n\n// Heading/Title Styles\n.title {\n    font-size: 18px;\n    margin: 1em 0;\n\n    & + & {\n        // remove the top margin if two titles are placed right next to each other\n        margin-top: 0;\n    }\n\n    // Sizing\n    &.xl {\n        font-size: 28px;\n    }\n\n    &.lg {\n        font-size: 22px;\n    }\n\n    &.sm {\n        font-size: 16px;\n    }\n\n    &.xs {\n        font-size: 13px;\n    }\n\n    // Colors\n    &.subdued {\n        color: @subduedTitle;\n    }\n}\n\n// Statuses\n.link-action,\n.link-action a,\n.link-warn,\n.link-warn a {\n    font-size: 1.2em;\n    cursor: pointer;\n}\n\n.link-action:before,\n.link-action a:before {\n    content: '+ ';\n}\n\n.link-warn:before,\n.link-warn a:before {\n    content: '- ';\n}\n\n.action-separator {\n    font-size: 1.1em;\n    color: @subduedText;\n}\n\n.msg-action,\n.msg-action a {\n    color: @actionGreen;\n    &:hover,\n    &:focus {\n        color: @actionGreen;\n    }\n}\n\n.msg-warn,\n.msg-warn a {\n    color: @warnRed;\n    &:hover,\n    &:focus {\n        color: @warnRedHover;\n    }\n}\n\n.msg-info,\n.msg-info a {\n    color: @infoOrange;\n    &:hover,\n    &:focus {\n        color: @infoOrangeHover;\n    }\n}\n\n.msg-info-blue,\n.msg-info-blue a {\n    color: @infoBlue;\n    &:hover,\n    &:focus {\n        color: @infoBlueHover;\n    }\n}\n\n// Lists\n.list {\n    li,\n    .item {\n        display: list-item;\n        margin: 5px 0 0 30px;\n    }\n\n    ul&,\n    &.bulleted {\n        li,\n        .item {\n            list-style: disc;\n        }\n    }\n\n    ol&,\n    &.decimal {\n        li,\n        .item {\n            list-style: decimal;\n        }\n    }\n}\n\n// Wells\n.well {\n    background: #eee;\n    padding: 40px 50px;\n    box-shadow: 0 0 0 10px white inset;\n\n    p {\n        line-height: 1.5em;\n        color: @wellText;\n    }\n\n    ul {\n        display: inline-block;\n        text-align: left;\n    }\n}\n\n.modal-well {\n    background-color: #eee;\n    padding: 20px 30px;\n\n    h2 {\n        font-size: 14px;\n    }\n}\n\n// Other Stuff\n.subdued {\n    color: @subduedText;\n}\n\n// Add hover style if a link or inside a link\na.subdued:hover,\na.subdued:focus,\na:hover .subdued,\na:focus .subdued {\n    color: @subduedTextHover;\n}\n\n// Hidden content\n.hidden {\n    visibility: hidden;\n}\n\n// Used to hide content visually but let them still be read\n// by screen readers (removed from the page spacing)\n.visually-hidden {\n    position: absolute !important;\n    clip: rect(1px, 1px, 1px, 1px);\n    padding: 0 !important;\n    border: 0 !important;\n    height: 1px !important;\n    width: 1px !important;\n    overflow: hidden;\n}\nbody:hover .visually-hidden a,\nbody:hover .visually-hidden input,\nbody:hover .visually-hidden button {\n    display: none;\n}\n\n// Clearing Floats\n.clearfix:before,\n.clearfix:after {\n    content: \" \"; /* 1 */\n    display: table; /* 2 */\n}\n\n.clearfix:after {\n    clear: both;\n}\n\n// Clearing siblings\n.clear {\n    clear: both;\n}\n.clear-left {\n    clear: left;\n}\n.clear-right {\n    clear: right;\n}\n\n// Marks content as full width (e.g. to give a button full width).\n// Requires 'display' to be defined as `inline-block` or `block`\n.full-width {\n    width: 100%;\n}\n\n// Center content\n// Requires 'display' to be defined as `inline-block` or `block`\n.centered {\n    text-align: center;\n}\n\n\n/* PLACEHOLDER TEXT STYLING\n  https://css-tricks.com/snippets/css/style-placeholder-text/\n*/\n::-webkit-input-placeholder { // Chrome\n  color: @inputPlaceholderColor;\n  font-weight: 300;\n}\n::-moz-placeholder { // Firefox 19+\n  color: @inputPlaceholderColor;\n  font-weight: 400;\n}\n\n// A \"filter\" style rxSearchBox\n.filter-box {\n  font-style: italic;\n}\n\n@import 'vars';\n@import 'flexbox';\n@import 'mixins';\n\n.rx-app {\n    @navTransitionDuration: .2s;\n    @appMenuWidth: 300px;\n\n    min-height: 100%;\n    .flexbox();\n    .flex-direction(row);\n    background: @appBg;\n\n    .rx-app-content {\n        .flex(1 1 0);\n    }\n\n    .rx-app-menu {\n        .flex(0 0 @appMenuWidth);\n        color: #fff;\n        font-size: 15px;\n        font-weight: 300;\n        background: @appMenuBg;\n        line-height: @appLineHeight;\n        padding-bottom: 10em;\n        position: relative;\n    }\n\n    .site-branding {\n        border-top: 1px solid #074285;\n        border-bottom: 1px solid #052953;\n        padding: 5px 20px;\n        overflow: hidden;\n        background: @siteBrandingBg;\n        position: relative;\n\n        .site-title {\n            float: left;\n        }\n        .site-options {\n            float: right;\n            font-size: .8em;\n            margin-top: 1px;\n\n            .site-option {\n                color: @menuLinkLightBlue;\n                display: inline-block;\n                margin-left: 1em;\n                &:hover,\n                &:focus {\n                    color: @white;\n                }\n            }\n        }\n\n        .collapsible-toggle {\n            position: absolute;\n            text-align: center;\n            top: 0;\n            bottom: 0;\n            right: 0;\n            width: 2em;\n            border-left: 1px solid #052953;\n            &:hover {\n                background: lighten(@siteBrandingBg, 10%);\n            }\n        }\n\n        .double-chevron {\n            font-size: 20px;\n            position: absolute;\n            top: 0;\n            bottom: 0;\n            right: 0;\n            left: 0;\n\n            &::before {\n                color: @menuLinkLightBlue;\n                content: \"\\00bb\";\n            }\n\n            &.double-chevron-left::before {\n                content: \"\\00ab\";\n            }\n\n            &:hover &::before {\n                color: @white;\n            }\n        }\n    }\n\n    &.collapsible {\n        .site-branding {\n            padding-right: calc(~\"2em + 20px\");\n        }\n    }\n\n    &.collapsed {\n        .rx-app-menu {\n            .flex(0 0 25px);\n            padding-bottom: 0;\n            position: relative;\n        }\n\n        .site-branding,\n        .collapsible-toggle {\n            position: absolute;\n            top: 0;\n            bottom: 0;\n            left: 0;\n            padding: 0;\n            width: 100%;\n        }\n\n        .site-title,\n        .site-options,\n        .rx-app-nav,\n        .rx-app-help {\n            display: none;\n        }\n    }\n\n    &.warning-bar {\n        position: absolute;\n        margin-top: 3em;\n        width: 100%;\n    }\n\n    &.warning-bar.preprod {\n        .rx-app-menu {\n            background: @preprodBackground;\n        }\n        .rx-app-nav-item {\n            &.active:not(.has-children) > .item-link {\n                border-top-color: @preprodBorderTop;\n            }\n            .item-link {\n                background: @preprodBackground;\n                border-top: 1px solid @preprodBorderTop;\n                border-bottom: 1px solid @preprodBorderBottom;\n                &:hover,\n                &:focus {\n                    background: @preprodBackgroundFocus;\n                    border-top: 1px solid @preprodBorderBottom;\n                    border-bottom: 1px solid @preprodBorderBottom;\n                }\n            }\n\n            // active nav, w/children (double arrow up, gray bg)\n            &.active.has-children > .item-link {\n                border-top-color: @preprodBorderTop;\n                // used to show BG of arrow (because :after is rotated)\n                &:before {\n                    background: @preprodActiveBackground;\n                }\n                .item-content {\n                    border-bottom: 1px solid #000000;\n                }\n            }\n\n            .item-content {\n                background: @preprodActiveBackground;\n            }\n        }\n    }\n\n    .rx-app-nav {\n        clear: both;\n\n        .nav-section {\n            padding-left: 5px;\n        }\n\n        .nav-section-title {\n            padding: 5px 15px;\n            font-size: 13px;\n        }\n\n        .nav-section-all {\n            background: #407610;\n            border-top: 1px solid #568c26;\n        }\n\n        .nav-section-highlight {\n            background: #0951a3;\n            border-top: 1px solid #00408f;\n        }\n    }\n\n    .rx-app-nav-item {\n        clear: both;\n\n        // common nav styles (inactive nav, no children)\n        .item-link {\n            background: #1a1a1a;\n            border-top: 1px solid #333333;\n            border-bottom: 1px solid #000000;\n            padding: 10px 4em 10px 15px;\n            display: block;\n            color: #fff;\n            text-decoration: none;\n            -webkit-transition: background @navTransitionDuration;\n            transition: background @navTransitionDuration;\n            position: relative;\n            &:hover,\n            &:focus {\n                background: #262626;\n                border-top: 1px solid #404040;\n                border-bottom: 1px solid #0d0d0d;\n            }\n            &:before,\n            &:after {\n                content: '';\n                position: absolute;\n            }\n            &:after {\n                -webkit-transition: all @navTransitionDuration;\n                transition: all @navTransitionDuration;\n            }\n        }\n\n        &:not(.has-children) > .item-link:after {\n            right: 0;\n            top: 0;\n            border: transparent solid;\n            border-width: calc(~\"5px + 1em\") 6px;\n            border-right: 0;\n        }\n\n        // active nav, no children (blue bg, arrow right)\n        &.active:not(.has-children) > .item-link {\n            border-color: transparent;\n            background: #0E7FFF;\n            &:after {\n                right: -6px;\n                border-left-color: #0E7FFF;\n            }\n        }\n\n        // inactive nav, w/children (double arrow down)\n        &.has-children > .item-link:after {\n            font-size: 2em;\n            content: \"\\00bb\"; // angle quotation mark, right (&raquo;)\n            -webkit-transform: rotate(90deg) scaleX(1);\n            transform: rotate(90deg) scaleX(1);\n            top: 50%;\n            line-height: 0;\n            right: .45em;\n        }\n\n        // active nav, w/children (double arrow up, gray bg)\n        &.active.has-children > .item-link {\n            border-top-color: #404040;\n            border-bottom-width: 0;\n            // used to show BG of arrow (because :after is rotated)\n            &:before {\n                width: 3em;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background: #333;\n            }\n            &:after {\n                // flip arrow around\n                -webkit-transform: rotate(90deg) scaleX(-1);\n                transform: rotate(90deg) scaleX(-1);\n            }\n            .item-content {\n                border-bottom: 1px solid #000000;\n            }\n        }\n\n        .item-content {\n            background: #333;\n            padding: 10px;\n        }\n\n        .item-directive:not(.ng-hide) + .item-children {\n            margin-top: 10px;\n        }\n\n        .item-children {\n            padding: 10px;\n            background: #4d4d4c;\n        }\n\n        .child-header {\n            margin-bottom: 1em;\n        }\n\n        .current-search {\n            text-transform: uppercase;\n            font-weight: bold;\n            color: #9c9c9c;\n            font-size: 10px;\n            display: block;\n        }\n        .current-result {\n            color: #d5d5d3;\n            font-size: 18px;\n        }\n\n    }\n\n    .rx-app-nav-level-2 {\n        .item-link {\n            background: #666766;\n            border-top-color: #787878;\n            border-bottom-color: #595959;\n            font-size: 13px;\n\n            &:hover,\n            &:focus {\n                background: #595959;\n                border-top: 1px solid #737373;\n                border-bottom: 1px solid #404040;\n            }\n        }\n        .active:not(.has-children) > .item-link {\n            margin-right: -10px;\n        }\n        .active.has-children > .item-link {\n            background: #1a1a1a;\n            border-color: transparent;\n        }\n\n        .item-content {\n            background: #1a1a1a;\n            padding: 0 0 4px 4px;\n        }\n\n        .item-children {\n            padding: 0;\n        }\n    }\n\n    .rx-app-nav-level-3 .item-link {\n        background: #333333;\n        border-color: transparent;\n        padding: 5px 15px;\n\n        &:hover,\n        &:focus {\n            background: #404040;\n            border-color: transparent;\n        }\n    }\n    .rx-app-nav-level-3 .rx-app-nav-item {\n        &:first-child {\n            border-top: 3px solid #333;\n        }\n        .item-link:after {\n            border-top-width: 1em;\n            border-bottom-width: 1em;\n        }\n    }\n\n    .rx-app-search {\n        position: relative;\n        font-size: 14px;\n        color: #babab9;\n\n        fieldset {\n          position: relative;\n        }\n\n        // NOTE: We have to have this duplication because CSS doesn't like combining the placholder selectors\n        .placeholder() {\n           font-style: italic;\n           text-overflow: ellipsis;\n        }\n\n        ::-webkit-input-placeholder {\n            .placeholder();\n        }\n        ::-moz-placeholder {\n           .placeholder();\n        }\n        :-ms-input-placeholder {\n           .placeholder();\n        }\n\n        .search-input {\n            .box-sizing(border-box);\n            background: #4d4d4c;\n            border: 0;\n            width: 100%;\n            padding: 9px;\n            padding-right: 30px;\n            margin: 0;\n        }\n\n        .search-input.ng-invalid:focus {\n            outline-color: @menuRed;\n        }\n\n        .search-action {\n            position: absolute;\n            top: 0;\n            right: 0;\n            width: 30px;\n            height: 100%;\n            background: url(images/magnifying-glass.png) no-repeat 50% 50%;\n            border: 0;\n            opacity: 0.2;\n        }\n\n        .search-option {\n            margin-top: 10px;\n        }\n    }\n\n    .rx-app-help {\n        position: fixed;\n        bottom: 0;\n        left: 0;\n        width: @appMenuWidth;\n        background: @appHelpBg;\n        border-top: 1px solid @appHelpBorder;\n        line-height: 3em;\n        padding-bottom: 1px;\n        font-size: .8em;\n        text-shadow: 1px 1px 0px rgba(26, 26, 26, 0.2);\n\n        .rx-feedback .modal-link {\n            background: url(images/icon-feedback.png) no-repeat 20px calc(~\"50% + 1px\");\n            vertical-align: middle;\n            color: @menuLinkOrange;\n            padding: 0 21px 0 41px;\n            float: right;\n        }\n    }\n\n\n    // Page Styles\n\n    .page-header {\n        background: linear-gradient(to bottom, #e7e7e7 0%, #d6d6d6 100%);\n        border-bottom: 1px solid #bbb;\n    }\n\n    .page-body {\n        padding: 20px 30px 50px;\n        clear: both;\n\n        .page-titles {\n            float: left;\n\n            .page-title {\n                margin: 0;\n                position: relative;\n            }\n\n            .page-subtitle {\n                margin-top: 0;\n            }\n        }\n\n        & > .rx-notifications {\n            position:fixed;\n            z-index: 5;\n            top: 0px;\n            left: 300px;\n            right: 100px;\n            opacity: 0.95;\n            .rx-notification {\n                width: 100%;\n            }\n        }\n\n        .page-actions {\n            float: right;\n            margin: 0 0 2em 2em;\n        }\n    }\n}\n\n.warning-bar.rx-notifications {\n    position: fixed;\n    z-index: 3;\n    width: 100%;\n    margin-bottom: 0;\n}\n\n.status-tag {\n    &.alpha-status, &.beta-status {\n        margin-left: 10px;\n        text-transform: uppercase;\n        font-size: 9px;\n        border: 1px solid;\n        padding: 1px 2px;\n        .border-radius(2px);\n        top: 9px;\n        position: absolute;\n        color: #427fc4;\n    }\n}\n\n/* Disabled link styles */\n.link-disabled {\n    pointer-events: none;\n    a {\n        color: #d5d3d3;\n    }\n    .rx-spinner {\n        margin-left: 10px;\n        border-bottom-color: #d5d3d3;\n        border-right-color: #d5d3d3;\n    }\n}\n\na.disabled {\n    color: #d5d3d3;\n    cursor: default;\n    pointer-events: none;\n    text-decoration: none;\n}\n",
            "midway": "var rxAppPage = require('../rxApp.page').rxApp;\nvar rxPage = require('../rxApp.page').rxPage;\n\ndescribe('rxApp', function () {\n    var rxAppCustom, rxAppStandard;\n\n    before(function () {\n        demoPage.go('#/component/rxApp');\n        rxAppCustom = rxAppPage.initialize($('#custom-rxApp'));\n        rxAppStandard = rxAppPage.initialize($('#standard-rxApp'));\n    });\n\n    it('should show element', function () {\n        expect(rxAppCustom.rootElement.isDisplayed()).to.eventually.be.true;\n    });\n\n    it('should have a title', function () {\n        expect(rxAppCustom.title).to.eventually.equal('My App');\n    });\n\n    it('should have a section title', function () {\n        expect(rxAppCustom.sectionTitle).to.eventually.equal('Example Menu');\n    });\n\n    it('should have the user id in the logout link', function () {\n        browser.addMockModule('encore.ui.rxSession', function () {\n            angular.module('encore.ui.rxSession', []).value('Session', {\n                getUserId: function () { return 'rack0000'; }\n            });\n        });\n        browser.refresh()\n\n        rxAppStandard.userId.then(function (userId) {\n            expect(userId).to.equal('(rack0000)');\n\n            browser.removeMockModule('encore.ui.rxSession');\n            browser.refresh()\n        });\n    });\n\n    it('should logout', function () {\n        rxAppCustom.logout();\n        expect(demoPage.currentUrl).to.eventually.contain('login');\n        demoPage.go('#/component/rxApp');\n    });\n\n    describe('with collapsible navigation', function () {\n        it('should have a collapsible navigation menu', function () {\n            expect(rxAppCustom.isCollapsible()).to.eventually.be.true;\n        });\n\n        it('should be expanded by default', function () {\n            expect(rxAppCustom.isExpanded()).to.eventually.be.true;\n        });\n\n        it('should collapse the navigation', function () {\n            rxAppCustom.collapse();\n            expect(rxAppCustom.isCollapsed()).to.eventually.be.true;\n        });\n\n        it.skip('should expand the navigation', function () {\n            rxAppCustom.expand();\n            expect(rxAppCustom.isExpanded()).to.eventually.be.true;\n        });\n    });\n\n    describe('without collapsible navigation', function () {\n        it('should not support a toggle show/hide button', function () {\n            expect(rxAppStandard.isCollapsible()).to.eventually.be.false;\n        });\n\n        it('should throw an error if you attempt to expand and unsupported', function () {\n            expect(rxAppStandard.expand()).to.be.rejectedWith('Encore');\n        });\n    });\n});\n\ndescribe('rxPage', function () {\n    var standardPage, customPage;\n\n    before(function () {\n        demoPage.go('#/component/rxApp');\n        standardPage = rxPage.initialize($('#standard-rxApp .rx-page'));\n        customPage = rxPage.initialize($('#custom-rxApp .rx-page'));\n    });\n\n    it('should show element', function () {\n        expect(customPage.rootElement.isDisplayed()).to.eventually.eq.true;\n    });\n\n    it('should have a title', function () {\n        expect(standardPage.title).to.eventually.equal('Standard Page Title');\n    });\n\n    it('should return a null if no tag is found', function () {\n        expect(standardPage.titleTag).to.eventually.be.null;\n    });\n\n    it('should return a null if no subtitle is found', function () {\n        expect(standardPage.subtitle).to.eventually.be.null;\n    });\n\n    it('should have a subtitle', function () {\n        expect(customPage.subtitle).to.eventually.equal('With a subtitle');\n    });\n\n    it('should have a custom title', function () {\n        expect(customPage.title).to.eventually.equal('Customized Page Title');\n    });\n\n    it('should have a status tag', function () {\n        expect(customPage.titleTag).to.eventually.equal('ALPHA');\n    });\n\n    it('should update page subtitle dynamically', function () {\n        $('button.changeSubtitle').click();\n        expect(customPage.subtitle).to.eventually.contain('With a new subtitle at 1');\n    });\n\n    describe('main title', function () {\n\n        before(function () {\n            demoPage.go('#/component/configs');\n        });\n\n        it('should grab the main title', function () {\n            expect(rxPage.main.title).to.eventually.equal('configs');\n        });\n\n    });\n});\n\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    },
    {
        "name": "rxAppRoutes",
        "moduleName": "'encore.ui.rxAppRoutes'",
        "displayName": "Rx App Routes",
        "srcFiles": [
            "src/rxAppRoutes/rxAppRoutes.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [
            "rxEnvironment"
        ],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\"></a></p>\n<p>Service to manage app routes and states of routes</p>\n",
            "js": "",
            "html": "",
            "less": "",
            "midway": "\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    },
    {
        "name": "rxAttributes",
        "moduleName": "'encore.ui.rxAttributes'",
        "displayName": "Rx Attributes",
        "srcFiles": [
            "src/rxAttributes/rxAttributes.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\"></a></p>\n<p>This component allows you to add attributes based on a value in scope being defined or not.</p>\n<h2>Example</h2>\n<pre><code>&lt;div rx-attributes=&quot;{&#39;my-custom-attr&#39;: customAttrVal, &#39;ng-click&#39;: noFunc}&quot; ng-controller=&quot;myCtrl&quot;&gt;&lt;/div&gt;\n\n&lt;script&gt;\nfunction myCtrl (scope) {\n    scope.customAttrVal = &#39;some value&#39;;\n}\n&lt;/script&gt;\n</code></pre><p>Given this code, if the scope only had <code>scope.customAttrVal</code> set, only <code>my-custom-attr</code> would be added to the component. Since noFunc was never defined, <code>ng-click</code> isn&#39;t added.</p>\n<p>The output of the above code is:</p>\n<pre><code>&lt;div my-custom-attr=&quot;some value&quot; ng-controller=&quot;myCtrl&quot;&gt;&lt;/div&gt;\n</code></pre><h2>Value Format</h2>\n<p>The value of <code>rx-attributes</code> follows the same object convention as <code>ng-class</code>, in that it takes in an object to parse through. The object follows this pattern:</p>\n<pre><code>{\n    &#39;attribute-name&#39;: scopeValue,\n    &#39;another-attribute-name&#39;: anotherScopeValue,\n}\n</code></pre>",
            "js": "/*jshint unused:false*/\nfunction rxAttributesCtrl ($scope) {\n    $scope.customStyles = 'color: red; font-weight: bold;';\n    $scope.customContent = '\"Custom Content\"';\n}\n",
            "html": "<!-- Sample HTML goes here as a live example of how to the component can be used -->\n<div ng-controller=\"rxAttributesCtrl\">\n    <p><strong>The following content gets replaced by the value of ng-bind. It also gets some styles applied to it:</strong></p>\n    <p rx-attributes=\"{'ng-bind': customContent, 'style': customStyles}\">Content that's replaced</p>\n\n    <p><strong>The following content doesn't get replaced, since 'nothing' isn't a property on the scope:</strong></p>\n    <p rx-attributes=\"{'ng-bind': nothing}\">Non-replaced content</p>\n\n    <p><strong>The following content (you can't see it) does get replaced, but by nothing, since 'nothing' isn't a property on the scope. This is what rx-attributes avoids</strong></p>\n    <p ng-bind=\"nothing\">Content that's unintentionally replaced</p>\n</div>",
            "less": "",
            "midway": "\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    },
    {
        "name": "rxAuth",
        "moduleName": "'encore.ui.rxAuth'",
        "displayName": "Rx Auth",
        "srcFiles": [
            "src/rxAuth/rxAuth.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [
            "rxIdentity",
            "rxSession",
            "rxLocalStorage",
            "rxPermission",
            "rxSession",
            "rxLocalStorage"
        ],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\"></a></p>\n<p>Auth service which provides a common mechanism authenticating, validating permissions and managing sessions.</p>\n",
            "js": "function rxAuthCtrl ($scope, Auth) {\n    $scope.hasRole = function () {\n        alert('Has \"superhero\" Role? : ' + Auth.hasRole('superhero'));\n    };\n\n    $scope.isAuthenticated = function () {\n        alert('Is Authenticated? : ' + Auth.isAuthenticated());\n    };\n}\n",
            "html": "<div ng-controller=\"rxAuthCtrl\">\n    <button ng-click=\"hasRole()\" class=\"button\">Is a Superhero?</button>\n    <button ng-click=\"isAuthenticated()\" class=\"button\">Is Authenticated?</button>\n</div>\n",
            "less": "",
            "midway": "\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    },
    {
        "name": "rxBreadcrumbs",
        "moduleName": "'encore.ui.rxBreadcrumbs'",
        "displayName": "Rx Breadcrumbs",
        "srcFiles": [
            "src/rxBreadcrumbs/rxBreadcrumbs.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [
            "templates/rxBreadcrumbs/templates/rxBreadcrumbs.html"
        ],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\"></a></p>\n<p>Service/Directive to add/update breadcrumbs on a page</p>\n<p>By default, the first breadcrumb will always have an URL of <code>&#39;/&#39;</code> and a name of <code>&#39;Home&#39;</code>. This can be changed\nwith the <code>rxBreadcrumbsSvc.setHome()</code> method. It takes the new path as the first argument, and an optional name as the\nsecond argument. If you don&#39;t pass the second argument, it will reuse whatever name is already there (i.e. <code>&#39;Home&#39;</code>).\nThe breadcrumb name can contain HTML (ie. <code>&#39;&lt;strong&gt;Home&lt;/strong&gt;&#39;</code>).</p>\n<p>The argument <code>status</code> is also an optional argument to breadcrumbs. This leverages the tags defined in <a href=\"./#/component/rxApp\">rxApp</a> to display status tags directly inside of breadcrumbs. The demo shows the use of the custom <code>&quot;demo&quot;</code> tag.</p>\n<p>A final optional argument is the boolean <code>usePageStatusTag</code>, which defaults to <code>false</code>. If you set it to <code>true</code>, then the breadcrumb will use whatever\nstatus tag was passed to page, i.e.:</p>\n<pre><code>&lt;rx-page status=&quot;alpha&quot;&gt;\n</code></pre><p>This will cause any breadcrumb marked with <code>usePageStatusTag</code> on this page to receive the <code>&quot;alpha&quot;</code> status tag.</p>\n<p>For a given breadcrumb, <code>status</code> will take precedence over <code>usePageStatusTag</code>, i.e. it will use a tag defined in <code>status</code> instead of checking\nfor and using tag for the page.</p>\n",
            "js": "/*jshint unused:false*/\nfunction rxBreadcrumbsCtrl ($scope, rxBreadcrumbsSvc) {\n    rxBreadcrumbsSvc.set([{\n        path: '/',\n        name: 'Components',\n    }, {\n        name: '<strong>All Components</strong>',\n        status: 'demo'\n    }]);\n}\n",
            "html": "<!-- Sample HTML goes here as a live example of how to the component can be used -->\n<div ng-controller=\"rxBreadcrumbsCtrl\">\n    <nav class=\"site-breadcrumbs\">\n        <rx-breadcrumbs></rx-breadcrumbs>\n    </nav>\n</div>",
            "less": "/*\n# rxBreadcrumbs\n\nThey show your position within the site heirarchy.\n\n```\n<ol class=\"rx-breadcrumbs\">\n    <li class=\"breadcrumb\">\n        <span>\n            <a href=\"#\" class=\"breadcrumb-name first\">First Breadcrumb</a>\n        </span>\n    </li>\n    <li class=\"breadcrumb\">\n        <span>\n            <a href=\"#\" class=\"breadcrumb-name\">Middle Breadcrumb</a>\n        </span>\n    </li>\n    <li class=\"breadcrumb\">\n        <span>\n            <a href=\"#\" class=\"breadcrumb-name :hover\">Hovered Breadcrumb</a>\n        </span>\n    </li>\n    <li class=\"breadcrumb\">\n        <span class=\"breadcrumb-name last\">Last Breadcrumb</span>\n    </li>\n</ol>\n```\n*/\n\n.rx-breadcrumbs {\n    overflow: hidden;\n    border-style: solid;\n    border-color: #ccc;\n    float: left;\n\n    .breadcrumb {\n        float: left;\n\n        @breadcrumbHeight: 1.2em;\n        @breadcrumbArrowWidth: 9px;\n\n        .breadcrumb-name {\n            padding: @breadcrumbHeight/2 1em @breadcrumbHeight/2 2em;\n            font-size: 0.9em;\n            display: block;\n            color: #555;\n            position: relative;\n            text-decoration: none;\n            text-shadow: 0 1px 0 rgba(255,255,255,.5);\n            background: #ddd;\n        }\n        .breadcrumb-name.last {\n            background: transparent;\n        }\n\n        a::after,\n        a::before{\n            content: \"\";\n            position: absolute;\n            top: 50%;\n            margin-top: -@breadcrumbHeight;\n            border: 0 solid transparent;\n            border-width: @breadcrumbHeight 0 @breadcrumbHeight @breadcrumbArrowWidth;\n            right: -@breadcrumbArrowWidth;\n        }\n\n        a::after{\n            /* TODO add in border gradient to match nav background */\n            border-left-color: #ddd;\n            z-index: 2;\n        }\n        a::before{\n            border-left-color: #ccc;\n            right: -(@breadcrumbArrowWidth + 1);\n            z-index: 1;\n        }\n\n        .first {\n            padding-left: 1em;\n            background: #c8c8c8;\n        }\n        .first::after {\n            border-left-color: #c8c8c8;\n        }\n\n        a:hover {\n            background: #fff;\n        }\n        a:hover::after {\n            border-left-color: #fff;\n        }\n    }\n\n    .status-tag {\n        &.alpha-status, &.beta-status {\n            margin-left: 6px;\n            position: static;\n        }\n    }\n\n}\n",
            "midway": "var rxBreadcrumbs = require('../rxBreadcrumbs.page').rxBreadcrumbs;\n\ndescribe('rxBreadcrumbs', function () {\n    var breadcrumbs;\n\n    before(function () {\n        demoPage.go('#/component/rxBreadcrumbs');\n        breadcrumbs = rxBreadcrumbs.initialize($('.component-demo rx-breadcrumbs'));\n    });\n\n    it('should show the element', function () {\n        expect(breadcrumbs.rootElement.isDisplayed()).to.eventually.be.true;\n    });\n\n    describe('first breadcrumb', function () {\n        var first;\n\n        before(function () {\n            first = breadcrumbs.byPosition(0);\n        });\n\n        it('should fetch a single breadcrumb by position', function () {\n            expect(first).to.not.be.empty;\n        });\n\n        it('should be the first breadcrumb', function () {\n            expect(first.isFirst()).to.eventually.be.true;\n        });\n\n        it('should not be the last breadcrumb', function () {\n            expect(first.isLast()).to.eventually.be.false;\n        });\n\n        it('should have the name \"Home\"', function () {\n            expect(first.name).to.eventually.equal('Home');\n        });\n\n        it('should not have a tag', function () {\n            expect(first.lblTag.isPresent()).to.eventually.be.false;\n        });\n\n        it('should have the href \"/\"', function () {\n            expect(first.href).to.eventually.equal(browser.baseUrl + '/');\n        });\n\n    });\n\n    describe('last breadcrumb', function () {\n        var last;\n\n        before(function () {\n            last = breadcrumbs.byPosition(-1);\n        });\n\n        it('should fetch a single breadcrumb by position', function () {\n            expect(last).to.not.be.empty;\n        });\n\n        it('should not be the first breadcrumb', function () {\n            expect(last.isFirst()).to.eventually.be.false;\n        });\n\n        it('should be the last breadcrumb', function () {\n            expect(last.isLast()).to.eventually.be.true;\n        });\n\n        it('should have the name \"All Components\"', function () {\n            expect(last.name).to.eventually.equal('All Components');\n        });\n\n        it('should have a \"DEMO TAG\" tag',  function () {\n            expect(last.lblTag.isPresent()).to.eventually.be.true;\n            expect(last.tag).to.eventually.equal('DEMO TAG');\n        });\n\n        it('should have no href property', function () {\n            expect(last.isLink()).to.eventually.be.false;\n            expect(last.href).to.eventually.be.null;\n        });\n\n    });\n\n    describe('by name', function () {\n        var middle;\n\n        before(function () {\n            breadcrumbs.byName('Components').then(function (breadcrumb) {\n                middle = breadcrumb;\n            });\n        });\n\n        it('should fetch a single breadcrumb by position', function () {\n            expect(middle).to.not.be.empty;\n        });\n\n        it('should not be the first breadcrumb', function () {\n            expect(middle.isFirst()).to.eventually.be.false;\n        });\n\n        it('should not be the last breadcrumb', function () {\n            expect(middle.isLast()).to.eventually.be.false;\n        });\n\n        it('should have the name \"Components\"', function () {\n            expect(middle.name).to.eventually.equal('Components');\n        });\n\n        it('should not have a tag', function () {\n            expect(middle.tag).to.eventually.be.null;\n            expect(middle.lblTag.isPresent()).to.eventually.be.false;\n        });\n\n        it('should have an href property', function () {\n            expect(middle.isLink()).to.eventually.be.true;\n            expect(middle.href).to.eventually.equal(browser.baseUrl + '/');\n        });\n\n        it('should visit the correct page when clicking on the breadcrumb', function () {\n            var homeHref = browser.baseUrl + '/#/overview';\n\n            middle.visit();\n            expect(browser.getCurrentUrl()).to.eventually.equal(homeHref);\n        });\n        // Note that after this test, we are now at the /#/overview page\n\n    });\n\n    describe('default breadcrumbs', function () {\n        var defaultBreadcrumbs;\n\n        before(function () {\n            demoPage.go('#/component/configs');\n            defaultBreadcrumbs = rxBreadcrumbs.main;\n        });\n\n        it('should find the default breadcrumbs', function () {\n            expect(defaultBreadcrumbs.count()).to.eventually.equal(2);\n        });\n\n        it('should have the correct names', function () {\n            expect(defaultBreadcrumbs.names).to.eventually.eql(['Home', 'configs']);\n        });\n    });\n\n});\n\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    },
    {
        "name": "rxButton",
        "moduleName": "'encore.ui.rxButton'",
        "displayName": "Rx Button",
        "srcFiles": [
            "src/rxButton/rxButton.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [
            "templates/rxButton/templates/rxButton.html"
        ],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\"></a></p>\n<p>Provides styling for various types of buttons. See the .less file for examples.</p>\n<h2>rxButton directive</h2>\n<p>This directive is used to allow dynamic showing/hiding of a spinner/loading indicator.</p>\n",
            "js": "/*jshint unused:false*/\nfunction rxButtonCtrl ($scope, $timeout) {\n    $scope.status = {\n        loading: false,\n        disable: true\n    };\n\n    $scope.login = function () {\n        $scope.status.loading = true;\n\n        $timeout(function () {\n            $scope.status.loading = false;\n        }, 4000);\n    };\n}\n",
            "html": "<!-- Sample HTML goes here as a live example of how to the component can be used -->\n<h3 class=\"title\">Typical Usage</h3>\n<div ng-controller=\"rxButtonCtrl\">\n    <rx-button toggle-msg=\"Authenticating\" default-msg=\"Login\"\n        toggle=\"status.loading\" ng-click=\"login()\">\n    </rx-button>\n</div>\n\n<h3 class=\"title\">Using the <code>disable</code> attribute<h3>\n<p>\nNormally the <code>ng-disabled</code> property of an <code>rxButton</code> is controlled by <code>toggle</code>. You can use the optional <code>disable</code> attribute to pass an expression that <code>rxButton</code> should use for <code>ng-disabled</code>. Note that we set <code>classes=\"positive\"</code> on the \"Login\" button to provide it with some styling.\n</p>\n<div ng-controller=\"rxButtonCtrl\">\n    <rx-button default-msg=\"Toggle enabled/disabled of 'Login'\"\n        rx-toggle=\"status.disable\">\n    </rx-button>\n    <rx-button classes=\"positive\" toggle-msg=\"Authenticating\" default-msg=\"Login\"\n        toggle=\"status.loading\" disable=\"status.disable\" ng-click=\"login()\">\n    </rx-button>\n</div>\n",
            "less": "@import 'vars';\n\n.button {\n    display: inline-block;\n    background: @buttonDefaultBg;\n    color: @buttonColor;\n    border: 0;\n    font-size: 1.1em;\n    padding: 7px 13px;\n    margin-bottom: 10px;\n    transition: all 0.3s cubic-bezier(0.175, 0.885, 0.320, 1.275);\n\n    &:hover,\n    &:focus {\n        background: @buttonDefaultBgHover;\n        cursor: pointer;\n        // in case the buttons are created using the <a> tag\n        color: @buttonColor;\n        text-decoration: none;\n    }\n\n    // Size Variations\n    &.xl {\n        font-size: 1.25em;\n        padding: 20px 30px;\n    }\n\n    &.lg {\n        font-size: 1.15em;\n        padding: 15px 26px;\n    }\n\n    &.sm {\n        padding: 5px 10px;\n        font-size: 1em;\n    }\n\n    &.xs {\n        padding: 3px 7px;\n        margin-bottom: 5px;\n        font-size: .9em;\n    }\n\n    // Color Variations\n    &.positive, &.submit {\n        background: @buttonPositiveBg;\n        &:hover,\n        &:focus {\n            background: @buttonPositiveBgHover;\n        }\n    }\n\n    &.negative {\n        background: @buttonNegativeBg;\n        &:hover,\n        &:focus {\n            background: @buttonNegativeBgHover;\n        }\n    }\n\n    &.finish {\n        background: #fff;\n        color: @buttonDefaultBg;\n        .box-shadow(inset 0 0 0 2px @buttonDefaultBg);\n        &:hover,\n        &:focus {\n            color: @buttonDefaultBgHover;\n            .box-shadow(inset 0 0 0 2px @buttonDefaultBgHover);\n        }\n    }\n\n    &.cancel {\n        background: @buttonCancelBg;\n        &:hover,\n        &:focus {\n            background: @buttonCancelBgHover;\n        }\n    }\n\n    // Disabled styles should always come last in the cascade for color\n    // variations styles, or else they won't override other colors properly.\n    &[disabled], &[disabled]:hover {\n        cursor: not-allowed;\n        color: @buttonColorDisabled;\n        background: @buttonDisabledBg;\n    }\n\n\n// Spinner styles\n    .spinner {\n        display: inline-block;\n        position: relative;\n        left: 3px;\n\n        i {\n            width: 5px;\n            height: 5px;\n            background: @buttonSpinnerBg;\n\n            .border-radius(100%);\n            display: inline-block;\n            -webkit-animation: bouncedelay 1.4s infinite ease-in-out;\n            animation: bouncedelay 1.4s infinite ease-in-out;\n            /* Prevent first frame from flickering when animation starts */\n            -webkit-animation-fill-mode: both;\n            animation-fill-mode: both;\n\n            &.pos1 {\n                -webkit-animation-delay: -0.32s;\n                animation-delay: -0.32s;\n            }\n\n            &.pos2 {\n                -webkit-animation-delay: -0.16s;\n                animation-delay: -0.16s;\n            }\n        }\n    }\n\n    @-webkit-keyframes bouncedelay {\n        0%, 80%, 100% { -webkit-transform: scale(0.0) }\n        40% { -webkit-transform: scale(1.0) }\n    }\n\n    @keyframes bouncedelay {\n        0%, 80%, 100% {\n            transform: scale(0.0);\n            -webkit-transform: scale(0.0);\n        } 40% {\n            transform: scale(1.0);\n            -webkit-transform: scale(1.0);\n        }\n    }\n}\n\n// Make buttons look like plain links\n.btn-link {\n    color: @linkColor;\n    background: none;\n    border: none;\n    padding: 0;\n    cursor: pointer;\n    font-size: inherit;\n    &:hover,\n    &:focus {\n        text-decoration: underline;\n    }\n\n    &[disabled], &[disabled]:hover {\n        cursor: not-allowed;\n        color: @buttonDisabledBg;\n    }\n}\nthead th .btn-link {\n    color: @tableHeaderText;\n    &:hover,\n    &:focus {\n        color: @tableHeaderText;\n    }\n}\n\n.button-group {\n    display: flex;\n    border: @buttonGroupBorder;\n    border-radius: @buttonGroupBorderRadius + 2;\n    font-size: 1.1em;\n\n    input {\n        display: none;\n    }\n    label {\n\n        flex: 1;\n        text-align: center;\n        padding: 7px 13px;\n        color: #989998;\n\n        &:first-of-type {\n            border-top-left-radius: @buttonGroupBorderRadius;\n            border-bottom-left-radius: @buttonGroupBorderRadius;\n        }\n        &:last-of-type {\n            border-top-right-radius: @buttonGroupBorderRadius;\n            border-bottom-right-radius: @buttonGroupBorderRadius;\n        }\n        &:not(:last-of-type) {\n            border-right: @buttonGroupBorder;\n        }\n\n        &:hover,\n        &:focus {\n            cursor: pointer;\n            color: @white;\n            background: @buttonCancelBgHover;\n        }\n    }\n    input:checked + label {\n        color: @white;\n        background: #757575;\n    }\n}\n",
            "midway": "var rxButtonPage = require('../rxButton.page').rxButton;\n\ndescribe('rxButton', function () {\n    var rxButton;\n\n    before(function () {\n        demoPage.go('#/component/rxButton');\n        rxButton = rxButtonPage.initialize($('rx-button'));\n    });\n\n    it('should show element', function () {\n        expect(rxButton.rootElement.isDisplayed()).to.eventually.be.true;\n    });\n});\n\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    },
    {
        "name": "rxCapitalize",
        "moduleName": "'encore.ui.rxCapitalize'",
        "displayName": "Rx Capitalize",
        "srcFiles": [
            "src/rxCapitalize/rxCapitalize.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/stable.svg\" alt=\"stable\"></a></p>\n<p>Capitalizes the first word in a string.</p>\n",
            "js": "/*jshint unused:false*/\n\nfunction rxCapitalizeCtrl ($scope) {\n    $scope.hello = 'hello world. this is my text';\n}\n",
            "html": "<!-- Sample HTML goes here as a live example of how to the component can be used -->\n<div ng-controller=\"rxCapitalizeCtrl\">\n    {{hello | rxCapitalize}}\n</div>",
            "less": "",
            "midway": "\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    },
    {
        "name": "rxCharacterCount",
        "moduleName": "'encore.ui.rxCharacterCount'",
        "displayName": "Rx Character Count",
        "srcFiles": [
            "src/rxCharacterCount/rxCharacterCount.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/experimental.svg\" alt=\"experimental\"></a></p>\n<p>This provides an attribute directive intended for adding to <code>&lt;textarea&gt;</code> elements. Place the <code>rx-character-count</code> attribute into your <code>&lt;textarea&gt;</code>, and a new\n<code>&lt;div&gt;</code> will be added directly underneath it. This directive requires that you&#39;re using <code>ng-model</code> with your <code>&lt;textarea&gt;</code></p>\n<p>This <code>&lt;div&gt;</code> will watch the content of the <code>&lt;textarea&gt;</code>, and display how many characters are remaining. By default, 254 characters are &quot;allowed&quot;. If there are less than 10 characters remaining, the counter will go orange. If the user enters more than 254 characters, the counter will go red.</p>\n<h3>Optional Parameters</h3>\n<p>The 254 and 10 values are both configurable. To change the maximum number of characters, add a <code>max-characters=&quot;50&quot;</code> attribute to the element. For the low bound, add <code>low-boundary=&quot;5&quot;</code>.</p>\n<h3>Leading and Trailing characters</h3>\n<p>By default, any text field using <code>ng-model</code> has <code>ng-trim=&quot;true&quot;</code> applied to it. This means that any leading and trailing spaces/blanks in your text field will be ignored. They will not count towards the remaining character count. If you want it to count leading/trailing spaces, then just add <code>ng-trim=&quot;false&quot;</code> to your <code>&lt;textarea&gt;</code>.</p>\n<h3>Styling</h3>\n<p>When specifying a width other than the default, you should style some built-in classes in addition to the text field itself. As in the demo, the <code>.input-highlighting</code> class should have the same width as the text field (if highlighting is used), and the <code>.counted-input-wrapper</code> should be used to correctly position the counter.</p>\n<h3>ngShow/ngHide/ngIf/ngSwitch/etc.</h3>\n<p>If you wish to show/hide your <code>textarea</code> element, we recommend placing the element inside of a <code>&lt;div&gt;</code> or <code>&lt;span&gt;</code>, and doing the <code>ng-show</code> / <code>ng-hide</code> /etc. on that <code>div</code> / <code>span</code>. For example, </p>\n<pre><code>&lt;span ng-show=&quot;isShown&quot;&gt;\n  &lt;textarea rx-character-count&gt;{{someValue}}&lt;/textarea&gt;\n&lt;/span&gt;\n</code></pre><p>We <em>do</em> have preliminary support for putting these directives directly inside the <code>textarea</code>, i.e. </p>\n<pre><code>&lt;textarea rx-character-count ng-show=&quot;isShown&quot;&gt;{{someValue}}&lt;/textarea&gt;\n</code></pre><p>But this support should be considered experimental. If you choose to take advantage of it, please ensure you&#39;ve extensively tested that it performs correctly for your uses.</p>\n<h3>Highlighting</h3>\n<p>Characters that are over the limit will be highlighted in red if the <code>highlight=&quot;true&quot;</code> attribute is on the directive&#39;s element. Because this functionality is currently unstable, it has been left off by default. Please test your use case heavily before shipping with this feature enabled.</p>\n<p>Known failure cases:</p>\n<ul>\n<li>Content that causes a scrollbar in the textarea</li>\n<li>Initial text (coming from the model) that is over the limit</li>\n</ul>\n",
            "js": "/*jshint unused:false*/\n\n// This file is used to help build the 'demo' documentation page and should be updated with example code\nfunction rxCharacterCountCtrl ($scope) {\n    $scope.data = {\n        comment1: '',\n        comment2: '',\n        comment3: '',\n        comment4: '',\n        comment5: 'I have an initial value',\n        comment6: ''\n    };\n}\n",
            "html": "<!-- Sample HTML goes here as a live example of how the component can be used -->\n<div ng-controller=\"rxCharacterCountCtrl\">\n    <div>\n        <h3>Default Values</h3>\n        <textarea\n            ng-model=\"data.comment1\"\n            rows=\"10\" cols=\"50\"\n            rx-character-count\n            class=\"demo-default-values\">\n        </textarea>\n    </div>\n    <div>\n        <h3>Custom <code>max-characters=\"25\"</code></h3>\n        <textarea\n            ng-model=\"data.comment2\"\n            rows=\"10\" cols=\"50\"\n            rx-character-count\n            max-characters=\"25\"\n            class=\"demo-custom-max-characters\">\n        </textarea>\n    </div>\n    <div>\n        <h3>Custom <code>low-boundary=\"250\"</code></h3>\n        <textarea\n            ng-model=\"data.comment3\"\n            rows=\"10\" cols=\"50\"\n            rx-character-count\n            low-boundary=\"250\"\n            class=\"demo-custom-low-boundary\">\n        </textarea>\n    </div>\n    <div>\n        <h3>Count leading and trailing spaces</h3>\n        <textarea\n            ng-model=\"data.comment4\"\n            rows=\"10\" cols=\"50\"\n            rx-character-count\n            ng-trim=\"false\"\n            class=\"demo-custom-do-not-trim\">\n        </textarea>\n    </div>\n    <div>\n        <h3>Accounts for initial values</h3>\n        <textarea\n            ng-model=\"data.comment5\"\n            rows=\"10\" cols=\"50\"\n            rx-character-count\n            class=\"demo-initial-value\">\n        </textarea>\n    </div>\n    <div>\n        <h3>With highlighting</h3>\n        <textarea\n            ng-model=\"data.comment6\"\n            rows=\"10\" cols=\"50\"\n            rx-character-count\n            highlight=\"true\"\n            max-characters=\"10\"\n            class=\"demo-highlighting\">\n        </textarea>\n    </div>\n</div>\n",
            "less": "/*\n * rxCharacterCount\n */\n\n// Wrapper provides proper width for text area and positioning \n// character count. For specific use cases in a project, \n// custom wrappers with custom widths can be set.\n.counted-input-wrapper {\n    width: 375px;\n    // These two selectors must always be styled with the same width.\n    .input-highlighting, textarea {\n        width: 370px;\n    }\n    position: relative;\n    background-color: #ffffff;\n    input, textarea {\n      position: relative; // Ensure the input is layered over the highlighting without z-index\n      background-color: transparent;\n      resize: none;\n      .inputBorderPadding;\n    }\n    .input-highlighting {\n        position: absolute;\n        top: 4px;\n        left: 6px;\n        white-space: pre-wrap;\n        word-wrap: break-word;\n        color: transparent;\n        .over-limit-text {\n            background-color: @warnRed;\n            opacity: 0.3;\n        }\n    }\n\n    .character-countdown {\n        text-align: right;\n        color: @subduedTitle;\n        &.near-limit {\n            color: #db7820;\n        }\n        &.over-limit {\n            color: #fc0f1d;\n        }\n    }\n}\n",
            "midway": "var exercise = require('../rxCharacterCount.exercise');\n\ndescribe('rxCharacterCount', function () {\n\n    before(function () {\n        demoPage.go('#/component/rxCharacterCount');\n    });\n\n    describe('defaults', exercise.rxCharacterCount({\n        cssSelector: '.demo-default-values'\n    }));\n\n    describe('low max characters', exercise.rxCharacterCount({\n        cssSelector: '.demo-custom-max-characters',\n        maxCharacters: 25\n    }));\n\n    describe('high near limit level', exercise.rxCharacterCount({\n        cssSelector: '.demo-custom-low-boundary',\n        nearLimit: 250\n    }));\n\n    describe('count insignificant whitespace', exercise.rxCharacterCount({\n        cssSelector: '.demo-custom-do-not-trim',\n        ignoreInsignificantWhitespace: false\n    }));\n\n    describe('initial value', exercise.rxCharacterCount({\n        cssSelector: '.demo-initial-value'\n    }));\n\n    describe('with highlighting', exercise.rxCharacterCount({\n        cssSelector: '.demo-highlighting',\n        maxCharacters: 10,\n        highlight: true\n    }));\n\n});\n\n// this component's exercise.js file, if it exists, is below\n\nvar _ = require('lodash');\nvar rxCharacterCount = require('./rxCharacterCount.page').rxCharacterCount;\n\n/**\n   rxCharacterCount exercises.\n   @exports encore.exercise.rxCharacterCount\n   @param {Object} [options=] - Test options. Used to build valid tests.\n   @param {string} [options.cssSelector=] - Fallback selector string to initialize widget with.\n   @param {Number} [options.maxCharacters=254] - The total number of characters allowed.\n   @param {Number} [options.nearLimit=10] - The number of remaining characters needed to trigger the \"near-limit\" class.\n   @param {Boolean} [options.ignoreInsignificantWhitespace=false] - Whether or not the textbox ignores leading and\n   trailing whitespace when calculating the remaining character count.\n   @param {Boolean} [options.highlight=false] - Determines if text over the limit should be highlighted.\n   @example\n   ```js\n   describe('default exercises', encore.exercise.rxCharacterCount({\n       cssSelector: '.demo-custom-max-characters', // select one of many widgets on page\n       maxCharacters: 25,\n       nearLimit: 12,\n       ignoreInsignificantWhitespace: false\n   }));\n   ```\n */\nexports.rxCharacterCount = function (options) {\n    if (options === undefined) {\n        options = {};\n    }\n\n    options = _.defaults(options, {\n        maxCharacters: 254,\n        nearLimit: 10,\n        ignoreInsignificantWhitespace: true,\n        highlight: false\n    });\n\n    return function () {\n        var component;\n\n        before(function () {\n            if (options.cssSelector === undefined) {\n                component = rxCharacterCount.main;\n            } else {\n                component = rxCharacterCount.initialize($(options.cssSelector));\n            }\n        });\n\n        it('should show element', function () {\n            expect(component.isDisplayed()).to.eventually.be.true;\n        });\n\n        it('should update the remaining number of characters left when you insert text', function () {\n            component.comment = 'Foo';\n            expect(component.remaining).to.eventually.equal(options.maxCharacters - 3);\n        });\n\n        it('should erase all text and replace it with new text on update', function () {\n            component.comment = 'Bar';\n            expect(component.comment).to.eventually.equal('Bar');\n        });\n\n        it('should not set the near-limit class on an empty text box', function () {\n            component.comment = '';\n            expect(component.isNearLimit()).to.eventually.be.false;\n        });\n\n        it('should have ' + options.maxCharacters + ' remaining characters by default', function () {\n            expect(component.remaining).to.eventually.equal(options.maxCharacters);\n        });\n\n        it('should not set the over-limit class on an empty text box', function () {\n            expect(component.isOverLimit()).to.eventually.be.false;\n        });\n\n        var belowNearLimitLength = options.maxCharacters + 1 - options.nearLimit;\n        it('should not set the near-limit class when ' + belowNearLimitLength + ' characters are entered', function () {\n            component.comment = Array(belowNearLimitLength).join('a');\n            expect(component.isNearLimit()).to.eventually.be.false;\n        });\n\n        var atNearLimitLength = options.maxCharacters + 2 - options.nearLimit;\n        it('should set the near-limit class when ' + atNearLimitLength + ' characters are entered', function () {\n            component.comment = Array(atNearLimitLength).join('a');\n            expect(component.isNearLimit()).to.eventually.be.true;\n        });\n\n        var aboveNearLimitLength = options.maxCharacters + 3 - options.nearLimit;\n        it('should set the near-limit class when ' + aboveNearLimitLength + ' characters are entered', function () {\n            component.comment = Array(aboveNearLimitLength).join('a');\n            expect(component.isNearLimit()).to.eventually.be.true;\n        });\n\n        var atLimit = options.maxCharacters + 1;\n        it('should not set the over-limit class when ' + atLimit + ' characters are entered', function () {\n            component.comment = Array(atLimit).join('a');\n            expect(component.isOverLimit()).to.eventually.be.false;\n        });\n\n        it('should have zero remaining characters', function () {\n            expect(component.remaining).to.eventually.equal(0);\n        });\n\n        var overLimit = options.maxCharacters + 2;\n        it('should set the over-limit class when ' + overLimit + ' characters are entered', function () {\n            component.comment = Array(overLimit).join('a');\n            expect(component.isOverLimit()).to.eventually.be.true;\n        });\n\n        it('should display a negative number when the over-limit class is reached', function () {\n            expect(component.remaining).to.eventually.equal(-1);\n        });\n\n        var whitespace = '    leading and trailing whitespace    ';\n        var whitespaceLength = whitespace.length;\n        var trimmedLength = whitespace.trim().length;\n        if (options.ignoreInsignificantWhitespace) {\n            it('should ignore insignificant leading and trailing whitespace', function () {\n                component.comment = whitespace;\n                expect(component.remaining).to.eventually.equal(options.maxCharacters - trimmedLength);\n            });\n        } else {\n            it('should count insignificant leading and trailing whitespace', function () {\n                component.comment = whitespace;\n                expect(component.remaining).to.eventually.equal(options.maxCharacters - whitespaceLength);\n            });\n        }\n\n        if (options.highlight) {\n            describe('highlighting', function () {\n\n                it('should not show any highlights on an empty text box', function () {\n                    // A space is used because the `input` event is not fired by clear() or sendKeys('')\n                    component.comment = ' ';\n                    expect(component.overLimitText).to.eventually.equal('');\n                });\n\n                it('should not highlight any characters when ' + atLimit + ' characters are entered', function () {\n                    component.comment = Array(atLimit).join('a');\n                    expect(component.overLimitText).to.eventually.equal('');\n                });\n\n                it('should highlight a single characters when ' + overLimit + ' characters are entered', function () {\n                    component.comment = Array(overLimit).join('a');\n                    expect(component.overLimitText).to.eventually.equal('a');\n                });\n\n                it('should clear the over-limit text highlighting when the text is reduced', function () {\n                    component.comment = 'a';\n                    expect(component.overLimitText).to.eventually.equal('');\n                });\n\n            });\n        }\n\n        after(function () {\n            component.comment = '';\n        });\n\n    };\n};\n"
        }
    },
    {
        "name": "rxCheckbox",
        "moduleName": "'encore.ui.rxCheckbox'",
        "displayName": "Rx Checkbox",
        "srcFiles": [
            "src/rxCheckbox/rxCheckbox.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/experimental.svg\" alt=\"experimental\"></a></p>\n<p>rxCheckbox is an <strong>attribute directive</strong> that wraps a native checkbox element in markup required for styling purposes.\nTo use the directive, you can replace <code>type=&quot;checkbox&quot;</code> with <code>rx-checkbox</code>. The directive is smart enough to set the correct input type.</p>\n<h2>Styling</h2>\n<ul>\n<li>Directive results in an <strong>inline-block element</strong></li>\n<li>You can style the output against decendents of the <strong><code>.rxCheckbox</code></strong> CSS class.</li>\n</ul>\n<h2>Show/Hide</h2>\n<p>If you wish to show/hide your <code>rxCheckbox</code> element (and its label), we recommend placing the element (and its label) inside of a\n<code>&lt;div&gt;</code> or <code>&lt;span&gt;</code> wrapper, and performing the show/hide logic on the wrapper.</p>\n<pre><code class=\"lang-html\">&lt;span ng-show=&quot;isShown&quot;&gt;\n  &lt;input rx-checkbox id=&quot;chkDemo&quot; ng-model=&quot;chkDemo&quot; /&gt;\n  &lt;label for=&quot;chkDemo&quot;&gt;Label for Demo Checkbox&lt;/label&gt;\n&lt;/span&gt;\n</code></pre>\n<p>It is highly recommended that you use <code>ng-show</code> and <code>ng-hide</code> for purposes of display logic. Because of the way that <code>ng-if</code> and <code>ng-switch</code>\ndirectives behave with scope, they may introduce unnecessary complexity in your code.</p>\n",
            "js": "/*jshint unused:false*/\n\nangular.module('demoApp')\n.controller('rxCheckboxCtrl', function ($scope) {\n    $scope.checkOne = true;\n    $scope.checkThree = true;\n    $scope.checkFive = true;\n    $scope.checkSeven = true;\n\n    $scope.checkTwo = false;\n    $scope.checkFour = false;\n    $scope.checkSix = false;\n    $scope.checkEight = false;\n\n    $scope.amSure = false;\n    $scope.amReallySure = false;\n\n    $scope.$watch('amSure', function (newVal) {\n        if (newVal === false) {\n            $scope.amReallySure = false;\n        }\n    });\n});\n",
            "html": "<div ng-controller=\"rxCheckboxCtrl\">\n\n  <h2 class=\"title\">Examples</h2>\n\n  <h3 class=\"title\">Show/Hide Input</h3>\n  <p>\n    <input rx-checkbox\n           id=\"chkAmSure\"\n           ng-model=\"amSure\"\n           ng-required=\"true\" />\n    <label for=\"chkAmSure\">Are you sure?</label>\n    <small>({{amSure}})</small>\n    <br />\n    <sub><em>Valid only if checked</em></sub>\n  </p>\n  <p ng-show=\"amSure\">\n    <input rx-checkbox\n           id=\"chkAmReallySure\"\n           ng-model=\"amReallySure\" />\n    <label for=\"chkAmReallySure\">Are you REALLY sure?</label>\n    <small>({{amReallySure}})</small>\n  </p>\n\n  <br />\n\n  <h3 class=\"title\">Destroy Input</h3>\n  <p>Support for <code>$destroy</code> events.</p>\n  <p>\n    <input rx-checkbox\n           id=\"chkRemoveCheckbox\"\n           ng-model=\"chkIsRemoved\" />\n    <label for=\"chkRemoveCheckbox\">Remove Following Checkbox:</label>\n\n    <input rx-checkbox\n           checked\n           id=\"chkRemoveable\"\n           ng-if=\"!chkIsRemoved\" />\n  </p>\n\n  <!-- END DEMO CODE -->\n  <!-- END DEMO CODE -->\n  <!-- END DEMO CODE -->\n\n  <h2 class=\"title\">Checkbox States</h2>\n  <table>\n    <thead>\n      <tr>\n        <th>Disabled (ng-disabled)</th>\n        <th>Disabled (disabled)</th>\n        <th>Valid</th>\n        <th>Invalid</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <!-- NG-Disabled -->\n        <td>\n          <p>\n            <input rx-checkbox\n                   id=\"checkOne\"\n                   ng-disabled=\"true\"\n                   ng-model=\"checkOne\" />\n            <label for=\"checkOne\">Checked</label>\n          </p>\n          <p>\n            <input rx-checkbox\n                   id=\"checkTwo\"\n                   ng-disabled=\"true\"\n                   ng-model=\"checkTwo\" />\n            <label for=\"checkTwo\">Unchecked</label>\n          </p>\n        </td>\n\n        <!-- Disabled -->\n        <td>\n          <p>\n            <input rx-checkbox\n                   id=\"checkSeven\"\n                   disabled\n                   ng-model=\"checkSeven\" />\n            <label for=\"checkSeven\">Checked</label>\n          </p>\n          <p>\n            <input rx-checkbox\n                   id=\"checkEight\"\n                   disabled\n                   ng-model=\"checkEight\" />\n            <label for=\"checkEight\">Unchecked</label>\n          </p>\n        </td>\n\n        <!-- Valid -->\n        <td>\n          <p>\n            <input rx-checkbox\n                   id=\"checkThree\"\n                   ng-model=\"checkThree\" />\n            <label for=\"checkThree\">Checked</label>\n          </p>\n          <p>\n            <input rx-checkbox\n                   id=\"checkFour\"\n                   ng-model=\"checkFour\" />\n            <label for=\"checkFour\">Unchecked</label>\n          </p>\n        </td>\n\n        <!-- Invalid -->\n        <td>\n          <p>\n            <input rx-checkbox\n                   id=\"checkFive\"\n                   ng-model=\"checkFive\"\n                   always-invalid />\n            <label for=\"checkFive\">Checked</label>\n          </p>\n          <p>\n            <input rx-checkbox\n                   id=\"checkSix\"\n                   ng-model=\"checkSix\"\n                   always-invalid />\n            <label for=\"checkSix\">Unchecked</label>\n          </p>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n\n<h2 class=\"title\">Attributes</h2>\n<table class=\"component-attributes table-striped\">\n  <thead>\n    <tr>\n      <th>Attribute</th>\n      <th>Required?</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>\n        <code>ng-disabled</code>\n      </th>\n      <td><em>optional</em></td>\n      <td>\n        In addition to default functionality, this will add/remove the <code>rx-disabled</code> class on the control wrapper for purposes of styling sibling elements.\n      </td>\n    </tr>\n  </tbody>\n</table>\n",
            "less": "/*\n * rxCheckbox\n */\n.rxCheckbox {\n  display: inline-block;\n  width: @rxCheckbox-size;\n  height: @rxCheckbox-size;\n  color: @rxCheckbox-color;\n  background-color: @rxCheckbox-background-color;\n  position: relative;\n\n  input[type=\"checkbox\"],\n  .fake-checkbox {\n    position: absolute;\n    top: 0;\n    left: 0;\n    display: block;\n    margin: 0px;\n    padding: 0px;\n    border: 0px;\n    outline: 0px;\n  }\n\n  .fake-checkbox {\n    box-sizing: border-box;\n    z-index: 0;\n    width: 100%;\n    height: 100%;\n\n    // enabled unchecked\n    background-color: @rxCheckbox-background-color;\n    border: 1px solid @rxCheckbox-border-color;\n\n    // perfect center alignment for tick\n    display: flex;\n    flex-flow: row nowrap;\n    align-items: center;\n    justify-content: center;\n    color: transparent;\n\n    .tick {\n      flex: 0 0 auto;\n      font-size: @rxCheckbox-font-size;\n    }\n  }//.fake-checkbox\n\n  &.rx-disabled {\n    // disabled, unchecked\n    .fake-checkbox {\n      background: @inputBackground;\n    }\n\n    input[type=\"checkbox\"] {\n      cursor: not-allowed;\n\n      // disabled, checked\n      &:checked ~ .fake-checkbox {\n        background-color: @inputBackgroundDisabled;\n        border: none;\n      }\n    }\n\n    & + label {\n      color: @inputColorDisabled;\n    }\n  }//.rx-disabled\n\n  input[type=\"checkbox\"] {\n    z-index: 1;\n    height: 110%;\n    width: 110%;\n    opacity: 0;\n    cursor: pointer;\n\n    // enabled checked\n    &:checked ~ .fake-checkbox {\n      background-color: @rxCheckbox-background-color-selected;\n      color: @rxCheckbox-color;\n      border: none;\n    }\n\n    &.ng-invalid {\n      // enabled unchecked error\n      & ~ .fake-checkbox {\n        background-color: @rxCheckbox-background-color;\n        border: 2px solid @inputBackgroundError;\n      }\n\n      // enabled checked error\n      &:checked {\n        & ~ .fake-checkbox {\n          background-color: @inputBackgroundError;\n        }\n      }\n    }\n  }\n}//.rxCheckbox\n",
            "midway": "var rxCheckboxPage = require('../rxCheckbox.page').rxCheckbox;\nvar exercise = require('../rxCheckbox.exercise');\n\ndescribe('rxCheckbox', function () {\n    before(function () {\n        demoPage.go('#/component/rxCheckbox');\n    });\n\n    describe('(State) NG-Disabled Checked', exercise.rxCheckbox({\n        cssSelector: \"#checkOne\",\n        disabled: true,\n        selected: true,\n        valid: true\n    }));\n\n    describe('(State) NG-Disabled Unchecked', exercise.rxCheckbox({\n        cssSelector: \"#checkTwo\",\n        disabled: true,\n        selected: false,\n        valid: true\n    }));\n\n    describe('(State) Disabled Checked', exercise.rxCheckbox({\n        cssSelector: \"#checkSeven\",\n        disabled: true,\n        selected: true,\n        valid: true\n    }));\n\n    describe('(State) Disabled Unchecked', exercise.rxCheckbox({\n        cssSelector: \"#checkEight\",\n        disabled: true,\n        selected: false,\n        valid: true\n    }));\n\n    describe('(State) Valid Checked', exercise.rxCheckbox({\n        cssSelector: \"#checkThree\",\n        disabled: false,\n        selected: true,\n        valid: true\n    }));\n\n    describe('(State) Valid Unchecked', exercise.rxCheckbox({\n        cssSelector: \"#checkFour\",\n        disabled: false,\n        selected: false,\n        valid: true\n    }));\n\n    describe('(State) Invalid Checked', exercise.rxCheckbox({\n        cssSelector: \"#checkFive\",\n        disabled: false,\n        selected: true,\n        valid: false\n    }));\n\n    describe('(State) Invalid Unchecked', exercise.rxCheckbox({\n        cssSelector: \"#checkSix\",\n        disabled: false,\n        selected: false,\n        valid: false\n    }));\n\n    describe('Show/Hide Input', function () {\n        var chkSure, chkReallySure;\n\n        before(function () {\n            chkSure = rxCheckboxPage.initialize($('#chkAmSure'));\n            chkReallySure = rxCheckboxPage.initialize($('#chkAmReallySure'));\n        });\n\n        describe('\"Are you sure?\"', function () {\n            it('should be displayed', function () {\n                expect(chkSure.isDisplayed()).to.eventually.be.true;\n            });\n\n            describe('when checked', function () {\n                before(function () {\n                    chkSure.select();\n                });\n\n                it('should be valid', function () {\n                    expect(chkSure.isValid()).to.eventually.be.true;\n                });\n\n                it('should show \"Are you REALLY sure?\"', function () {\n                    expect(chkReallySure.isDisplayed()).to.eventually.be.true;\n                });\n            });\n\n            describe('when unchecked', function () {\n                before(function () {\n                    chkSure.deselect();\n                });\n\n                it('should not be valid', function () {\n                    expect(chkSure.isValid()).to.eventually.be.false;\n                });\n\n                it('should not show \"Are you REALLY sure?\"', function () {\n                    expect(chkReallySure.isDisplayed()).to.eventually.be.false;\n                });\n            });\n        });\n    });\n\n    describe('Destroy Input', function () {\n        var chkRemove, chkRemoveable;\n\n        before(function () {\n            chkRemove = rxCheckboxPage.initialize($('#chkRemoveCheckbox'));\n            chkRemoveable = rxCheckboxPage.initialize($('#chkRemoveable'));\n        });\n\n        describe('when checked', function () {\n            before(function () {\n                chkRemove.select();\n            });\n\n            describe('Static Checkbox', function () {\n                it('should not exist', function () {\n                    expect(chkRemoveable.isPresent()).to.eventually.be.false;\n                });\n            });\n        });\n\n        describe('when unchecked', function () {\n            before(function () {\n                chkRemove.deselect();\n            });\n\n            describe('Static Checkbox', function () {\n                it('should exist', function () {\n                    expect(chkRemoveable.isPresent()).to.eventually.be.true;\n                });\n            });\n        });\n    });\n});\n\n// this component's exercise.js file, if it exists, is below\n\nvar _ = require('lodash');\nvar rxCheckbox = require('./rxCheckbox.page').rxCheckbox;\n\n/**\n * @description rxCheckbox exercises\n * @exports encore.exercise.rxCheckbox\n * @param {Object} [options=] - Test options. Used to build valid tests.\n * @param {String} [options.cssSelector=] - Fallback selector string with which to initialize widget.\n * @param {Boolean} [options.disabled=false] - Determines if the checkbox is disabled\n * @param {Boolean} [options.selected=false] - Determines if the checkbox is selected\n * @param {Boolean} [options.visible=true] - Determines if the checkbox is visible\n * @param {Boolean} [options.valid=true] - Determines if the checkbox is valid\n */\nexports.rxCheckbox = function (options) {\n    if (options === undefined) {\n        options = {};\n    }\n\n    options = _.defaults(options, {\n        disabled: false,\n        selected: false,\n        visible: true,\n        valid: true\n    });\n\n    return function () {\n        var component;\n\n        before(function () {\n            if (options.cssSelector === undefined) {\n                component = rxCheckbox.main;\n            } else {\n                component = rxCheckbox.initialize($(options.cssSelector));\n            }\n        });\n\n        it('should be a checkbox type', function () {\n            expect(component.isCheckbox()).to.eventually.be.true;\n        });\n\n        it('should be present', function () {\n            expect(component.isPresent()).to.eventually.be.true;\n        });\n\n        it('should ' + (options.visible ? 'be' : 'not be') + ' visible', function () {\n            expect(component.isDisplayed()).to.eventually.eq(options.visible);\n        });\n\n        it('should ' + (options.disabled ? 'be' : 'not be') + ' disabled', function () {\n            expect(component.isDisabled()).to.eventually.eq(options.disabled);\n        });\n\n        it('should ' + (options.selected ? 'be' : 'not be') + ' selected', function () {\n            expect(component.isSelected()).to.eventually.eq(options.selected);\n        });\n\n        it('should ' + (options.valid ? 'be' : 'not be') + ' valid', function () {\n            expect(component.isValid()).to.eventually.eq(options.valid);\n        });\n    };\n};\n"
        }
    },
    {
        "name": "rxCollapse",
        "moduleName": "'encore.ui.rxCollapse'",
        "displayName": "Rx Collapse",
        "srcFiles": [
            "src/rxCollapse/rxCollapse.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [
            "templates/rxCollapse/templates/rxCollapse.html"
        ],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/experimental.svg\" alt=\"experimental\"></a></p>\n<p>The rxCollapse element can be used to display and hide content. It can be configured to show as either expanded or collapsed on page load. A double chevron is used as a toggle to show/hide the inner contents, while keeping the header and border visible.</p>\n<h3>Attributes</h3>\n<ul>\n<li><code>title</code>: The title to display next to the toggle button.</li>\n<li><code>expanded</code>: Initially expanded or collapsed.  Default is expanded.</li>\n</ul>\n",
            "js": "",
            "html": "<rx-collapse title=\"A Custom Title\" expanded=\"true\">\n    You can put whatever content you want to inside here\n</rx-collapse>",
            "less": "/*\n * rxCollapse\n */\nrx-collapse {\n  display: block;\n\n  .collapse-container {\n\n    .double-chevron-cell {\n      display: inline-block;\n      .box-sizing(border-box);\n      width: 30px;\n      padding: 0 10px;\n      background-color: @borderGrey;\n      vertical-align: middle;\n\n      .double-chevron {\n        cursor: pointer;\n        &:after {\n          display: inline-block;\n          color: @white;\n          font-size: 28px;\n          .chevron-mixin(-1);\n        }\n      }\n\n      &.expanded {\n        .double-chevron {\n          &:after {\n            .chevron-mixin;\n          }\n        }\n      }\n    }\n\n    border: 2px solid @borderGrey;\n\n    .rx-collapse-title {\n      display: inline-block;\n      margin: 0 10px;\n      vertical-align: middle;\n    }\n\n    .collapse-body {\n      margin: 0;\n      padding: 10px;\n    }\n  }\n}\n",
            "midway": "var exercise = require('../rxCollapse.exercise');\n\ndescribe('rxCollapse', function () {\n    var rxCollapse;\n\n    before(function () {\n        demoPage.go('#/component/rxCollapse');\n    });\n\n    describe('exercises', exercise.rxCollapse());\n\n});\n\n// this component's exercise.js file, if it exists, is below\n\nvar _ = require('lodash');\nvar rxCollapse = require('./rxCollapse.page').rxCollapse;\n\n/**\n   rxCollapse exercises.\n   @exports encore.exercise.rxCollapse\n   @param {Object} [options=] - Test options. Used to build valid tests.\n   @param {string} [options.cssSelector=] - Fallback selector string to initialize widget with.\n   @example\n   ```js\n   describe('default exercises', encore.exercise.rxCollapse({\n       cssSelector: '.secondary-info rx-paginate', // select one of many widgets on page\n   }));\n   ```\n */\nexports.rxCollapse = function (options) {\n    if (options === undefined) {\n        options = {};\n    }\n\n    options = _.defaults(options, { /* defaults go here */ });\n\n    return function () {\n        var component;\n\n        before(function () {\n            if (options.cssSelector === undefined) {\n                component = rxCollapse.main;\n            } else {\n                component = rxCollapse.initialize($(options.cssSelector));\n            }\n        });\n\n        it('should show the element', function () {\n            expect(component.isDisplayed()).to.eventually.be.true;\n        });\n\n        it('should show a custom title', function () {\n            expect(component.title.getText()).to.eventually.equal('A Custom Title');\n        });\n\n        it('should expand and collapse with toggle', function () {\n            expect(component.isExpanded).to.eventually.be.true;\n\n            // Collapse\n            component.btnToggle.click();\n            expect(component.isExpanded).to.eventually.be.false;\n\n            // Expand\n            component.btnToggle.click();\n            expect(component.isExpanded).to.eventually.be.true;\n        });\n\n    };\n};\n"
        }
    },
    {
        "name": "rxCompile",
        "moduleName": "'encore.ui.rxCompile'",
        "displayName": "Rx Compile",
        "srcFiles": [
            "src/rxCompile/rxCompile.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/stable.svg\" alt=\"stable\"></a></p>\n<p>Allows compilation of expressions inside of other expressions.</p>\n",
            "js": "/*jshint unused:false*/\n\n// This file is used to help build the 'demo' documentation page and should be updated with example code\nfunction rxCompileCtrl ($scope) {\n    $scope.world = 'wrrrld';\n    $scope.myExpression = 'Hello {{world}}';\n}\n",
            "html": "<!-- Sample HTML goes here as a live example of how to the component can be used -->\n<div ng-controller=\"rxCompileCtrl\">\n    <input type=\"text\" ng-model=\"world\">\n    <div rx-compile=\"myExpression\"></div>\n    <div>{{myExpression}}</div>\n</div>",
            "less": "",
            "midway": "\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    },
    {
        "name": "rxDiskSize",
        "moduleName": "'encore.ui.rxDiskSize'",
        "displayName": "Rx Disk Size",
        "srcFiles": [
            "src/rxDiskSize/rxDiskSize.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/stable.svg\" alt=\"stable\"></a></p>\n<p>Converts GB disk size into a more readable format (e.g. GBs, TBs)</p>\n",
            "js": "/*jshint unused:false*/\n\n// This file is used to help build the 'demo' documentation page and should be updated with example code\nfunction rxDiskSizeCtrl ($scope) {\n    $scope.sizeGB = 420;\n    $scope.sizeTB = 125000;\n    $scope.sizePB = 171337000;\n}\n",
            "html": "<!-- Sample HTML goes here as a live example of how to the component can be used -->\n<div ng-controller=\"rxDiskSizeCtrl\">\n    <ul>\n        <li>{{sizeGB}} &rarr; {{sizeGB | rxDiskSize}}</li>\n        <li>{{sizeTB}} &rarr; {{sizeTB | rxDiskSize}}</li>\n        <li>{{sizePB}} &rarr; {{sizePB | rxDiskSize}}</li>\n    </ul>\n    <ul>\n        <li>{{sizeGB}} GB &rarr; {{sizeGB | rxDiskSize:'GB'}}</li>\n        <li>{{sizeTB}} GB &rarr; {{sizeTB | rxDiskSize:'TB'}}</li>\n        <li>{{sizePB}} GB &rarr; {{sizePB | rxDiskSize:'PB'}}</li>\n    </ul>\n</div>\n",
            "less": "",
            "midway": "var _ = require('lodash');\n\nvar diskSize = require('../rxDiskSize.page').rxDiskSize;\n\ndescribe('rxDiskSize', function () {\n    var diskSizesTable;\n    var diskSizeStrings = [\n        '420 GB',\n        '125 TB',\n        '171.337 PB',\n        '420 GB',\n        '125 TB',\n        '171.337 PB'\n    ];\n\n    before(function () {\n        demoPage.go('#/component/rxDiskSize');\n        diskSizesTable = $$('.component-demo ul li');\n    });\n\n    _.forEach(diskSizeStrings, function (testData, index) {\n        it('should still have ' + testData + ' as test data on the page', function () {\n            diskSizesTable.get(index).getText().then(function (text) {\n                var onPage = text.split('→')[1].trim();\n                expect(onPage).to.equal(testData);\n            });\n        });\n\n        it('should convert ' + testData + ' back to gigabytes', function () {\n            diskSizesTable.get(index).getText().then(function (text) {\n                var gigabytes = parseInt(text.split(' ')[0], 10);\n                expect(diskSize.toGigabytes(testData)).to.equal(gigabytes);\n            });\n        });\n    });\n\n});\n\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    },
    {
        "name": "rxEnvironment",
        "moduleName": "'encore.ui.rxEnvironment'",
        "displayName": "Rx Environment",
        "srcFiles": [
            "src/rxEnvironment/rxEnvironment.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\"></a></p>\n<p>Component built to detect and provide the current environment (e.g. dev, staging, prod)</p>\n<h2>Current Environments</h2>\n<p>This service defines the following Encore specific environments:</p>\n<ul>\n<li><strong><code>local</code></strong> - <a href=\"http://localhost:port\">http://localhost:port</a> and <a href=\"http://server:port\">http://server:port</a></li>\n<li><strong><code>preprod</code></strong> - <a href=\"http://preprod.encore.rackspace.com\">http://preprod.encore.rackspace.com</a></li>\n<li><strong><code>unified-preprod</code></strong> - <a href=\"https://*.encore.rackspace.com\">https://*.encore.rackspace.com</a></li>\n<li><strong><code>unified</code></strong> - All environments including <a href=\"https://encore.rackspace.com\">https://encore.rackspace.com</a></li>\n<li><strong><code>unified-prod</code></strong> - Only <a href=\"https://encore.rackspace.com\">https://encore.rackspace.com</a></li>\n</ul>\n<p>Please note that we&#39;ve made an assumption that staging/preprod/prod environments will all end with <code>encore.rackspace.com</code>. Try to avoid using <code>staging.encore.myNewProduct.rackspace.com</code> for new products, and instead set up your system as <code>encore.rackspace.com/myNewProduct</code>. </p>\n<h2>Checking Current Environment</h2>\n<p>The <code>Environment</code> service contains methods for checking if we are currently in one of the five listed environments, namely:</p>\n<ul>\n<li><code>Environment.isLocal()</code></li>\n<li><code>Environment.isPreProd()</code></li>\n<li><code>Environment.isUnifiedPreProd()</code></li>\n<li><code>Environment.isUnified()</code></li>\n<li><code>Environment.isUnifiedProd()</code></li>\n</ul>\n<p>The normal procedure is to assume that your code is running in local or staging, and take special actions if <code>Environment.isPreProd()</code> or <code>Environment.isUnifiedProd()</code> are <code>true</code>.</p>\n<h2>Overlapping Environments</h2>\n<p>Keep in mind that the environments we define are not mutually exclusive. For instance, if we&#39;re at <code>http://preprod.encore.rackspace.com</code>, then we are in the <code>preprod</code> environment, the <code>unified-preprod</code> environment, and <code>unified-prod</code>.</p>\n<h2>Adding New Environments</h2>\n<p>If necessary, you can add additional environments with <code>Environment.add()</code>. This takes an object with three properties, <code>name</code>, <code>pattern</code> and <code>url</code>, where</p>\n<ul>\n<li>name: The &quot;friendly&quot; name of your environment, like &quot;local&quot;, &quot;preprod&quot;, etc.</li>\n<li>pattern: A string or RegEx that the current path is matched against</li>\n<li>url: The URL pattern used to build URLs when using rxEnvironmentUrl</li>\n</ul>\n<p>As an example, if we didn&#39;t already have a <code>&#39;preprod&#39;</code> environment, we could add it as follows:</p>\n<pre><code>Environment.add({\n    // Matches only https://preprod.encore.rackspace.com\n    name: &#39;preprod&#39;,\n    pattern: /\\/\\/preprod.encore.rackspace.com/,\n    url: &#39;{{path}}&#39;\n})\n</code></pre><p>For this demo application, we add a &quot;Github Pages&quot; environment, like this:</p>\n<pre><code>Environment.add({\n    name: &#39;ghPages&#39;,\n    pattern: &#39;//rackerlabs.github.io&#39;,\n    url: baseGithubUrl + &#39;{{path}}&#39;\n});\n</code></pre><p>When you want to check if you&#39;re in one of the custom environments, you can use <code>envCheck()</code>, i.e.: <code>Environment.envCheck(&#39;ghPages&#39;)</code></p>\n<h2>A Warning About rxEnvironmentUrl</h2>\n<p><code>rxEnvironmentUrl</code> can be used for building full URLs, based on the current environment. For now, you should consider it as deprecated. It has problems with overlapping environments, and could potentially generate the wrong URL.</p>\n<h2>A Warning About <code>Environment.get().name</code></h2>\n<p>You might find older Encore code that uses <code>Environment.get().name</code> to get the name of the current environment. This pattern should be avoided, specifically because of the overlapping environment issue discussed above. If you call <code>Environment.get().name</code>, it will just return the first matching environment in the list of environments, even if we&#39;re overlapping and have multiple environments. Instead, check explicitly with <code>Environment.isLocal()</code>, <code>Environment.isPreProd()</code>, etc., or use <code>Environment.envCheck(&#39;local&#39;)</code></p>\n",
            "js": "/*jshint unused:false*/\nfunction rxEnvironmentCtrl ($scope, Environment) {\n    $scope.Environment = Environment;\n}\n",
            "html": "<div ng-controller=\"rxEnvironmentCtrl\">\n    <p>Url built from Environment data: {{ { tld: 'cloudatlas', path: 'some/path' } | rxEnvironmentUrl }}</p>\n\n    <p>Content shows if on GitHub demo page:\n        <span rx-if-environment=\"ghPages\">\n            You're on the GitHub demo page\n        </span>\n    </p>\n\n    <p>Content shows if not on GitHub demo page:\n        <span rx-if-environment=\"!ghPages\">\n            You're not on the GitHub demo page\n        </span>\n    </p>\n\n    <p>\n    Are we in the <code>ghPages</code> environment? {{ 'ghPages' | rxEnvironmentMatch }}\n    </p>\n</div>\n",
            "less": "",
            "midway": "var environment = require('../rxEnvironment.page').rxEnvironment;\n\ndescribe('rxEnvironment', function () {\n\n    before(function () {\n        demoPage.go('#/component/rxEnvironment');\n    });\n\n    it('should be on localhost', function () {\n        expect(environment.isLocalhost()).to.eventually.be.true;\n    });\n\n    it('should get the original environment', function () {\n        expect(environment.original()).to.eventually.equal('localhost');\n    });\n\n    it('should match the current environment', function () {\n        expect(environment.current()).to.eventually.equal('localhost');\n    });\n\n    it('should not change the original environment', function () {\n        browser.get('http://rackerlabs.github.io/encore-ui/#/overview');\n        expect(environment.original()).to.eventually.equal('localhost');\n    });\n\n    it('should change the current environment', function () {\n        expect(environment.current()).to.eventually.equal('staging');\n    });\n\n    it('should be on staging', function () {\n        expect(environment.isStaging()).to.eventually.be.true;\n    });\n\n    it('should still say the original location is localhost', function () {\n        expect(environment.isStaging({ useBaseUrl: true })).to.eventually.be.false;\n    });\n\n});\n\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    },
    {
        "name": "rxFavicon",
        "moduleName": "'encore.ui.rxFavicon'",
        "displayName": "Rx Favicon",
        "srcFiles": [
            "src/rxFavicon/rxFavicon.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [
            "rxEnvironment"
        ],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\"></a></p>\n<p>Allows custom favicons between local, staging and production environments.</p>\n<h2>Usage</h2>\n<p>rxFavicon is an attribute based directive. It accepts an object with the following optional parameters defined:</p>\n<ul>\n<li><strong>staging</strong>: Path to favicon to use for staging environments (falls back to &#39;production&#39; icon)</li>\n<li><strong>local</strong>: Path to favicon to use for staging environments (falls back to &#39;staging&#39; icon)</li>\n</ul>\n<p>See the demo examples for code examples.</p>\n",
            "js": "/*jshint unused:false*/\nfunction rxFaviconCtrl ($scope, Environment) {\n    $scope.setEnvironment = function (environment) {\n        // TODO allow overriding the current environment to show how the favicon changes\n    };\n}\n",
            "html": "<div ng-controller=\"rxFaviconCtrl\">\n    <p>See favicon of this site for an example of this. On <a href=\"http://rackerlabs.github.io/encore-ui/\">the live site</a>, the favicon will be a dark blue book. On <a href=\"http://localhost:9001\">the local site</a>, it will be a light blue book.</p>\n\n    <link rel=\"icon\" type=\"image/png\" href=\"favicon.png\" rx-favicon=\"{ staging: 'staging-favicon.png', local: 'local-favicon.png' }\" />\n    <link rel=\"icon\" type=\"image/png\" href=\"favicon.png\" rx-favicon=\"{ local: 'local-favicon.png' }\" />\n    <link rel=\"icon\" type=\"image/png\" href=\"favicon.png\" rx-favicon=\"{ staging: 'staging-favicon.png' }\" />\n</div>",
            "less": "",
            "midway": "\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    },
    {
        "name": "rxFeedback",
        "moduleName": "'encore.ui.rxFeedback'",
        "displayName": "Rx Feedback",
        "srcFiles": [
            "src/rxFeedback/rxFeedback.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [
            "templates/rxFeedback/templates/feedbackForm.html",
            "templates/rxFeedback/templates/rxFeedback.html"
        ],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\"></a></p>\n<p>Component built to gather and send user feedback</p>\n<h2>Default Submission Function</h2>\n<p>The <code>rxFeedback</code> component sends feedback to <code>/api/encore/feedback</code>, which routes feedback to <code>encoreui@lists</code>. \nThis endpoint also supports a <code>product</code> parameter <code>/api/encore/feedback/:product</code> for sending feedback to a \nproduct-specific mailing list. Adding a custom endpoint is managed in <code>encore-service-pillar</code>. Once configured \nyou can override the default endpoint with <code>rxFeedbackSvc.setEndpoint</code>.</p>\n<h2>Custom Submission Function</h2>\n<p>The <code>rxFeedback</code> component allows you to define an <code>on-submit</code> attribute that points to a custom function for the\npurposes of overriding the default submission logic.  This function should accept a single argument for a\nfeedback object with the following definition:</p>\n<pre><code class=\"lang-javascript\">// feedback object structure\n{\n  &quot;type&quot;: {\n    &quot;label&quot;: &quot;(string)&quot;,\n    &quot;placeholder&quot;: &quot;(string) placeholder text&quot;,\n    &quot;prompt&quot;: &quot;(string) UI text used to describe the `description` field&quot;\n  },\n  &quot;description&quot;: &quot;(string) user-submitted feedback&quot;\n}\n</code></pre>\n",
            "js": "/*jshint unused:false*/\nfunction rxFeedbackCtrl ($scope, rxNotify) {\n    $scope.alwaysSucceed = function () {\n        rxNotify.add('Thanks for your feedback!', {\n            type: 'success',\n            timeout: 3\n        });\n    };\n\n    $scope.alwaysFail = function () {\n        rxNotify.add('Feedback not received!', {\n            type: 'error',\n            timeout: 3\n        });\n    };\n}\n",
            "html": "<!-- Sample HTML goes here as a live example of how to the component can be used -->\n<div ng-controller=\"rxFeedbackCtrl\">\n\n    <rx-feedback id=\"rxFeedback\"></rx-feedback>\n    <span class=\"subdued\">(Will fallback to default email client)</span>\n\n    <hr/>\n\n    <rx-feedback on-submit=\"alwaysSucceed\" id=\"rxFeedbackSucceeds\"></rx-feedback>\n    <span class=\"subdued\">(Will Succeed)</span>\n\n    <rx-feedback on-submit=\"alwaysFail\" id=\"rxFeedbackFails\"></rx-feedback>\n    <span class=\"subdued\">(Will Fail)</span>\n\n</div>\n",
            "less": "/*\n * rxFeedback\n */\n.rx-feedback-form .feedback-description {\n    .field-label,\n    .field-input,\n    .feedback-textarea {\n        display: block;\n        width: 100%;\n        float: none;\n    }\n\n    .field-input {\n        top: 0;\n        margin-top: 5px;\n    }\n\n    .feedback-textarea {\n        height: 10em;\n    }\n}",
            "midway": "var _ = require('lodash');\n\nvar feedback = require('../rxFeedback.page').rxFeedback;\n\ndescribe('rxFeedback', function () {\n    var successfulFeedback, unsuccessfulFeedback;\n    var defaultFeedback = 'Software Bug';\n\n    before(function () {\n        demoPage.go('#/component/rxFeedback');\n        successfulFeedback = feedback.initialize($('#rxFeedbackSucceeds'));\n        unsuccessfulFeedback = feedback.initialize($('#rxFeedbackFails'));\n    });\n\n    it('should select the \"' + defaultFeedback + '\" feedback type by default', function () {\n        successfulFeedback.open();\n        expect(successfulFeedback.type).to.eventually.equal(defaultFeedback);\n    });\n\n    it('should have the default feedback description label for \"' + defaultFeedback + '\"', function () {\n        expect(successfulFeedback.descriptionLabel).to.eventually.equal('Bug Description:');\n    });\n\n    it('should have the default feedback placeholder text for \"' + defaultFeedback + '\"', function () {\n        var placeholder = 'Please be as descriptive as possible so we can track it down for you.';\n        expect(successfulFeedback.descriptionPlaceholder).to.eventually.equal(placeholder);\n    });\n\n    it('should include the url in the subtitle', function () {\n        browser.getCurrentUrl().then(function (url) {\n            var feedbackUrl = url.split('#')[1];\n            expect(successfulFeedback.subtitle).to.eventually.equal('for page: ' + feedbackUrl);\n        });\n    });\n\n    describe('feedback types and labels', function () {\n        var typesAndLabels = {\n            'Incorrect Data': {\n                descriptionLabel: 'Problem Description:',\n                descriptionPlaceholder: ['Please be as descriptive as possible ',\n                                         'so we can figure it out for you.'].join('')\n            },\n            'Feature Request': {\n                descriptionLabel: 'Feature Description:',\n                descriptionPlaceholder: ['Please be as descriptive as possible ',\n                                         'so we can make your feature awesome.'].join('')\n            },\n            'Kudos': {\n                descriptionLabel: 'What made you happy?:',\n                descriptionPlaceholder: ['We love to hear that you\\'re enjoying Encore! ',\n                                         'Tell us what you like, and what we can do to ',\n                                         'make it even better'].join('')\n            }\n        };\n\n        it('should have all feedback types', function () {\n            var types = [defaultFeedback].concat(_.keys(typesAndLabels));\n            expect(successfulFeedback.types).to.eventually.eql(types);\n        });\n\n        _.forEach(typesAndLabels, function (typeData, type) {\n            it('should switch feedback types', function () {\n                successfulFeedback.type = type;\n                expect(successfulFeedback.type).to.eventually.equal(type);\n            });\n\n            _.forEach(typeData, function (text, property) {\n                it('should have the correct label set for ' + property, function () {\n                    expect(successfulFeedback[property]).to.eventually.equal(text);\n                });\n            });\n\n        });\n\n    });\n\n    describe('submitting feedback', function () {\n\n        it('should successfully submit feedback', function () {\n            var send = function () {\n                var deferred = protractor.promise.defer();\n                deferred.fulfill(successfulFeedback.send('Software Bug', 'test', 3000));\n                return deferred.promise;\n            };\n            expect(send()).to.not.be.rejectedWith(Error);\n        });\n\n        it('should catch errors on unsuccessful feedback', function () {\n            var send = function () {\n                var deferred = protractor.promise.defer();\n                deferred.fulfill(unsuccessfulFeedback.send('Software Bug', 'test', 3000));\n                return deferred.promise;\n            };\n            browser.sleep(2000);\n            expect(send()).to.be.rejectedWith(Error);\n        });\n\n    });\n\n});\n\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    },
    {
        "name": "rxFloatingHeader",
        "moduleName": "'encore.ui.rxFloatingHeader'",
        "displayName": "Rx Floating Header",
        "srcFiles": [
            "src/rxFloatingHeader/rxFloatingHeader.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [
            "rxMisc",
            "rxSessionStorage"
        ],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/experimental.svg\" alt=\"experimental\"></a></p>\n<p>An attribute directive which turns a tableheader into a floating persistent header so that names of columns are still visible, even as a user scrolls down the page. This is based off of the example at <a href=\"http://css-tricks.com/persistent-headers/\">http://css-tricks.com/persistent-headers/</a></p>\n<p>To use it, add an <code>rx-floating-header</code> attribute to a <code>table</code>, i.e.</p>\n<pre><code>&lt;table rx-floating-header&gt;\n    &lt;thead&gt;\n    ...\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n    &lt;/tbody&gt;\n&lt;/table&gt;\n</code></pre><p>A common pattern in our products is to place an <code>&lt;input&gt;</code> filter at the top of the table, to restrict the items that are displayed. We support this as well, by placing the <code>&lt;input&gt;</code> directly inside of the <code>&lt;thead&gt;</code> in its own <code>&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;/tr&gt;</code>. For example:</p>\n<pre><code>&lt;table rx-floating-header&gt;\n    &lt;thead&gt;\n      &lt;tr&gt;\n          &lt;td colspan=&quot;2&quot;&gt;\n              &lt;rx-search-box\n                  ng-model=&quot;searchText&quot;\n                  rx-placeholder=&quot;&#39;Filter by any...&#39;&quot;&gt;&lt;/rx-search-box&gt;\n          &lt;/td&gt;\n      &lt;/tr&gt;\n      &lt;tr&gt;\n         &lt;th&gt;Column One Header&lt;/th&gt;\n         &lt;th&gt;Column Two Header&lt;/th&gt;\n      &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n        ...\n    &lt;/tbody&gt;\n &lt;/table&gt;\n</code></pre><p>Make sure you set the <code>colspan</code> attribute on the filter&#39;s <code>&lt;th&gt;</code>, to match the number of columns you have.</p>\n<p><code>rxFloatingHeader</code> is also fully compatible with <code>rxSortableColumn</code> and <code>rxPagination</code>.</p>\n",
            "js": "/*jshint unused:false*/\n\n// This file is used to help build the 'demo' documentation page and should be updated with example code\nfunction rxFloatingHeaderCtrl ($scope) {\n    $scope.searchText = '';\n    $scope.data = [\n        { name: 'A', value: 1 },\n        { name: 'B', value: 2 },\n        { name: 'C', value: 3 },\n        { name: 'D', value: 4 },\n        { name: 'E', value: 5 },\n        { name: 'First', value: 1 },\n        { name: 'F', value: 1 },\n        { name: 'F', value: 1 },\n        { name: 'F', value: 1 },\n        { name: 'F', value: 1 },\n        { name: 'F', value: 1 },\n        { name: 'F', value: 1 },\n        { name: 'F', value: 1 },\n        { name: 'F', value: 1 },\n        { name: 'F', value: 1 },\n        { name: 'F', value: 1 },\n        { name: 'G', value: 2 },\n        { name: 'H', value: 3 },\n        { name: 'I', value: 4 },\n        { name: 'J', value: 5 },\n        { name: 'K', value: 1 },\n        { name: 'L', value: 2 },\n    ];\n\n    $scope.clearFilter = function () {\n        $scope.searchText = '';\n    };\n\n}\n",
            "html": "<table rx-floating-header class=\"no-filter\">\n    <thead>\n        <tr>\n            <th>Column One Header</th>\n            <th>Column Two Header</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>table1 data1</td>\n            <td>table1 data1</td>\n        </tr>\n        <tr>\n            <td>table1 data2</td>\n            <td>table1 data2</td>\n        </tr>\n        <tr>\n            <td>table1 data3</td>\n            <td>table1 data3</td>\n        </tr>\n        <tr class=\"middle-row\">\n            <td>table1 data4</td>\n            <td>table1 data4</td>\n        </tr>\n    </tbody>\n</table>\n\n  <p>\n  A common pattern is to include a filter with tables. You can have that as part of the floating header by setting\n  it in a separate `&lt;tr&gt;` element.\n  </p>\n\n\n<div ng-controller=\"rxFloatingHeaderCtrl\">\n    <table rx-floating-header class=\"filter\">\n        <thead>\n            <tr>\n                <td colspan=\"2\">\n                    <rx-search-box\n                        ng-model=\"searchText\"\n                        class=\"filter-box\"\n                        rx-placeholder=\"'Filter by any...'\"></rx-search-box>\n                </td>\n            </tr>\n            <tr>\n                <th>Column One Header</th>\n                <th>Column Two Header</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr ng-repeat=\"datum in data | filter:searchText\" class=\"row_{{datum.value}}\" ng-class=\"{'middle-row': $index===2}\">\n                <td>{{datum.name}}</td>\n                <td>{{datum.value}}</td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n",
            "less": "/*\n * rxFloatingHeader\n */\n.rx-floating-header {\n    position: fixed;\n    z-index: 3;\n    opacity: 0.96;\n}\n\n\n// For tables with filters, style filter th differently\nth.filter-header {\n    font-weight: normal;\n    background: rgba(255, 255, 255, 0.95);\n    border: 1px solid #e1e0df;\n    input.filter-box {\n        color: #404040;\n    }\n    button {\n        margin: 0;\n    }\n}\n\n// Batch actions menu is visible even when header floats\n// There's some black magic here. For whatever reason, we have to \n// add z-index:2 to the other rows in the header, *not* the row\n// that the batch actions menu lives in.\ntr.rx-floating-header:not(.rx-table-filter-row) {\n  z-index: 2;\n}\n",
            "midway": "var rxFloatingHeader = require('../rxFloatingHeader.page').rxFloatingHeader;\n\ndescribe('rxFloatingHeader', function () {\n    var table, tr, middleRow, middleRowY, initialY;\n\n    describe('One header row table', function () {\n        before(function () {\n            demoPage.go('#/component/rxFloatingHeader');\n            table = $('table[rx-floating-header].no-filter');\n            tr = table.$('thead tr:first-of-type');\n            middleRow = table.$('.middle-row');\n            protractor.promise.all([middleRow.getLocation(), tr.getLocation()]).then(function (locations) {\n                middleRowY = locations[0].y;\n                initialY = locations[1].y;\n            });\n        });\n\n        it('should show element', function () {\n            expect(table.isDisplayed()).to.eventually.be.true;\n        });\n\n        it('should float header after scrolling to middle of table', function () {\n            rxFloatingHeader.scrollToElement(middleRow);\n            expect(rxFloatingHeader.compareYLocations(tr, middleRowY)).to.eventually.be.true;\n        });\n\n        it('should put the header back when scrolling to the top', function () {\n            rxFloatingHeader.scrollToElement($('.page-titles'));\n            expect(rxFloatingHeader.compareYLocations(tr, initialY)).to.eventually.be.true;\n        });\n    });\n\n    describe('Multi header row table', function () {\n        var filterHeader, titlesHeader, initialFilterY, filterHeight;\n\n        before(function () {\n            table = $('table[rx-floating-header].filter');\n            var trs = table.$$('thead tr');\n            filterHeader = trs.get(0);\n            titlesHeader = trs.get(1);\n            middleRow = table.$('.middle-row');\n            var locationPromises = [middleRow.getLocation(), filterHeader.getLocation(), filterHeader.getSize()];\n            protractor.promise.all(locationPromises).then(function (locations) {\n                middleRowY = locations[0].y;\n                initialFilterY = locations[1].y;\n                filterHeight = locations[2].height;\n            });\n        });\n\n        it('should float header after scrolling to middle of table', function () {\n            rxFloatingHeader.scrollToElement(middleRow);\n            expect(rxFloatingHeader.compareYLocations(filterHeader, middleRowY)).to.eventually.be.true;\n        });\n\n        it('should have the right distance between the float header and the middle of the table', function () {\n            expect(rxFloatingHeader.compareYLocations(titlesHeader, middleRowY + filterHeight)).to.eventually.be.true;\n        });\n\n        it('should put the header back when scrolling to the top', function () {\n            rxFloatingHeader.scrollToElement($('.page-titles'));\n            expect(rxFloatingHeader.compareYLocations(filterHeader, initialFilterY)).to.eventually.be.true;\n        });\n\n        it('should have the right distance between the title header and the initial starting point', function () {\n            expect(rxFloatingHeader.compareYLocations(titlesHeader, initialFilterY + filterHeight))\n                .to.eventually.be.true;\n        });\n\n    });\n\n});\n\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    },
    {
        "name": "rxForm",
        "moduleName": "'encore.ui.rxForm'",
        "displayName": "Rx Form",
        "srcFiles": [
            "src/rxForm/rxForm.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [
            "templates/rxForm/templates/rxFormFieldset.html",
            "templates/rxForm/templates/rxFormItem.html",
            "templates/rxForm/templates/rxFormOptionTable.html"
        ],
        "dependencies": [
            "rxMisc",
            "rxSessionStorage"
        ],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\"></a></p>\n<p>The rxForm component is a set of directives used to create forms throughout Encore. These directives provide a common HTML layout and style for all form elements, which helps ensure form accessibility and makes creating new forms easier.</p>\n<h1>Directives</h1>\n<h2>rxFormItem</h2>\n<p>Creates a field row wrapped in a label. Used for fields which include a single input/field.</p>\n<h3>Custom validator for rxFormItem</h3>\n<p>For form input validation, we have created an <code>.inline-error</code> class. You can use this, along with <code>ng-show</code> to conditionally show error messages on form inputs. An example of this is below in the demo, and looks like this:</p>\n<p><pre><code>\n&lt;rx-form-item label=&quot;Email address&quot; description=&quot;Must contain foo.&quot;&gt;\n    &lt;input name=&quot;userEmail&quot; type=&quot;email&quot; ng-model=&quot;details.email&quot; foocheck /&gt;\n    &lt;div ng-show=&quot;demoForm.userEmail.$error.email&quot; class=&quot;inline-error&quot;&gt;Invalid email&lt;/div&gt;\n    &lt;div ng-show=&quot;demoForm.userEmail.$error.foocheck&quot; class=&quot;inline-error&quot;&gt;Your email address must contain &#39;foo&#39;&lt;/div&gt;\n&lt;/rx-form-item&gt;\n</pre></code></p>\n<p>Angular provides its own validator when you use <code>type=&quot;email&quot;</code>, and you can use <code>.inline-error</code> to turn email validation errors into a styled message.</p>\n<p>You can also use this class if you define a custom validator. The example shown uses a custom <code>foocheck</code> validator. Note that it is enabled by placing the <code>foocheck</code> directive in the <code>input</code>, and using it with <code>ng-show=&quot;demoForm.userEmail.$error.foocheck&quot;</code></p>\n<p>The JavaScript tab below shows how this validator was implemented, and there are plenty of examples online showing the same thing.</p>\n<h2>rxFormFieldset</h2>\n<p>Creates a field row wrapped in a fieldset. Used for fields which include multiple inputs (e.g. rxFormOptionTable).</p>\n<h2>rxFormOptionTable</h2>\n<p>Given a data object and an additional optional object for column labels, rxFormOptionTable creates a series of radio or checkbox buttons.</p>\n<h3>Attributes</h3>\n<ul>\n<li><code>type</code>: Values <code>radio</code> or <code>checkbox</code> are required.</li>\n<li><code>required</code>: For checkboxes, a <code>true</code> value means there must be at least one checkbox checked.</li>\n<li><code>columns</code>: A data object listing column copy, include labels and keys. Expressions are allowed; see the samples.</li>\n<li><code>data</code>: A data object to prefill the radio/checkbox collection. For checkboxes, checked values default to true unless <code>value</code> and <code>falseValue</code> attributes are given. See the samples.</li>\n<li><code>model</code>: The AngularJS model to tie all radios/checkboxes together.</li>\n<li><code>field-id</code>: The ID of the elements.</li>\n<li><code>empty-message</code>: (string) A default message if the data attribute is empty.</li>\n<li><code>disable-fn</code>: (Function) Optional callback function to determine if option should be disabled. Parameters <code>tableId</code>, <code>fieldId</code>, and <code>rowId</code> will be passed to the function.</li>\n</ul>\n<h1>Services</h1>\n<h2>rxFormUtils</h2>\n<p>Provides a set of utility functions for accessing form data</p>\n",
            "js": "function rxFormDemoCtrl ($scope) {\n    $scope.types = [\n        {\n            'value': 'SATA',\n            'label': 'SATA'\n        },\n        {\n            'value': 'SSD',\n            'label': 'SSD'\n        },\n        {\n            'value': 'CD',\n            'label': 'CD'\n        },\n        {\n            'value': 'DVD',\n            'label': 'DVD'\n        },\n        {\n            'value': 'BLURAY',\n            'label': 'BLURAY'\n        },\n        {\n            'value': 'TAPE',\n            'label': 'TAPE'\n        },\n        {\n            'value': 'FLOPPY',\n            'label': 'FLOPPY'\n        },\n        {\n            'value': 'LASERDISC',\n            'label': 'LASERDISC'\n        },\n        {\n            'value': 'JAZDRIVE',\n            'label': 'JAZDRIVE'\n        },\n        {\n            'value': 'PUNCHCARDS',\n            'label': 'PUNCHCARDS'\n        },\n        {\n            'value': 'RNA',\n            'label': 'RNA'\n        }\n    ];\n\n    $scope.volume = {\n        data: 0,\n        isNameRequired: true,\n        type: _.first($scope.types).value, // select the first type by default\n        checked: [true, 'unchecked'] //example with first checkbox automatically checked\n    };\n\n    $scope.yesOptionDescription = '<b>This</b> is HTML that included in the JS';\n\n    $scope.optionTableData = [\n        {\n            'id': 'option1_id',\n            'name': 'Option #1',\n            'value': 0,\n            'obj': {\n                'name': 'Nested Name 1'\n            }\n        }, {\n            'id': 'option2_id',\n            'name': 'Option #2',\n            'value': 1,\n            'obj': {\n                'name': 'Nested Name 2'\n            }\n        }, {\n            'id': 'option3_id',\n            'name': 'Option #3',\n            'value': 2,\n            'obj': {\n                'name': 'Nested Name 3'\n            }\n        }, {\n            'id': 'option4_id',\n            'name': 'Option #4',\n            'value': 3,\n            'obj': {\n                'name': 'Nested Name 4'\n            }\n        }\n    ];\n\n    $scope.optionTableColumns = [{\n        'label': 'Name',\n        'key': 'name',\n        'selectedLabel': '(Already saved data)'\n    }, {\n        'label': 'Static Content',\n        'key': 'Some <strong>Text &</strong> HTML'\n    }, {\n        'label': 'Expression 2',\n        'key': '{{ value * 100 | number:2 }}'\n    }, {\n        'label': 'Expression 3',\n        'key': '{{ obj.name | uppercase }}'\n    }, {\n        'label': 'Expression 4',\n        'key': '{{ value | currency }}'\n    }];\n\n    $scope.optionTableCheckboxData = [{\n        'name': 'Item 1'\n    }, {\n        'name': 'Item 2',\n        'value': 'checked',\n        'falseValue': 'unchecked'\n    }];\n\n    $scope.optionTableEmptyData = [];\n\n    $scope.compressedLayout = { value: false };\n\n    $scope.details = { email: '' };\n\n    $scope.disableOption = function (tableId, fieldId, rowId) {\n        return rowId === 'option4_id';\n    };\n\n}\n\n// A dummy directive only used within the rxForm demo page.\n// It's used to check that some string contains 'foo', and works\n// with ngForm to set the appropriate `.$error` value\n// Note: This code is easier to write in Angular 1.3, because\n// you can use `.$validators` instead of `.$parsers`\nangular.module('encore.ui.rxForm')\n.directive('foocheck', function () {\n    return {\n        require: 'ngModel',\n        link: function (scope, elm, attrs, ctrl) {\n\n            // Put a new validator on the beginning\n            ctrl.$parsers.unshift(function (viewValue) {\n                if (_.contains(viewValue, 'foo')) {\n                    ctrl.$setValidity('foocheck', true);\n                    return viewValue;\n                } else {\n                    ctrl.$setValidity('foocheck', false);\n                    return undefined;\n                }\n            });\n        }\n    };\n\n});\n",
            "html": "<div class=\"forms rx-form\" ng-controller=\"rxFormDemoCtrl\" ng-class=\"{'layout-compressed': compressedLayout.value}\">\n    <form name=\"demoForm\">\n        <rx-form-item label=\"Switch to Compressed Layout\">\n            <input type=\"checkbox\" ng-model=\"compressedLayout.value\" />\n        </rx-form-item>\n        <h3 class=\"title\">Text inputs</h3>\n\n        <rx-form-item label=\"Plain textbox\">\n            <input type=\"text\" />\n        </rx-form-item>\n\n        <rx-form-item label=\"Text area\">\n            <textarea rows=\"10\" cols=\"50\"></textarea>\n        </rx-form-item>\n\n        <h4 class=\"title sm\">Example of required text input w/ validation pattern</h4>\n        <rx-form-item label=\"Volume Name\" description=\"Must be 2-5 letter palindrome (e.g. 'dewed')\">\n            <input type=\"text\" ng-model=\"volume.name\" ng-required=\"volume.isNameRequired\" ng-pattern=\"/^\\b(\\w)?(\\w)\\w?\\2\\1$/\" />\n        </rx-form-item>\n\n        <rx-form-item label=\"Require Name?\" description=\"Check and uncheck with empty volume name to see border\">\n            <input type=\"checkbox\" ng-model=\"volume.isNameRequired\" />\n        </rx-form-item>\n\n        <p class=\"clear\">Bound Value: {{volume.name}}</p>\n\n        <h4 class=\"title sm\">Example with prefix/suffix</h4>\n        <rx-form-item label=\"Monthly Cost\" prefix=\"$\" suffix=\"million\">\n            <input type=\"number\" ng-model=\"volume.cost\" />\n        </rx-form-item>\n\n        <h4 class=\"title sm\">Example with validators</h4>\n        <rx-form-item label=\"Email address\" description=\"Must contain foo.\">\n            <input name=\"userEmail\" type=\"email\" ng-model=\"details.email\" foocheck />\n            <div ng-show=\"demoForm.userEmail.$error.email\" class=\"inline-error\">Invalid email</div>\n            <div ng-show=\"demoForm.userEmail.$error.foocheck\" class=\"inline-error\">Your email address must contain 'foo'</div>\n        </rx-form-item>\n\n        <h4 class=\"title sm\">Example of disabled input</h4>\n        <rx-form-item label=\"IP Address\">\n            <input name=\"ipaddress\" type=\"text\" ng-model=\"test\" placeholder=\"127.0.0.1\" disabled />\n        </rx-form-item>\n\n        <hr>\n\n        <h3 class=\"title\">Select Boxes</h3>\n        <h4 class=\"title sm\">Example of default select box</h4>\n        <rx-form-item label=\"Type\" description=\"Bound Value: {{volume.type}}\">\n            <span class=\"field-select\">\n                <select ng-model=\"volume.type\" ng-required=\"true\">\n                    <option\n                        ng-repeat=\"type in types\"\n                        value=\"{{type.value}}\"\n                        ng-selected=\"{{type.value == model}}\"\n                        >{{type.label}}</option>\n                </select>\n            </span>\n        </rx-form-item>\n\n        <hr>\n\n        <h3 class=\"title\">rxFormOptionTable</h3>\n\n        <rx-form-fieldset legend=\"Option Table (radio w/full-width class)\">\n            <rx-form-option-table\n                id=\"optionTableRadio\"\n                data=\"optionTableData\"\n                columns=\"optionTableColumns\"\n                type=\"radio\"\n                model=\"volume.data\"\n                field-id=\"optionTable\"\n                selected=\"0\"\n                class=\"full-width\"\n                disable-fn=\"disableOption(tableId, fieldId, rowId)\"\n                ></rx-form-option-table>\n        </rx-form-fieldset>\n\n        <p>Bound Value: {{volume.data}}</p>\n\n        <rx-form-fieldset legend=\"Option Table (checkboxes)\">\n            <rx-form-option-table\n                columns=\"optionTableColumns\"\n                type=\"checkbox\"\n                model=\"volume.checked\"\n                field-id=\"optionCheckboxTable\"\n                data=\"optionTableCheckboxData\"\n                required=\"true\"\n                ></rx-form-option-table>\n        </rx-form-fieldset>\n\n        <p>Item 1 Value: {{volume.checked[0]}}</p>\n        <p>Item 2 Value: {{volume.checked[1]}}</p>\n\n        <rx-form-fieldset legend=\"Option Table (empty)\">\n            <rx-form-option-table\n                columns=\"optionTableColumns\"\n                type=\"checkbox\"\n                model=\"volume.checked\"\n                field-id=\"optionCheckboxTable\"\n                data=\"optionTableEmptyData\"\n                empty-message=\"You don't have any data!\"\n                ></rx-form-option-table>\n        </rx-form-fieldset>\n\n        <div class=\"form-actions\">\n            <button class=\"button submit\" type=\"submit\">\n                Submit Form\n            </button>\n\n            <button class=\"button cancel\" type=\"submit\">\n                Cancel\n            </button>\n        </div>\n    </form>\n</div>\n",
            "less": "@import 'vars';\n@import 'mixins';\n\n/* Form Fields & Fieldsets */\n\n.rx-form {\n    margin: 15px 0 0;\n}\n\n.form-item {\n    margin-top: 5px;\n    .flexbox();\n    .flex-flow(row nowrap);\n    .justify-content(flex-start);\n    .align-items(baseline);\n}\n\n.text-area-label {\n    &.form-item {\n        .align-items(flex-start);\n    }\n}\n\n.rx-form-fieldset > fieldset {\n    width: 100%;\n    .full-width .option-table {\n        width: 100%;\n    }\n}\n\n.form-description,\n.form-item {\n    margin-bottom: 15px;\n}\n\n.field-label,\n.field-legend, {\n    color: @inputLabelColor;\n    font-size: 1.1em;\n    .flex(0 0 @inputLabelWidth);\n}\n\n.field-content {\n    .flexbox();\n    .flex(1 auto);\n    .flex-flow(row wrap);\n    .justify-content(flex-start);\n    .align-items(center);\n\n    .field-prefix,\n    .field-suffix {\n        font-size: 1.2em;\n    }\n    .field-prefix {\n        margin-right: 5px;\n    }\n    .field-suffix {\n        margin-left: 5px;\n    }\n\n    .field-description {\n        .flex(1 100%);\n        font-size: 0.8em;\n        font-style: italic;\n        margin-top: 5px;\n    }\n}\n\n/* Input fields */\n\n.field-input {\n    input,\n    select {\n        color: @inputColor;\n        font-size: 1.2em;\n\n        &.ng-invalid.ng-dirty {\n            border-color: @inputBorderColorInvalid;\n        }\n    }\n\n    input,\n    .field-select {\n        background: @white;\n        max-width: 100%;\n        box-sizing: border-box;\n    }\n\n    textarea {\n        .inputBorderPadding;\n        background-color: #fff;\n        width: 100%;\n        position: relative;\n        z-index: 2;\n        box-sizing: border-box;\n    }\n\n    input {\n        width: @inputWidth;\n        .inputBorderPadding;\n\n        &[type=\"number\"] {\n            width: @inputNumberWidth;\n        }\n\n        &[type=\"radio\"],\n        &[type=\"checkbox\"] {\n            width: auto;\n            max-width: none;\n            font-size: 1em;\n            vertical-align: middle;\n        }\n\n        &[disabled] {\n            color: @inputColorDisabled;\n            background-color: @inputBackgroundDisabled;\n            cursor: not-allowed;\n        }\n    }\n}\n\n/*\n * @bugfix Input field is marked as invalid before a user has done anything on form\n * @browsers FF\n * @see http://stackoverflow.com/questions/17209057/firefox-draws-red-border-on-required-select-box\n */\n.ng-pristine .field-input .ng-invalid-required {\n    box-shadow: none;\n}\n\n\n/* Inline error messages */\n.field-input-wrapper {\n    .inline-error {\n        color: #ff2400;\n        font-weight: 900;\n        margin-top: 5px;\n    }\n}\n\n/* Dropdowns */\n\n.field-select {\n    display: inline-block;\n    position: relative;\n    width: @inputSelectWidth;\n\n    select {\n        width: 100%;\n        margin: 0;\n        .border-radius(0px);\n        background: #fff;\n        border: none;\n        outline: none;\n        display: inline-block;\n        -webkit-appearance: none;\n        -moz-appearance: none;\n        appearance: none;\n        cursor: pointer;\n        .inputBorderPadding;\n    }\n\n    &:before {\n        // background so long text doesn't show behind caret\n        content: '';\n        right: 1px;\n        top: 1px;\n        width: 20px;\n        height: 93%;\n        background: #fff;\n        position: absolute;\n        pointer-events: none;\n        display: block;\n    }\n\n    &:after {\n        // down caret from font awesome\n        content: '\\f0d7';\n        font-family: FontAwesome;\n        font-size: 15px;\n        color: #aaa;\n        right: 10px;\n        top: 7px;\n        padding: 0;\n        position: absolute;\n        pointer-events: none;\n    }\n}\n\n// User select element in Account section of nav\n\n.rx-app-nav-item .field-select {\n    select {\n        background: #404140;\n        border: 1px solid #3a3a3a;\n    }\n    &:before {\n        background: #404140;\n    }\n    &:after {\n        right: 10px;\n        top: 5px;\n    }\n}\n\n.account-users {\n    float: right;\n    box-sizing: border-box;\n    width: 50%;\n    select {\n        .border-radius(0px);\n    }\n}\n\n.option-table {\n    // we want the table to not look ugly when stretched across the screen\n    width: auto;\n    // we also want a semi-consistent width, but not too wide for modals\n    min-width: 39em;\n\n    td:not(.empty-data) {\n        // remove default padding from td's so that we can make the label take up the full room\n        padding: 0;\n    }\n    input[disabled] {\n        cursor: not-allowed;\n    }\n    .disabled {\n        label {\n            cursor: default;\n        }\n        span {\n            color: @inputColorDisabled;\n        }\n    }\n    .fillWrapper {\n      box-sizing: border-box;\n      display: inline-block;\n      height: 100%;\n      width: 100%;\n      position: relative;\n\n      label {\n        box-sizing: border-box;\n        width: 100%;\n        height: 100%;\n        padding: @tableCellPadding;\n        cursor: pointer;\n\n        .flexbox();\n        // vertically centered content in label\n        .align-items(center);\n\n        .alignWrapper {\n          .flex(1 1 auto);\n        }\n      }\n    }\n    .option-table-input {\n        text-align: center;\n        line-height: 0;\n    }\n    .current td {\n        color: #3AB661;\n    }\n    // @note KL: I'd like to stick with just adding the background to the <tr>, but\n    // we need to make the selector more specific to override the table-stripe styles.\n    .selected td {\n        background: @tableRowSelected;\n        border-color: #bad4bb;\n        // this 'double' makes it so that the border-color applies to the top border as well\n        // @see http://stackoverflow.com/questions/7942212/css-table-row-border-color-with-border-collapse\n        border-style: double;\n    }\n}\n\n/* Submit buttons */\n\n.form-actions {\n    padding: 20px 0;\n}\n\n.form-action {\n    // override default button styles\n    background: transparent;\n    margin: 0;\n    padding: 0;\n    border: 0;\n    cursor: pointer;\n    font-size: 1.2em;\n\n    &.submit {\n        color: @actionGreen;\n        margin-right: 1em;\n        &:hover,\n        &:focus {\n            color: @actionGreenHover;\n        }\n        &[disabled=\"disabled\"] {\n            color: @subduedText;\n            cursor: not-allowed;\n        }\n    }\n    &.cancel {\n        color: @subduedText;\n        &:hover,\n        &:focus {\n            color: @subduedTextHover;\n        }\n    }\n}\n\n\n/* Compressed Layout */\n\n.rx-form.layout-compressed {\n    .rx-form-row {\n        .flexbox();\n        .flex-wrap(nowrap);\n        .flex(1 auto);\n\n        .form-item {\n            padding: 0px 3px;\n            .flex(1);\n        }\n    }\n\n    .form-item {\n        display: block;\n\n        .field-input {\n            width: 100%;\n            display: block;\n\n            select,\n            textarea {\n                width: 100%;\n            }\n\n            input {\n                &:not([type=\"checkbox\"]),\n                &:not([type=\"radio\"]) {\n                    width: 100%;\n                }\n\n                &[type=\"checkbox\"],\n                &[type=\"radio\"] {\n                  width: 1em;\n                }\n            }\n        }\n\n        .field-label,\n        .field-legend, {\n            font-size: 0.8em;\n            display: block;\n        }\n\n    }\n\n    // This is selecting based off of the element so that we can be sure to set\n    // this if there is a prefix OR a suffix set. We can't assume they'll both\n    // always be there.\n    rx-form-item[suffix],\n    rx-form-item[prefix] {\n        .field-input {\n            display: inline-block;\n            width: auto;\n        }\n    }\n}\n",
            "midway": "var _ = require('lodash');\nvar Page = require('astrolabe').Page;\n\nvar rxForm = require('../rxForm.page').rxForm;\nvar rxOptionFormTable = require('../rxForm.page').rxOptionFormTable;\n\n// shortens the process of selecting form elements on the page object below\nvar elementByLabel = function (label) {\n    return $('rx-form-item[label=\"' + label + '\"]');\n};\n\n// an anonymous page object to prove that form filling works\nvar formPageObject = Page.create({\n\n    form: {\n        set: function (formData) {\n            rxForm.fill(this, formData);\n        }\n    },\n\n    plainTextbox: rxForm.textField.generateAccessor(elementByLabel('Plain textbox').$('input')),\n\n    requireName: rxForm.checkbox.generateAccessor(elementByLabel('Require Name?').$('input')),\n\n    selectBoxes: {\n        get: function () {\n            return Page.create({\n                type: rxForm.dropdown.generateAccessor(element(by.model('volume.type')))\n            });\n        }\n    },\n\n    radioTableObject: {\n        get: function () {\n            return rxOptionFormTable.initialize($('rx-form-option-table[data=\"optionTableData\"]'));\n        }\n    },\n\n    radioTable: rxOptionFormTable.generateAccessor($('rx-form-option-table[data=\"optionTableData\"]')),\n\n    checkboxTableObject: {\n        get: function () {\n            return rxOptionFormTable.initialize($('rx-form-option-table[data=\"optionTableCheckboxData\"]'));\n        }\n    },\n\n    checkboxTable: rxOptionFormTable.generateAccessor($('rx-form-option-table[data=\"optionTableCheckboxData\"]'))\n\n});\n\ndescribe('rxForm', function () {\n\n    before(function () {\n        demoPage.go('#/component/rxForm');\n    });\n\n    describe('form filling', function () {\n        var formData = {\n            plainTextbox: 'This is a plain textbox',\n            requireName: false,\n            selectBoxes: {\n                type: 'PUNCHCARDS'\n            },\n            radioTable: [{ Name: 'Option #2' }],\n            checkboxTable: [{ Name: 'Item 1' }, { Name: 'Item 2' }]\n        };\n\n        before(function () {\n            formPageObject.form = formData;\n        });\n\n        it('should have filled the plainTextbox value', function () {\n            expect(formPageObject.plainTextbox).to.eventually.equal('This is a plain textbox');\n        });\n\n        it('should have unchecked the requireName checkbox', function () {\n            expect(formPageObject.requireName).to.eventually.be.false;\n        });\n\n        it('should have selected the volume type', function () {\n            expect(formPageObject.selectBoxes.type.text).to.eventually.equal('PUNCHCARDS');\n        });\n\n        it('should have selected the second row in the radio option table', function () {\n            expect(formPageObject.radioTable).to.eventually.eql([1]);\n        });\n\n        it('should have selected both rows in the checkbox option table', function () {\n            expect(formPageObject.checkboxTable).to.eventually.eql([0, 1]);\n        });\n\n    });\n\n    describe('rxOptionTable', function () {\n        var optionTable;\n\n        describe('radio', function () {\n            var columnNames = ['Name', 'Static Content', 'Expression 2', 'Expression 3', 'Expression 4'];\n\n            before(function () {\n                optionTable = formPageObject.radioTableObject;\n            });\n\n            it('should not be empty', function () {\n                expect(optionTable.isEmpty()).to.eventually.be.false;\n            });\n\n            it('should not have a \"table empty\" error message', function () {\n                expect(optionTable.emptyMessage).to.eventually.be.null;\n            });\n\n            it('should have all column names', function () {\n                expect(optionTable.columnNames).to.eventually.eql(columnNames);\n            });\n\n            it('should return column data as text by default', function () {\n                var textData = ['$0.00', '$1.00', '$2.00', '$3.00'];\n                expect(optionTable.columnData('Expression 4')).to.eventually.eql(textData);\n            });\n\n            it('should return column data as defined by a custom function', function () {\n                var penniesData = [0, 100, 200, 300];\n                var penniesFn = function (cellElements) {\n                    return cellElements.map(function (cellElement) {\n                        return cellElement.getText().then(rxForm.currencyToPennies);\n                    });\n                };\n\n                expect(optionTable.columnData('Expression 4', penniesFn)).to.eventually.eql(penniesData);\n            });\n\n            it('should select a column by text', function () {\n                optionTable.selectByColumnText('Expression 4', '$2.00');\n                expect(optionTable.selections).to.eventually.eql([2]);\n            });\n\n            describe('rows', function () {\n                var row;\n                var cellData = ['Option #3', 'Some Text & HTML', '200.00', 'NESTED NAME 3', '$2.00'];\n                var rowData = _.zipObject(columnNames, cellData);\n\n                before(function () {\n                    row = optionTable.selectedRow;\n                });\n\n                it('should be selected', function () {\n                    expect(row.isSelected()).to.eventually.be.true;\n                });\n\n                it('should not be the current saved data', function () {\n                    expect(row.isCurrent()).to.eventually.be.false;\n                });\n\n                it('should have the current saved data in the first row', function () {\n                    expect(optionTable.row(0).isCurrent()).to.eventually.be.true;\n                });\n\n                _.forEach(rowData, function (data, column) {\n                    it('should have the correct data in the ' + column + ' column', function () {\n                        expect(row.cell(column)).to.eventually.equal(data);\n                    });\n                });\n\n                it('should have disabled row 4', function () {\n                    expect(optionTable.disabledOptions).to.eventually.eql([3]);\n                });\n\n            });\n\n        });\n\n        describe('checkbox', function () {\n\n            before(function () {\n                optionTable = formPageObject.checkboxTableObject;\n            });\n\n            it('should have two rows selected', function () {\n                expect(optionTable.selections).to.eventually.eql([0, 1]);\n            });\n\n            it('should unselect all rows', function () {\n                optionTable.unselectAll();\n                expect(optionTable.selections).to.eventually.be.empty;\n            });\n\n            it('should select many rows', function () {\n                optionTable.selectMany([{ Name: 'Item 1' }, { Name: 'Item 2' }]);\n                expect(optionTable.selections).to.eventually.eql([0, 1]);\n            });\n\n            it('should unselect many rows', function () {\n                optionTable.unselectMany([{ Name: 'Item 1' }, { Name: 'Item 2' }]);\n                expect(optionTable.selections).to.eventually.be.empty;\n            });\n\n        });\n\n        describe('empty', function () {\n\n            before(function () {\n                optionTable = rxOptionFormTable.initialize($('rx-form-option-table[data=\"optionTableEmptyData\"]'));\n            });\n\n            it('should be empty', function () {\n                expect(optionTable.isEmpty()).to.eventually.be.true;\n            });\n\n            it('should have a \"table empty\" error message', function () {\n                expect(optionTable.emptyMessage).to.eventually.equal('You don\\'t have any data!');\n            });\n\n        });\n\n    });\n\n    describe('dropdown', function () {\n        var dropdown;\n\n        before(function () {\n            dropdown = rxForm.dropdown.initialize(element(by.model('volume.type')));\n        });\n\n        it('should have the right number of options', function () {\n            expect(dropdown.optionCount()).to.eventually.equal(11);\n        });\n\n        it('should have every option listed', function () {\n            var options = ['SATA', 'SSD', 'CD', 'DVD', 'BLURAY', 'TAPE', 'FLOPPY',\n                           'LASERDISC', 'JAZDRIVE', 'PUNCHCARDS', 'RNA'];\n            expect(dropdown.options, 'options').to.eventually.eql(options);\n            expect(dropdown.values, 'values').to.eventually.eql(options);\n        });\n\n        it('should have a selected option by default', function () {\n            expect(dropdown.selectedOption.isSelected()).to.eventually.be.true;\n        });\n\n        it('should not report a different option as selected', function () {\n            expect(dropdown.option('CD').isSelected()).to.eventually.be.false;\n        });\n\n        it('should report non-existing options', function () {\n            expect(dropdown.optionExists('DDR4')).to.eventually.be.false;\n        });\n\n        it('should report existing options', function () {\n            expect(dropdown.optionExists('PUNCHCARD')).to.eventually.be.true;\n        });\n\n        it('should select a new option', function () {\n            dropdown.select('DVD');\n            expect(dropdown.selectedOption.text).to.eventually.equal('DVD');\n        });\n\n        it('should have a value', function () {\n            expect(dropdown.selectedOption.value).to.eventually.equal('DVD');\n        });\n\n    });\n\n    describe('convenience functions', function () {\n\n        describe('currency to pennies', function () {\n            var pennies = rxForm.currencyToPennies;\n\n            it('should convert a single penny to the integer one', function () {\n                expect(pennies('$0.01')).to.equal(1);\n            });\n\n            it('should lose precision when converting a fraction of a penny to an int', function () {\n                expect(pennies('$0.019')).to.equal(1);\n            });\n\n            it('should ignore any dollar type indicators (CAN, AUS, USD)', function () {\n                expect(pennies('$100 CAN')).to.equal(10000);\n            });\n\n            it('should convert negative currency notation to a negative integer', function () {\n                expect(pennies('($100 AUS)')).to.equal(-10000);\n            });\n\n            it('should lose precision when converting negative fractions of a penny to an int', function () {\n                expect(pennies('($1.011)')).to.equal(-101);\n            });\n\n            it('should not incur any binary rounding errors', function () {\n                expect(pennies('$1.10')).to.equal(110);\n            });\n\n        });\n\n    });\n\n});\n\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    },
    {
        "name": "rxIdentity",
        "moduleName": "'encore.ui.rxIdentity'",
        "displayName": "Rx Identity",
        "srcFiles": [
            "src/rxIdentity/rxIdentity.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\"></a></p>\n<p>Service for authenticating with Rackspaces&#39; Identity service</p>\n",
            "js": "/*jshint unused:false*/\nfunction rxIdentityCtrl ($scope, Identity) {\n    $scope.user = {};\n    $scope.login = function () {\n        $scope.toggle = true;\n        Identity.login($scope.user,\n            function (authToken) {\n                $scope.toggle = false;\n                alert('Congrats! Logged In');\n            },\n            function (error) {\n                $scope.toggle = false;\n                alert('Login attempt failed.');\n            });\n    };\n}\n",
            "html": "<!-- Example only works when running locally since rxIdentity requires a proxy -->\n<div ng-controller=\"rxIdentityCtrl\">\n    <form>\n        <label>Username:</label>\n        <input type=\"text\" name=\"username\" ng-model=\"user.username\" />\n        <label>Password:</label>\n        <input type=\"password\" name=\"password\" ng-model=\"user.password\" />\n        <rx-button toggle-msg=\"Authenticating\" default-msg=\"Login\"\n            toggle=\"toggle\" ng-click=\"login()\"></rx-button>\n    </form>\n</div>\n",
            "less": "",
            "midway": "\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    },
    {
        "name": "rxInfoPanel",
        "moduleName": "'encore.ui.rxInfoPanel'",
        "displayName": "Rx Info Panel",
        "srcFiles": [
            "src/rxInfoPanel/rxInfoPanel.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [
            "templates/rxInfoPanel/templates/rxInfoPanel.html"
        ],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/experimental.svg\" alt=\"experimental\"></a></p>\n<p>A generic info panel intended for use at the top of pages. For example:</p>\n<pre><code>&lt;rx-info-panel panel-title=&quot;My title!&quot;&gt;\n    You can put whatever you like in here.\n&lt;/rx-info-panel&gt;\n</code></pre>",
            "js": "",
            "html": "<!-- Sample HTML goes here as a live example of how to the component can be used -->\n<rx-info-panel panel-title=\"A Custom Title\">\n    You can put whatever content you want to inside here\n</rx-info-panel>\n",
            "less": "/*\n * rxInfoPanel\n */\n.info-panel {\n    clear: both;\n    background: #fff;\n    border-color: @tabBorder;\n    border-width: 0 5px 5px 5px;\n    border-style: solid;\n    padding: 0 10px 10px 10px;\n    overflow: hidden;\n\n    .info-title {\n        background: @tabBorder;\n        color: #fff;\n        width: 100%;\n        padding: 8px 10px;\n        margin: 0 0 10px -10px;\n    }\n}\n",
            "midway": "var rxInfoPanelPage = require('../rxInfoPanel.page').rxInfoPanel;\nvar expect = require('chai').use(require('chai-as-promised')).expect;\n\ndescribe('rxInfoPanel', function () {\n    var rxInfoPanel;\n\n    before(function () {\n        demoPage.go('#/component/rxInfoPanel');\n        rxInfoPanel = rxInfoPanelPage.initialize($('.info-panel'));\n    });\n\n    it('should show element', function () {\n        expect(rxInfoPanel.isDisplayed()).to.eventually.be.true;\n    });\n\n    it('should populate the title', function () {\n        expect(rxInfoPanel.title).to.eventually.equal('A Custom Title');\n    });\n});\n\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    },
    {
        "name": "rxLocalStorage",
        "moduleName": "'encore.ui.rxLocalStorage'",
        "displayName": "Rx Local Storage",
        "srcFiles": [
            "src/rxLocalStorage/rxLocalStorage.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\"></a></p>\n<p>Simple wrapper of the global session localStorage object for interacting with local storage.</p>\n",
            "js": "function rxLocalStorageCtrl ($scope, LocalStorage) {\n    $scope.setSideKick = function () {\n        LocalStorage.setObject('joker', { name: 'Harley Quinn' });\n    };\n\n    $scope.getSideKick = function () {\n        var sidekick = LocalStorage.getObject('joker');\n        alert(sidekick.name);\n    };\n}\n",
            "html": "<div ng-controller=\"rxLocalStorageCtrl\">\n    <label>Who is the Joker's side kick?</label>\n    <button ng-click=\"setSideKick()\" class=\"button button-positive\">Store Answer</button>\n    <button ng-click=\"getSideKick()\" class=\"button\">Answer?</button>\n</div>\n",
            "less": "",
            "midway": "\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    },
    {
        "name": "rxLogout",
        "moduleName": "'encore.ui.rxLogout'",
        "displayName": "Rx Logout",
        "srcFiles": [
            "src/rxLogout/rxLogout.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [
            "rxAuth",
            "rxIdentity",
            "rxSession",
            "rxLocalStorage",
            "rxPermission",
            "rxSession",
            "rxLocalStorage"
        ],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/stable.svg\" alt=\"stable\"></a></p>\n<p>Allows adding logout functionality to an element</p>\n",
            "js": "",
            "html": "<div>\n    <button rx-logout id=\"rxLogout\">Logout</button>\n    <button rx-logout=\"/overview\">Logout (with custom redirect)</button>\n</div>",
            "less": "",
            "midway": "var rxLogoutPage = require('../rxLogout.page').rxLogout;\n\ndescribe('rxLogout', function () {\n    var rxLogout;\n\n    before(function () {\n        demoPage.go('#/component/rxLogout');\n        rxLogout = rxLogoutPage.initialize($('#rxLogout'));\n    });\n\n    it('should show element', function () {\n        expect(rxLogout.isDisplayed()).to.eventually.be.true;\n    });\n\n    it('should redirect to logout/login page on click', function () {\n        rxLogout.logout();\n        expect(demoPage.currentUrl).to.eventually.contain('login');\n    });\n});\n\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    },
    {
        "name": "rxMisc",
        "moduleName": "'encore.ui.rxMisc'",
        "displayName": "Rx Misc",
        "srcFiles": [
            "src/rxMisc/rxMisc.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [
            "rxSessionStorage"
        ],
        "docs": {
            "md": "<p>A module for shared functionality across framework components.</p>\n<h2>rxDOMHelper</h2>\n<p>A small set of functions to provide some functionality that isn&#39;t present in Angular&#39;s jQuery-lite, and other useful DOM-related functions.</p>\n<h2>titleize</h2>\n<p>A filter that converts a string to title case, stripping out underscores and capitalizing words.  For example,</p>\n<pre><code>{{ &#39;a simple_STRING&#39; | titleize }}\n</code></pre><p>renders the string &quot;A Simple String&quot;.</p>\n<h2>rxAutoSave</h2>\n<p><code>rxAutoSave</code> provides a way to store values in a form for later. For instance, if a user is entering values into a form, then accidentally navigate to a new page, we likely want the values to be present again when they click the &quot;Back&quot; button in their browser. By correctly setting up an <code>rxAutoSave</code> instance for the form, this can happen automatically. By default, all saved values will be cleared after two days.</p>\n<p><code>rxAutoSave</code> is a service intended to be used in controllers. No directives are provided. The intent is that the HTML forms themselves will have no knowledge that their values are being saved. <code>rxAutoSave</code> operates by doing a <code>$watch</code> on the model values for a given form, storing those model values whenever they change, and loading them on instantation.</p>\n<p>The stored data is keyed on the page URL. This means you can track the form state for multiple pages simultaneously. For example, say you have an &quot;Edit&quot; form. The user has gone to edit some values for &quot;Server1&quot;, at <code>&quot;/servers/server1/edit&quot;</code>, and for &quot;Server2&quot; at <code>&quot;/servers/server2/edit&quot;</code>. The edit progress for both servers will be saved independently of each other. <code>rxAutoSave</code> will also let you independently store values for multiple forms appearing on the same page.</p>\n<p>By default, all values are stored in the browser&#39;s <code>LocalStorage</code>. This means that if a user logs into a different computer, their stored values will not be present. Use of <code>SessionStorage</code> is also supported out-of-the-box. If you wish to save form states elsewhere (for instance, to an API), see the &quot;Storage Location&quot; section below. </p>\n<h3>Setting up your template</h3>\n<p>Nothing explicit needs to be done in your templates to add support for <code>rxAutoSave</code>. The only requirement is that all the <code>ng-model</code> values in a given form are stored within one object (<code>formData</code> below). For example, say you have the following form in your template:</p>\n<pre><code>    &lt;form name=&quot;demoForm&quot;&gt;\n        &lt;rx-form-item label=&quot;A checkbox field!&quot;&gt;\n            &lt;input type=&quot;checkbox&quot; ng-model=&quot;formData.checkbox&quot; /&gt;\n        &lt;/rx-form-item&gt;\n\n        &lt;rx-form-item label=&quot;Name&quot;&gt;\n            &lt;input type=&quot;text&quot; ng-model=&quot;formData.name&quot;/&gt;\n        &lt;/rx-form-item&gt;\n\n        &lt;rx-form-item label=&quot;Description&quot;&gt;\n            &lt;textarea rows=&quot;10&quot; cols=&quot;50&quot; ng-model=&quot;formData.description&quot;&gt;&lt;/textarea&gt;\n        &lt;/rx-form-item&gt;\n\n    &lt;/form&gt;\n</code></pre><p>Note that all the models for the form are attributes of the <code>formData</code> scope variable.</p>\n<h3>Setting up your controller</h3>\n<p>In your controller, you would have something like this in your initialization:</p>\n<pre><code>    $scope.formData = {\n        checkbox: false,\n        name: &#39;&#39;,\n        description: &#39;&#39;\n    };\n</code></pre><p>By default, every time this page was loaded, the form would be initialized with an unchecked checkbox, a blank <code>Name</code> field and a blank <code>Description</code>.</p>\n<p>To have <code>rxAutoSave</code> automatically save values, first inject <code>rxAutoSave</code> into your controller, and modify initialization as follows:</p>\n<pre><code>    $scope.formData = {\n        checkbox: false,\n        name: &#39;&#39;,\n        description: &#39;&#39;\n    };\n\n    var autosave = rxAutoSave($scope, &#39;formData&#39;);\n</code></pre><p>And that&#39;s it! Your <code>rxAutoSave</code> instance will watch for any change to <code>$scope.formData</code>, and will automatically write those changes to <code>LocalStorage</code>. </p>\n<p>A third argument can be passed to <code>rxAutoSave</code>, specifying usage options. The default values for these options are:</p>\n<pre><code>    var autosave = rxAutoSave($scope, &#39;formData&#39;, {\n      clearOnSuccess: null,        // Promise\n      ttl: 172800,                 // Integer (seconds) - two days default\n      load: true,                  // Boolean or Promise that will resolve with a Boolean\n      save: true,                  // Boolean or Promise that will resolve with a Boolean\n      exclude: [],                 // Array&lt;String&gt;\n      storageBackend: LocalStorage // Object\n    });\n</code></pre><p>All of these options will be described below.</p>\n<h3>Multiple Forms on one page</h3>\n<p><code>rxAutoSave</code> supports independently saving multiple forms on one page. To do this, have each form&#39;s model in its own object, and create individual <code>rxAutoSave</code> instances for each. i.e.:</p>\n<pre><code>    $scope.form1Data = {\n        checkbox: false,\n        name: &#39;&#39;,\n        description: &#39;&#39;\n    };\n\n    $scope.form2Data = {\n        customerName: &#39;&#39;,\n        birthday: &#39;&#39;\n    };\n\n    var autosave1 = rxAutoSave($scope, &#39;form1Data&#39;);\n    var autosave2 = rxAutoSave($scope, &#39;form2Data&#39;);\n</code></pre><h3>Clearing values</h3>\n<p>If you need to clear the stored values, you can call <code>autosave.clear()</code>. This will clear the values from <code>LocalStorage</code>, but won&#39;t affect your <code>$scope.formData</code> values.</p>\n<p>More likely, rather than manually calling <code>autosave.clear()</code>, you&#39;d like the values to be cleared on a &quot;successful submit&quot;. For example, if your user is editing the form described above, and they click a &quot;Submit&quot; button to send the values to a server, <code>LocalStorage</code> should be cleared for this form if the server call is a success.</p>\n<p>To do this, pass an &quot;options&quot; parameter as the third argument to <code>rxAutoSave</code>, setting a promise on the <code>clearOnSuccess</code> attribute, i.e.</p>\n<pre><code>    var autosave = rxAutoSave($scope, &#39;formData&#39;, { clearOnSuccess: serverSubmitPromise });\n</code></pre><p>If the <code>serverSubmitPromise</code> resolves, then <code>rxAutoSave</code> will automatically clear the stored values for <code>formData</code> on this page.</p>\n<p>When instantiating your controller, there&#39;s a good chance that the <code>clearOnSuccess</code> promise you&#39;re interested in doesn&#39;t actually exist yet, i.e. if you want to clear on a successfull submit, you need the submit <code>promise</code>. Instances of <code>rxAutoSave</code> provide a <code>clearOnSuccess()</code> method to accept this promise after instantiation:</p>\n<pre><code>    var autosave = rxAutoSave($scope, &#39;formData&#39;);\n\n    // Take some other actions\n    ...\n\n    $scope.onSubmit = function () {\n        // Server.save() is some $resource that returns a promise\n        var promise = Server.save($scope.formData);\n        autosave.clearOnSuccess(promise);\n    }\n</code></pre><h3>Automatic expiry</h3>\n<p>Another way to automatically clear values is to set an explict Time-To-Live (TTL) when instantiating your <code>rxAutoSave</code> instance. This is done with the <code>ttl</code> property of the <code>opts</code> object,</p>\n<pre><code>    // Automatically expire after 24 hours\n    var autosave = rxAutoSave($scope, &#39;formData&#39;, { ttl: 86400 });\n</code></pre><p>By default, a <code>ttl</code> of <code>172800</code> (two days) is used.</p>\n<p>The <code>ttl</code> property takes a length of time in seconds. Whenever something in <code>formData</code> changes, the expiry time will be freshly set. With the example above, whenever <code>formData</code> is changed, the new expiry time will be set to 24 hours from the time of the change. In addition, we freshly set the expiry time whenever the data is loaded. If <code>formData</code> is 12 hours away from expiring, and the user visits the page again, then the expiry will be freshly set to a new 24 hours, whether or not the user makes a change.</p>\n<p>If a user visits a page after the data has expired, the data will be cleared from storage and not automatically loaded. (i.e. we&#39;re not running a continuous background process to look for expired data, we only check for expiration the next time <code>rxAutoSave</code> tries to load the data).</p>\n<p>To turn off automatic expiry for a given form, pass a value of <code>{ ttl: 0 }</code>. In this case, the data will never expire. You will have to clear it at an appropriate time by using one of the methods mentioned above.</p>\n<h3>Preventing automatic loading</h3>\n<p>If you need to prevent <code>rxAutoSave</code> from automatically loading stored values, you can again use the optional third parameter, this time setting <code>load: false</code>, i.e.</p>\n<pre><code>    var autosave = rxAutoSave($scope, &#39;formData&#39;, { load: false });\n</code></pre><p><code>load:</code> will accept a boolean, or it can accept a promise that eventually resolves to a boolean. Accepting a promise will let you delay your decision on whether or not to load (for example, asking a user if they want values loaded). Note that if you use a promise, <code>rxAutoSave</code> will look at its resolved value. If the resolved value is <code>true</code>, then the data will be loaded. If the resolved value is <code>false</code>, or the promise fails/rejects, then the data will not be loaded.</p>\n<h3>Excluding some values from loading/saving</h3>\n<p>By default, <code>rxAutoSave</code> automatically loads and saves all the stored values for a form. If you want to prevent it from loading/saving <em>some</em> values, you can do:</p>\n<pre><code>    var autosave = rxAutoSave($scope, &#39;formData&#39;, { exclude: [&#39;description&#39;] });\n</code></pre><p>This will tell <code>rxAutoSave</code> not to load from or save to the stored <code>description</code> value, but everything else in <code>formData</code> will be loaded/saved.</p>\n<h3>Manual saving</h3>\n<p>It might be that you don&#39;t want your <code>rxAutoSave</code> instance to automatically save to the storage backend automatically. In some cases, you might want to disable automatic saving and instead manually tell your instance when it should save. To turn off automatic saving, set up your instance as follows:</p>\n<pre><code>    var manualsave = rxAutoSave($scope, &#39;formData&#39;, { save: false });\n</code></pre><p>Then, whenever you want your <code>autosave</code> instance to commit the current model values to storage, do</p>\n<pre><code>    manualsave.save();\n</code></pre><p>As with the <code>load</code> parameter, you can pass either a boolean or a promise to <code>save</code>.</p>\n<h3>Storage location</h3>\n<p>All values for <code>rxAutoSave</code> are by default stored in the browser&#39;s <code>LocalStorage</code>, and keyed on the URL of the page, with a <code>rxAutoSave::</code> prefix. For example, if the above form were present at the URL <code>&#39;users/JonnyRocket/edit&#39;</code>, then the form data would be saved into <code>LocalStorage</code> at location <code>&#39;rxAutoSave::users/JonnyRocket/edit&#39;</code> </p>\n<p>If you wish to use a different storage backend (<code>SessionStorage</code>, for instance), use the <code>storageBackend</code> parameter:</p>\n<pre><code>    var autosave = rxAutoSave($scope, &#39;formData&#39;, { storageBackend: SessionStorage });\n</code></pre><p><code>storageBackend</code> requires that you pass it an object which has <code>getObject(key)</code> and <code>setObject(key, val)</code> methods. <code>LocalStorage</code> and <code>SessionStorage</code> are both provided by EncoreUI, and support this interface.</p>\n<p>You can use your own custom backends as well, as long as it supports <code>getObject(key)</code> and <code>setObject(key, val)</code>.</p>\n<h3>Custom Storage Key Values</h3>\n<p>Sometimes, it may be necessary to change how a key is formed for the specified <code>storageBackend</code>. As previously stated, these are calculated by prepending <code>&#39;rxAutoSave::&#39;</code> before the url. You can override this by passing in a <code>keyShaping</code> function to the options object.</p>\n<p>An example one would be as follows:</p>\n<pre><code>    var autosave = rxAutoSave($scope, &#39;formData&#39;, {\n        keyShaping: function (key) {\n            return key.replace(&#39;?cache=false&#39;, &#39;&#39;);\n        }\n    });\n</code></pre><p>The above example could be used to have the current url ignore any caching flags passed in. The <code>keyShaping</code> function will receive the default calculated key (<code>rxAutoSave::</code> + $location.url()). By default, <code>keyShaping</code> just returns the original calculated key.</p>\n",
            "js": "function rxMiscCtrl ($scope, $timeout, $q, rxNotify, rxAutoSave) {\n    $scope.formData = {\n        checkbox: false,\n        name: '',\n        description: '',\n        sensitive: ''\n    };\n\n    var autosave = rxAutoSave($scope, 'formData', {\n        exclude: ['sensitive'],\n        ttl: 86400000\n    });\n\n    $scope.status = {\n        loading: false,\n        disable: false,\n        deferredLoading: false,\n        deferredDisable: false\n    };\n\n    // Clear with an explicit autosave.clear() call\n    $scope.clearStorage = function () {\n        $scope.status.loading = true;\n        $timeout(function () {\n            $scope.status.loading = false;\n            autosave.clear();\n            rxNotify.add(\"rxAutoSave data has been cleared! Navigate away and return, and the form won't be auto-populated\", {\n                type: 'success'\n            });\n        }, 1000);\n    };\n\n    // Clear by resolving the associated promise\n    $scope.deferredClear = function () {\n        var deferred = $q.defer();\n\n        autosave.clearOnSuccess(deferred.promise);\n        $scope.status.deferredLoading = true;\n\n        $timeout(function () {\n            $scope.status.deferredLoading = false;\n            deferred.resolve();\n            rxNotify.add(\"rxAutoSave data has been cleared! Navigate away and return, and the form won't be auto-populated\", {\n                type: 'success'\n            });\n        }, 1000);\n    };\n}\n",
            "html": "<div ng-controller=\"rxMiscCtrl\">\n    <h2 class=\"title\">Form with automatically saved state</h2>\n    <p>\n        Try entering some data into this form, and then navigating away to a different page. When you return here,\n        the form data will automatically be populated with what you had previously entered.\n    </p>\n    <p>\n        Once you've tried that, you can clear the stored data with either of the \"Clear\" buttons below. Clicking those\n        will <em>not</em> erase the form, but will erase the rxAutoSave stored data. If you navigate away after clicking\n        one of the buttons, and then return here, the form will not be auto-populated, because rxAutoSave will have no data for it!\n    </p>\n\n    <p>\n        Finally, we have set a Time-To-Live of 24 hours for this form, and explicitly told it not to save the \"Sensitive data\" field\n        into storage. If you enter data here, and come back &gt;24 hours later, the form will not be auto-populated, as the data will\n        have expired.\n    </p>\n    <form name=\"demoForm\">\n            <rx-form-item label=\"A checkbox field!\">\n                <input type=\"checkbox\" ng-model=\"formData.checkbox\" />\n            </rx-form-item>\n\n            <rx-form-item label=\"Name\">\n                <input type=\"text\" ng-model=\"formData.name\"/>\n            </rx-form-item>\n\n            <rx-form-item label=\"Description\">\n                <textarea rows=\"10\" cols=\"50\" ng-model=\"formData.description\"></textarea>\n            </rx-form-item>\n        \n            <rx-form-item label=\"Sensitive data\" description=\"We'll tell rxAutoSave not to save this data\">\n                <input type=\"text\" ng-model=\"formData.sensitive\"/>\n            </rx-form-item>\n    </form>\n\n    <rx-button\n        ng-click=\"clearStorage()\"\n        toggle=\"status.loading\"\n        default-msg=\"Clear rxAutoSave\"\n        toggle-msg=\"Clearing rxAutoSave data\"\n        disable=\"status.disable\">\n    </rx-button>\n    \n    <rx-button\n        ng-click=\"deferredClear()\"\n        toggle=\"status.deferredLoading\"\n        default-msg=\"Clear rxAutoSave by resolving a promise\"\n        toggle-msg=\"Clearing rxAutoSave data\"\n        disable=\"status.deferredDisable\">\n    </rx-button>\n</div>\n",
            "less": "",
            "midway": "var _ = require('lodash');\nvar Page = require('astrolabe').Page;\n\nvar rxForm = require('../../rxForm/rxForm.page').rxForm;\nvar rxNotify = require('../../rxNotify/rxNotify.page').rxNotify;\n\n// \"wait\" for autosave to clear -- function passed to `browser.wait`\nvar forAutoSaveToClear = function () {\n    return rxNotify.all.exists('rxAutoSave data has been cleared!');\n};\n\n// anonymous page object\nvar autoSaving = Page.create({\n\n    form: {\n        set: function (formData) {\n            rxForm.form.fill(this, formData);\n        }\n    },\n\n    chkAutoSaves: {\n        get: function () {\n            return element(by.model('formData.checkbox'));\n        }\n    },\n\n    checkbox: {\n        get: function () {\n            return rxForm.checkbox.initialize(this.chkAutoSaves).isSelected();\n        },\n        set: function (enable) {\n            var checkbox = rxForm.checkbox.initialize(this.chkAutoSaves);\n            enable ? checkbox.select() : checkbox.unselect();\n        }\n    },\n\n    txtName: {\n        get: function () {\n            return element(by.model('formData.name'));\n        }\n    },\n\n    name: {\n        get: function () {\n            return this.txtName.getAttribute('value');\n        },\n        set: function (input) {\n            this.txtName.clear();\n            this.txtName.sendKeys(input);\n        }\n    },\n\n    txtDescription: {\n        get: function () {\n            return element(by.model('formData.description'));\n        }\n    },\n\n    description: {\n        get: function () {\n            return this.txtDescription.getAttribute('value');\n        },\n        set: function (input) {\n            this.txtDescription.clear();\n            this.txtDescription.sendKeys(input);\n        }\n    },\n\n    txtSensitive: {\n        get: function () {\n            return element(by.model('formData.sensitive'));\n        }\n    },\n\n    sensitiveData: {\n        get: function () {\n            return this.txtSensitive.getAttribute('value');\n        },\n        set: function (input) {\n            this.txtSensitive.clear();\n            this.txtSensitive.sendKeys(input);\n        }\n    },\n\n    clearAutoSave: {\n        value: function () {\n            element(by.buttonText('Clear rxAutoSave')).click();\n            browser.wait(forAutoSaveToClear);\n        }\n    },\n\n    clearAutoSaveWithPromise: {\n        value: function () {\n            element(by.buttonText('Clear rxAutoSave by resolving a promise')).click();\n            browser.wait(forAutoSaveToClear);\n        }\n    }\n\n});\n\ndescribe('rxMisc', function () {\n\n    before(function () {\n        demoPage.go('#/component/rxMisc');\n    });\n\n    describe('rxAutoSave', function () {\n        var autoSavedData = {\n            checkbox: true,\n            name: 'Canadian Armed Forces',\n            description: ['Using snow as cover, leap from your hiding spot to',\n                          'surprise your enemy in a display of tactical brilliance.',\n                          'In order to prevent your outfit from soaking',\n                          '(later risking hypothermia) you must wear the least',\n                          'amount of clothes possible to stay dry through the night.'].join(' '),\n            sensitiveData: 'Only Jay Parlar knows where the Candian Armed Forces lie in wait!'\n        };\n\n        var leavePage = function () {\n            demoPage.go('#/component/rxPaginate');\n            demoPage.go('#/component/rxMisc');\n        };\n\n        before(function () {\n            autoSaving.form = autoSavedData;\n            leavePage();\n        });\n\n        _.forEach(autoSavedData, function (data, property) {\n            it('should remember the form data for ' + property, function () {\n                if (property === 'sensitiveData') {\n                    expect(autoSaving[property]).to.eventually.equal('');\n                } else {\n                    expect(autoSaving[property]).to.eventually.equal(data);\n                }\n            });\n        });\n\n        describe('should clear auto saved data', function () {\n\n            before(function () {\n                autoSaving.clearAutoSave();\n                leavePage();\n            });\n\n            _.forEach(_.keys(autoSavedData), function (property) {\n                it('should not remember the form data for ' + property, function () {\n                    expect(autoSaving[property]).to.eventually.be.not.ok;\n                });\n            });\n\n        });\n\n        describe('should clear auto saved data with a promise', function () {\n\n            before(function () {\n                autoSaving.form = autoSavedData;\n                autoSaving.clearAutoSaveWithPromise();\n                leavePage();\n            });\n\n            _.forEach(_.keys(autoSavedData), function (property) {\n                it('should not remember the form data for ' + property, function () {\n                    expect(autoSaving[property]).to.eventually.be.not.ok;\n                });\n            });\n\n        });\n\n    });\n\n});\n\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    },
    {
        "name": "rxModalAction",
        "moduleName": "'encore.ui.rxModalAction'",
        "displayName": "Rx Modal Action",
        "srcFiles": [
            "src/rxModalAction/rxModalAction.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [
            "templates/rxModalAction/templates/rxModalAction.html",
            "templates/rxModalAction/templates/rxModalActionForm.html",
            "templates/rxModalAction/templates/rxModalFooters.html"
        ],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/stable.svg\" alt=\"stable\"></a></p>\n<p>This provides a hook into Angular-UI Bootstrap&#39;s modal directive. It&#39;s used as a link to open a modal window.The content inside the window is blank, however you can tie this with <code>&lt;rx-modal-form&gt;</code> to build a modal form window (including the modal title and submit/cancel buttons).</p>\n<p>This module has a dependency on <a href=\"http://angular-ui.github.io/bootstrap/\">Angular-UI Bootstrap</a>, so if it&#39;s going to be used, Bootstrap needs to be included in your webpage.</p>\n<h2>Template URL</h2>\n<p>Due to the complex nature of the information passed into modal windows, HTML is handled via a template (versus transcluding the content).</p>\n<p>One benefit is that this allows for multiple actions to re-use the same template. It also allows modal content to live in a separate file, which can be helpful for maintainability if the modal HTML is complex. While this can be done via <code>ng-include</code>, it would be a little extra work for a common scenario.</p>\n<h2>Pre/Post Hooks</h2>\n<p><code>rxModalAction</code> allows you to take actions before and after the modal window is shown. They are optional, and the modal window is fully functional without either being defined. Both are passed in as functions that are called on open and close of the modal window.</p>\n<h3>Pre-hook</h3>\n<p>Use a <code>pre-hook</code> to populate field information inside of the modal. This is useful when you have information you don&#39;t want loaded when the page is first opened, but do need for the modal. It&#39;s also useful for dynamic information that&#39;s based on actions taken</p>\n<h3>Post-hook</h3>\n<p>A <code>post-hook</code> is useful to take actions based upon input in the modal. For example, you can use the user input that gets entered to send API requests with specific JSON data. Or you can simply run a pre-defined API call (assuming the modal is a simple confirmation dialog).</p>\n<h2>rxModalForm</h2>\n<p>The <code>&lt;rx-modal-form&gt;</code> directive is helpful for providing a common format to forms inside modals (hence the name). It allows the following configurations:</p>\n<ul>\n<li>Title</li>\n<li>Subtitle</li>\n<li>isLoading - whether the modal form should have a &#39;loading&#39; message by default. This is usually tied in with a <code>pre-hook</code> to load data</li>\n<li>submitText - Override of the &#39;submit&#39; button text</li>\n<li>cancelText - Override of the &#39;cancel&#39; button text</li>\n<li>returnText - Override of the &#39;return&#39; button text</li>\n</ul>\n<p>This directive also provides an &#39;autofocus&#39; mechanism, which will move the keyboard focus cursor to the first &#39;tabbable&#39; input available in the form.</p>\n<h2>rxModalFooter</h2>\n<p>When a modal has multiple views or kicks off a process that should be tracked within the modal, the <code>&lt;rx-modal-footer&gt;</code> directive should be used.  Its attributes are:</p>\n<ul>\n<li>state</li>\n<li>global - This is just a flag and takes no value.</li>\n</ul>\n<p>Modal Footers should be defined in the same template as the Modal Form unless the footer is global, in which case it should be loaded in <code>module.run()</code>.  Global footers can be used in any subsequent modal by changing to the state they were defined with.</p>\n<p>The modal&#39;s controller also inherits the <code>setState()</code> method on the scope, which should be used to toggle different views or footers. See the Multi-View Example of this design pattern&#39;s usage.\nThe default <code>editing</code> state shows the standard submit and cancel buttons, and the only other state provided by the framework is <code>complete</code> (showing the return button).</p>\n",
            "js": "/*jshint unused:false*/\nfunction rxModalActionCtrl ($scope) {\n    $scope.password = 'guest';\n\n    $scope.populate = function (modalScope) {\n        modalScope.user = 'hey_dude';\n    };\n\n    $scope.changePass = function (fields) {\n        $scope.password = fields.password;\n    };\n}\n\nfunction rxModalStateCtrl ($scope, $modalInstance, $timeout, rxNotify) {\n    function complete () {\n        $scope.loaded = true;\n        $scope.setState('complete');\n        rxNotify.add('Operation Success!', {\n            stack: 'modal',\n            type: 'success'\n        });\n    }\n\n    $scope.submit = function () {\n        $scope.setState('confirm');\n    };\n\n    $scope.confirm = function () {\n        $scope.loaded = false;\n        $scope.setState('pending');\n        rxNotify.add('Performing Operation...', {\n            stack: 'modal',\n            loading: true,\n            dismiss: [$scope, 'loaded']\n        });\n        $timeout(complete, 2000);\n    };\n\n    $scope.cancel = function () {\n        rxNotify.clear('modal');\n        $modalInstance.dismiss();\n    };\n}\n",
            "html": "<!-- Sample HTML goes here as a live example of how to the component can be used -->\n<div ng-controller=\"rxModalActionCtrl\">\n    <p>Password: {{password}}</p>\n    <p>\n        <rx-modal-action\n            pre-hook=\"populate(this)\"\n            post-hook=\"changePass(fields)\"\n            classes=\"button\"\n            template-url=\"changePassword.html\">\n            Change Password\n        </rx-modal-action>\n    </p>\n\n    <p>\n        <rx-modal-action\n            classes=\"button\"\n            controller=\"rxModalStateCtrl\"\n            template-url=\"multiview.html\"\n            disable-esc>\n            Multi-View Example\n        </rx-modal-action>\n    </p>\n\n    <script type=\"text/ng-template\" id=\"changePassword.html\">\n        <rx-modal-form title=\"Change {{user}} Admin Password\"\n            submit-text=\"Submit Password\"\n            cancel-text=\"Cancel Request\"\n            subtitle=\"Please read instructions below\">\n            <h1>Password must:</h1>\n            <ul class=\"list\">\n                <li>have at least one uppercase letter</li>\n                <li>have at least one number</li>\n                <li>be inspirational</li>\n                <li>be in haiku form</li>\n                <li>reference Star Wars</li>\n            </ul>\n\n            <rx-form-item label=\"New Password\">\n                <input type=\"text\" name=\"password\" ng-model=\"fields.password\" required=\"true\">\n                <div class=\"error-message\" ng-show=\"modalActionForm.password.$error.required\">This field is required.</div>\n            </rx-form-item>\n        </rx-modal-form>\n    </script>\n\n    <script type=\"text/ng-template\" id=\"multiview.html\">\n        <rx-modal-form title=\"State-Changing Modal\"\n            submit-text=\"Send Request\"\n            return-text=\"Finish &amp; Close\">\n            <rx-notifications stack=\"modal\"></rx-notifications>\n            <div ng-switch=\"state\">\n                <div ng-switch-when=\"editing\">\n                    <p>Press \"Send Request\" to start the fake process.</p>\n                </div>\n                <div ng-switch-when=\"confirm\">\n                    <h3 class=\"title\">Are you sure you want to continue?</h3>\n                    <p>This action cannot be undone.</p>\n                </div>\n                <p ng-switch-when=\"pending\">Man, this takes forever!</p>\n                <p ng-switch-when=\"complete\">Nothing left to do here.</p>\n            </div>\n        </rx-modal-form>\n\n        <rx-modal-footer state=\"confirm\">\n            <button class=\"button\" ng-click=\"confirm()\">Yes</button>\n            <button class=\"button cancel\" ng-click=\"setState('editing')\">No</button>\n        </rx-modal-footer>\n    </script>\n\n</div>\n",
            "less": "@import 'mixins';\n@import 'vars';\n\n/**\n * rxModalAction.less\n *\n * Stylesheet for modals, repurposed from the modal component of http://angular-ui.github.io/bootstrap\n *\n * @version 1.0\n * @author Ernie Hsiung\n */\n\n.modal,\n.modal-backdrop {\n    .transition();\n    .opacity(0);\n    &.fade.in {\n        .opacity(1);\n    }\n}\n\n.modal-backdrop {\n    position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    z-index: 1040;\n    background: #000;\n    &.fade.in {\n        .opacity(0.4);\n    }\n}\n\n.modal {\n    position: absolute;\n    top: 10%;\n    left: 50%;\n    z-index: 1050;\n    width: 560px;\n    background: @white;\n    border: 1px solid rgba(0, 0, 0, 0.3);\n    transform: translate(-50%, 0);\n    -webkit-transform: translate(-50%, 0);\n    -moz-transform: translate(-50%, 0);\n    .box-shadow(0 3px 7px rgba(0, 0, 0, 0.3));\n    .background-clip();\n    outline: none;\n}\n\n.modal-header {\n    padding: @modalPadding;\n    border-bottom: 1px solid @pageDivider;\n    position: relative;\n\n    .modal-title {\n        line-height: 1;\n        font-size: 1.75em;\n        margin: 0;\n    }\n    .modal-subtitle {\n        line-height: 1.5;\n        font-size: 1em;\n        font-wieght: bold;\n        color: @subduedTitle;\n        margin: 0;\n    }\n    .modal-close {\n        position: absolute;\n        top: @modalPadding;\n        right: @modalPadding;\n        font-size: 2em;\n        width: 1em;\n        height: 1em;\n        text-align: center;\n        color: @closeText;\n        &:hover,\n        &:focus {\n            color: @closeTextHover;\n        }\n\n        &:before {\n            content: '\\00D7';\n            position: absolute;\n            line-height: 0;\n            right: 0;\n            width: 1em;\n        }\n    }\n}\n.modal-body {\n    position: relative;\n    overflow-y: auto;\n    max-height: 400px;\n    padding: @modalBodyPadding @modalPadding;\n\n    .loading {\n        margin: 0 auto;\n        width: 1em;\n    }\n\n    .form-radio {\n        border: 0;\n    }\n\n    .rx-form.modal-form {\n        margin: 0;\n    }\n}\n\n.modal-footer {\n    padding: @modalPadding;\n    border-top: 1px solid @pageDivider;\n}\n\n@media (max-width:480px) {\n    @padding: 10px;\n    .modal {\n        position: absolute;\n        top: @padding;\n        left: @padding;\n        right: @padding;\n    }\n    .modal-header .close{\n        padding: @padding;\n        margin: -@padding;\n    }\n}\n",
            "midway": "var modal = require('../rxModalAction.page').rxModalAction;\nvar rxForm = require('../../rxForm/rxForm.page').rxForm;\n\ndescribe('rxModalAction', function () {\n    var changePasswordModal, triggerModal;\n\n    before(function () {\n        demoPage.go('#/component/rxModalAction');\n        triggerModal = function () {\n            rxForm.slowClick($('.component-demo .modal-link'));\n        };\n\n        var customFunctionalty = {\n            txtNewPassword: {\n                get: function () {\n                    return this.rootElement.element(by.model('fields.password'));\n                }\n            },\n\n            txtErrorMessage: {\n                get: function () {\n                    return this.rootElement.$('.error-message');\n                }\n            },\n\n            newPassword: {\n                get: function () {\n                    return this.txtNewPassword.getAttribute('value');\n                },\n                set: function (password) {\n                    this.txtNewPassword.clear();\n                    this.txtNewPassword.sendKeys(password);\n                }\n            }\n        };\n\n        changePasswordModal = modal.initialize(customFunctionalty);\n    });\n\n    it('should not display the modal unless triggered', function () {\n        expect(changePasswordModal.isDisplayed()).to.eventually.be.false;\n    });\n\n    it('should display the modal when triggered', function () {\n        triggerModal();\n        expect(changePasswordModal.isDisplayed()).to.eventually.be.true;\n    });\n\n    it('should close the modal using the little X in the corner', function () {\n        changePasswordModal.close();\n        expect(changePasswordModal.isDisplayed()).to.eventually.be.false;\n    });\n\n    it('should close the modal when clicking the \"cancel\" button', function () {\n        triggerModal();\n        changePasswordModal.cancel();\n        expect(changePasswordModal.isDisplayed()).to.eventually.be.false;\n    });\n\n    it('should have a title', function () {\n        triggerModal();\n        expect(changePasswordModal.title).to.eventually.equal('Change hey_dude Admin Password');\n    });\n\n    it('should have a subtitle', function () {\n        expect(changePasswordModal.subtitle).to.eventually.equal('Please read instructions below');\n    });\n\n    it('should have a custom submit button', function () {\n        expect(changePasswordModal.btnSubmit.getText()).to.eventually.equal('Submit Password');\n    });\n\n    it('should have a custom cancel button', function () {\n        expect(changePasswordModal.btnCancel.getText()).to.eventually.equal('Cancel Request');\n    });\n\n    it('should not let me submit the modal by default', function () {\n        expect(changePasswordModal.canSubmit()).to.eventually.be.false;\n    });\n\n    it('should show a validation error message by default', function () {\n        expect(changePasswordModal.txtErrorMessage.isDisplayed()).to.eventually.be.true;\n    });\n\n    it('should let me submit the modal when a new password is entered', function () {\n        changePasswordModal.newPassword = 'hunter2';\n        expect(changePasswordModal.canSubmit()).to.eventually.be.true;\n    });\n\n    it('should hide the validation error message when a new password is entered', function () {\n        expect(changePasswordModal.txtErrorMessage.isDisplayed()).to.eventually.be.false;\n    });\n\n    it('should submit', function () {\n        changePasswordModal.submit();\n        expect(changePasswordModal.isDisplayed()).to.eventually.be.false;\n    });\n\n    describe('default modal behavior', function () {\n        var defaultModal;\n\n        before(function () {\n            defaultModal = modal.initialize();\n        });\n\n        it('should support basic functionality without supplying any arguments', function () {\n            triggerModal();\n            expect(defaultModal.title).to.eventually.equal('Change hey_dude Admin Password');\n            defaultModal.cancel();\n        });\n\n    });\n\n});\n\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    },
    {
        "name": "rxNotify",
        "moduleName": "'encore.ui.rxNotify'",
        "displayName": "Rx Notify",
        "srcFiles": [
            "src/rxNotify/rxNotify.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [
            "templates/rxNotify/templates/rxNotification.html",
            "templates/rxNotify/templates/rxNotifications.html"
        ],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/stable.svg\" alt=\"stable\"></a></p>\n<p>Service (rxNotify) and Directives (rxNotification and rxNotifications) for displaying status messages on a page.</p>\n<h2>Using rxNotification as a State Message</h2>\n<p>There may be situations where you will need to use the styling/markup of rxNotify&#39;s messaging queue in status messages of your own - for example, a modal window which asks if you want to delete an object, with the appropriate warning or error flags. If this is the case, we recommend using the <code>rx-notification</code> directive in your views (note difference of <code>rx-notifications</code>).</p>\n<blockquote>\n<p><code>&lt;rx-notification type=&quot;warning&quot;&gt;This is a warning message!&lt;/rx-notification&gt;</code></p>\n</blockquote>\n<p>For all notification types, please look below under Message options, under <code>type</code>.</p>\n<p>Another situation that you might encounter is adding a notification to the default stack but needing to do it via the template.  With the <code>stack</code> parameter you&#39;re allowed do define a notification and have it get added via <code>rxNotify.add</code>:</p>\n<blockquote>\n<p><code>&lt;rx-notification type=&quot;error&quot; stack=&quot;page&quot;&gt;</code></p>\n<blockquote>\n<p><code>This is an error message being added to the &quot;page&quot; stack with &lt;strong&gt;Custom&lt;/strong&gt; html.</code></p>\n</blockquote>\n<p><code>&lt;/rx-notification&gt;</code></p>\n</blockquote>\n<h2>Adding a New Message Queue via rxNotify</h2>\n<p>To add a new message to a stack, inject &#39;rxNotify&#39; into your function and run:</p>\n<blockquote>\n<p><code>rxNotify.add(&#39;My Message Text&#39;);</code></p>\n</blockquote>\n<p>This will add a new message to the default stack (&#39;page&#39;) with all default options set. To customize options, pass in an object as the second argument with you specific options set:</p>\n<blockquote>\n<p><code>rxNotify.add(&#39;My Message Text&#39;, {</code></p>\n<blockquote>\n<p>   <code>stack: &#39;custom&#39;,</code></p>\n<p>   <code>type: &#39;warning&#39;</code></p>\n</blockquote>\n<p><code>});</code></p>\n</blockquote>\n<h2>Message options</h2>\n<hr>\n<ul>\n<li><p><strong><code>type</code></strong>: <em>Message type.</em></p>\n<blockquote>\n<p>Default: <code>&#39;info&#39;</code></p>\n</blockquote>\n<p>  <em>Other values</em>: <code>&#39;warning&#39;</code>, <code>&#39;error&#39;</code>, <code>&#39;success&#39;</code></p>\n</li>\n</ul>\n<hr>\n<ul>\n<li><p><strong><code>timeout</code></strong>: <em>Time (in seconds) for message to appear.</em></p>\n<blockquote>\n<p>Default: <code>-1</code> (Message displays indefinitely)</p>\n</blockquote>\n<p>  <em>Other values</em>: Any positive integer</p>\n</li>\n</ul>\n<hr>\n<ul>\n<li><p><strong><code>dismissable</code></strong>: <em>Whether a user can dismiss the message via an &#39;x&#39; icon.</em></p>\n<blockquote>\n<p>Default: <code>true</code></p>\n</blockquote>\n<p>  <em>Other values</em>: <code>false</code></p>\n</li>\n</ul>\n<hr>\n<ul>\n<li><p><strong><code>repeat</code></strong>: <em>Whether the message should be allowed to appear more than once in the stack.</em></p>\n<blockquote>\n<p>Default: <code>true</code></p>\n</blockquote>\n<p>  <em>Other values</em>: <code>false</code></p>\n</li>\n</ul>\n<hr>\n<ul>\n<li><p><strong><code>loading</code></strong> <em>Replaces type icon with spinner. Removes option for use to dismiss message.</em></p>\n<blockquote>\n<p>Default: <code>false</code></p>\n</blockquote>\n<p>  <em>Other values</em>: <code>true</code></p>\n<p>  You usually want to associate this with a &#39;dismiss&#39; property.</p>\n<p>  <strong>Example</strong>:</p>\n</li>\n</ul>\n<pre><code>&gt; `rxNotify.add(&#39;Loading&#39;, {`\n\n&gt;&gt;  `loading: true,`\n\n&gt;&gt;  `dismiss: [$scope, &#39;loaded&#39;]`\n\n&gt; `});`\n\n&gt; `var apiCallback = function (data) {`\n\n&gt;&gt;  `$scope.loaded = true;`\n\n&gt;&gt;  `// do something with the data`\n\n&gt; `}`\n\n&gt; `myApiCall(apiCallback);`\n</code></pre><hr>\n<ul>\n<li><p><strong><code>show</code></strong>: <em>When to have the message appear.</em></p>\n<blockquote>\n<p>Default: <code>&#39;immediate&#39;</code></p>\n</blockquote>\n<p>  <em>Other values:</em></p>\n<blockquote>\n<p><code>&#39;next&#39;</code>: Show message after the next route change</p>\n<p><code>[scope, &#39;property&#39;]</code>:</p>\n<blockquote>\n<p>Pass in a property on a scope to watch for a change. When the property value equals true, the message is shown.</p>\n</blockquote>\n</blockquote>\n<p>  <strong>Example</strong>:</p>\n<blockquote>\n<p><code>$scope.loaded = false;</code></p>\n<p><code>rxNotify.add(&#39;Content loaded!&#39;, {</code></p>\n<blockquote>\n<p> <code>show: [$scope, &#39;loaded&#39;]</code></p>\n</blockquote>\n<p><code>});</code></p>\n<p><code>$timeout(function () {</code></p>\n<blockquote>\n<p> <code>$scope.loaded = true;</code></p>\n</blockquote>\n<p><code>}, 1500);</code></p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<ul>\n<li><p><strong><code>dismiss</code></strong>: <em>When to have the message disappear.</em></p>\n<blockquote>\n<p>Default: <code>&#39;next&#39;</code> (Dismiss message after the next route change)</p>\n</blockquote>\n<p>  <em>Other values:</em></p>\n<blockquote>\n<p><code>[scope, &#39;property&#39;]</code>:</p>\n<blockquote>\n<p>   Pass in a property on a scope to watch for a change. When the property value equals true, the message is dismissed.</p>\n</blockquote>\n</blockquote>\n<p>  <strong>Example</strong>:</p>\n<blockquote>\n<p><code>$scope.loaded = false;</code></p>\n<p><code>rxNotify.add(&#39;Loading Content&#39;, {</code></p>\n<blockquote>\n<p> <code>dismiss: [$scope, &#39;loaded&#39;]</code></p>\n</blockquote>\n<p><code>});</code></p>\n<p><code>$timeout(function () {</code></p>\n<blockquote>\n<p> <code>$scope.loaded = true;</code></p>\n</blockquote>\n<p><code>}, 1500);</code></p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<ul>\n<li><p><strong><code>ondismiss</code></strong>: <em>A Function that should be run when message is dismissed.</em></p>\n<blockquote>\n<p>Default: <code>_.noop</code></p>\n</blockquote>\n<p>  <em>Other values</em>: <code>function () { ... }</code></p>\n</li>\n</ul>\n<hr>\n<ul>\n<li><p><strong><code>stack</code></strong>: <em>Which message stack the message gets added to.</em></p>\n<blockquote>\n<p>Default: <code>&#39;page&#39;</code></p>\n<p><em>Other values:</em> Any string</p>\n</blockquote>\n<p>  <strong>Example</strong>:</p>\n<blockquote>\n<p><code>rxNotify.add(&#39;Username required&#39;, {</code></p>\n<blockquote>\n<p> <code>type: &#39;error&#39;,</code></p>\n<p> <code>stack: &#39;loginForm&#39;</code></p>\n</blockquote>\n<p><code>});</code></p>\n<p><code>&lt;rx-notifications stack=&quot;loginForm&quot;&gt;&lt;/rx-notifications&gt;</code></p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<h2>Dismissing a message programatically</h2>\n<p>Most messages are dismissed either by the user, a route change or using the custom &#39;dismiss&#39; property.</p>\n<p>If you need to dismiss a message programmaticaly, you can run <strong><code>rxNotify.dismiss(message)</code></strong>, where message is the message object to dismiss.</p>\n<p>If you don&#39;t have the full message object, passing in the Message ID (which is returned from <strong><code>rxNotify.add</code></strong>) and the stack the message is in: <strong><code>rxNotify.dismiss(&#39;42&#39;, &#39;page&#39;)</code></strong>.</p>\n<h2>Stacks</h2>\n<p>Stacks are just separate notification areas. Normally, all messages created will go to the &#39;page&#39; stack, which should be displayed at the top of the page. It&#39;s used for page-level messages.</p>\n<p>You can also create custom stacks for speficic notification areas. Say you have a form on your page that you want to add error messages to. You can create a custom stack for this form and send form-specific messages to it.</p>\n<h2>Using the Page Stack</h2>\n<p>The default notification stack is added by default to the page template, so it should be ready to use without any work (unless the app uses a custom template). The HTML to add the default stack to the page is:</p>\n<blockquote>\n<p><code>&lt;rx-notifications&gt;&lt;/rx-notifications&gt;</code></p>\n</blockquote>\n<p>Note that a &#39;stack&#39; attribute does not need to be defined.</p>\n<h2>Creating a Custom Stack</h2>\n<p>See &#39;stack&#39; under &#39;Message options&#39;</p>\n<h2>Clearing all messages in a stack</h2>\n<p>You can clear all messages in a specific stack programmatically via the <strong><code>rxNotify.clear</code></strong> function. Simply pass in the name of the stack to clear: <strong><code>rxNotify.clear(&#39;page&#39;)</code></strong>.</p>\n<h2>rxPromiseNotifications</h2>\n<p>It&#39;s a common pattern with API requests that you&#39;ll show a loading message, followed by either a success or failure message depending on the result of the call. rxPromiseNotifications is the service created for this pattern. See the API docs for more information on how to call/use rxPromiseNotifications.</p>\n",
            "js": "/*jshint unused:false*/\n\nfunction rxNotifyCtrl ($rootScope, $scope, rxNotify, rxPromiseNotifications, $q) {\n    $scope.message = 'My message';\n\n    $scope.options = {\n        type: 'info',\n        timeout: -1,\n        dismissable: true,\n        show: 'immediate',\n        repeat: true\n    };\n\n    $scope.ondismiss = {\n        should: false,\n        method: function (msg) {\n            /* global alert */\n            alert('We are dismissing the message: ' + msg.text);\n        }\n    };\n\n    $scope.routeChange = function (stack) {\n        $rootScope.$broadcast('$routeChangeStart', {});\n        $rootScope.$broadcast('$routeChangeSuccess', {});\n    };\n\n    $scope.add = function (stack) {\n        var messageOptions = _.clone($scope.options);\n\n        if ($scope.ondismiss.should) {\n            messageOptions.ondismiss = _.clone($scope.ondismiss.method);\n        }\n\n        messageOptions.stack = stack;\n\n        rxNotify.add($scope.message, messageOptions);\n    };\n\n    // add a default messages (to custom stack so they don't show on the main page)\n    rxNotify.add('Helpful Information', {\n        stack: 'demo'\n    });\n    rxNotify.add('Loading', {\n        loading: true,\n        stack: 'demo'\n    });\n    rxNotify.add('You did it!', {\n        type: 'success',\n        stack: 'demo'\n    });\n    rxNotify.add('Careful now...', {\n        type: 'warning',\n        stack: 'demo'\n    });\n    rxNotify.add('Under Attack by Aliens', {\n        type: 'error',\n        stack: 'custom'\n    });\n\n    // stuff for rxPromiseNotifications\n    $scope.addPromise = function () {\n        $scope.deferred = $q.defer();\n\n        var promiseScope = rxPromiseNotifications.add($scope.deferred.promise, {\n            loading: 'Loading Message',\n            success: 'Success Message',\n            error: 'Error Message'\n        }, 'demo');\n    };\n}\n",
            "html": "<!-- Sample HTML goes here as a live example of how to the component can be used -->\n<div ng-controller=\"rxNotifyCtrl\">\n    <div class=\"form-item\">\n        <label>Message text: <input type=\"text\" ng-model=\"message\" /></label>\n    </div>\n\n    <div class=\"form-item\">\n        <label>Timeout (in seconds): <input type=\"text\" ng-model=\"options.timeout\" /></label>\n    </div>\n\n    <div class=\"form-item\">\n        <fieldset>\n            <legend>Type:</legend>\n            <label><input type=\"radio\" name=\"notify-type\" ng-model=\"options.type\" value=\"info\" /> Info</label>\n            <label><input type=\"radio\" name=\"notify-type\" ng-model=\"options.type\" value=\"success\" /> Success</label>\n            <label><input type=\"radio\" name=\"notify-type\" ng-model=\"options.type\" value=\"warning\" /> Warning</label>\n            <label><input type=\"radio\" name=\"notify-type\" ng-model=\"options.type\" value=\"error\" /> Error</label>\n        </fieldset>\n    </div>\n\n    <div class=\"form-item\">\n        <fieldset>\n            <legend>Show:</legend>\n            <label><input type=\"radio\" name=\"notify-show\" ng-model=\"options.show\" value=\"immediate\" /> Immediately</label>\n            <label><input type=\"radio\" name=\"notify-show\" ng-model=\"options.show\" value=\"next\" /> Next</label>\n        </fieldset>\n    </div>\n\n    <div class=\"form-item\">\n        <label>Repeat: <input type=\"checkbox\" ng-model=\"options.repeat\" /></label>\n    </div>\n\n    <div class=\"form-item\">\n        <label>Dismissable (by user): <input type=\"checkbox\" ng-model=\"options.dismissable\" /></label>\n    </div>\n\n    <div class=\"form-item\">\n        <label>Alert On Dismiss: <input type=\"checkbox\" ng-model=\"ondismiss.should\" /></label>\n    </div>\n\n    <div class=\"form-item\">\n        <label>Loading? (shows spinner): <input type=\"checkbox\" ng-model=\"options.loading\" /></label>\n    </div>\n\n    <div>\n        <button class=\"button\" ng-click=\"add('demo')\">Add to Demo Stack</button>\n        <button class=\"button\" ng-click=\"add('custom')\">Add to Custom Stack</button>\n    </div>\n\n    <div>\n        <h3>rxPromiseNotifications</h3>\n        <button class=\"button\" ng-click=\"addPromise()\">Create messages</button>\n        <button class=\"button button-positive\" ng-click=\"deferred.resolve();\">Resolve Promise</button>\n        <button class=\"button button-negative\" ng-click=\"deferred.reject();\">Reject Promise</button>\n    </div>\n\n    <div>\n        <button class=\"button\" ng-click=\"routeChange()\">Simulate Route Change</button>\n    </div>\n\n    <div class=\"pure-g\">\n        <div class=\"pure-u-1-2\">\n            <h2>Demo Stack</h2>\n            <rx-notifications stack=\"demo\"></rx-notifications>\n        </div>\n\n        <div class=\"pure-u-1-2\">\n            <h2>Custom Stack</h2>\n            <rx-notifications stack=\"custom\"></rx-notifications>\n        </div>\n    </div>\n\n    <p>Using rx-notification</p>\n\n    <rx-notification type=\"error\">Hello, world! <a href=\"#\">This is a link.</a></rx-notification>\n    <rx-notification type=\"warning\">Hello, world! <a href=\"#\">This is a link.</a></rx-notification>\n    <rx-notification type=\"info\">Hello, world! <a href=\"#\">This is a link.</a></rx-notification>\n    <rx-notification type=\"success\">Hello, world! <a href=\"#\">This is a link.</a></rx-notification>\n\n    <p>Using rx-notification with custom stack</p>\n    <div class=\"pure-g\">\n        <div class=\"pure-u-1-2\">\n            <h2>Demo Stack (demo-stack)</h2>\n            <rx-notifications stack=\"demo-stack\"></rx-notifications>\n        </div>\n\n        <div class=\"pure-u-1-2\">\n            <h2>Custom Stack (custom-stack)</h2>\n            <rx-notifications stack=\"custom-stack\"></rx-notifications>\n        </div>\n    </div>\n\n    <rx-notification stack=\"demo-stack\" type=\"info\">Hello, world in demo-stack stack!</rx-notification>\n    <rx-notification stack=\"custom-stack\" type=\"warning\">Hello, world in custom-stack stack!</rx-notification>\n</div>\n",
            "less": "@import 'mixins';\n\n.rx-notifications {\n    margin-bottom: 1.5em;\n\n    .rx-notification {\n        clear: both;\n        font-weight: 800;\n        font-size: 1.2em;\n        padding: 10px 50px;\n        margin-bottom: 2px;\n        position: relative;\n        background: no-repeat 18px 50%;\n\n        .button {\n            font-weight: normal;\n            margin-bottom: 0px;\n        }\n\n        &.notification-success {\n            background-color: #ddffd3;\n            background-image: url('images/green-checkmark-circled.png');\n            color: #45ad26;\n            a {\n              color: #7db162;\n            }\n        }\n        &.notification-info {\n            background-color: #83c9fe;\n            background-image: url('images/info-circled.png');\n            color: #1672b9;\n            a {\n              color: #568fb8;\n            }\n        }\n        &.notification-warning {\n            background-color: #ffa61b;\n            background-image: url('images/warning-triangle.png');\n            color: #fff;\n            a {\n              color: #f1d6af;\n            }\n        }\n        &.notification-error {\n            background-color: #f21a1a;\n            background-image: url('images/error-stop.png');\n            color: #fff;\n            a {\n              color: #fdaaab;\n            }\n        }\n        &.notification-loading {\n            // Hide icon since it's replaced by spinner\n            background-image: none;\n            .rx-spinner {\n                position: absolute;\n                left: 19px;\n                top: 50%;\n                margin-top: -9px;\n            }\n        }\n    }\n\n    .notification-dismiss {\n        position: absolute;\n        right: 0;\n        top: 0;\n        height: 100%;\n        padding: 0 15px;\n        content: '\\00D7';\n        .opacity(.5);\n        color: #000;\n        &:hover,\n        &:focus {\n            .opacity(.8);\n            text-decoration: none;\n        }\n    }\n}\n\n.animate-fade.ng-enter,\n.animate-fade.ng-leave {\n    -webkit-transition: 0.25s cubic-bezier(0.250, 0.250, 0.750, 0.750) all;\n    -moz-transition: 0.25s cubic-bezier(0.250, 0.250, 0.750, 0.750) all;\n    -ms-transition: 0.25s cubic-bezier(0.250, 0.250, 0.750, 0.750) all;\n    -o-transition: 0.25s cubic-bezier(0.250, 0.250, 0.750, 0.750) all;\n    transition: 0.25s cubic-bezier(0.250, 0.250, 0.750, 0.750) all;\n    -webkit-animation-fill-mode: both;\n    animation-fill-mode: both;\n}\n\n.animate-fade.ng-leave.ng-leave-active,\n.animate-fade.ng-enter {\n    opacity:0;\n}\n\n.animate-fade.ng-leave,\n.animate-fade.ng-enter.ng-enter-active {\n    opacity:1;\n}\n",
            "midway": "var _ = require('lodash');\n\nvar notifications = require('../rxNotify.page').rxNotify;\n\ndescribe('rxNotify', function () {\n\n    before(function () {\n        demoPage.go('#/component/rxNotify');\n    });\n\n    describe('auto dismissal', function () {\n        var addToCustomStack;\n\n        before(function () {\n            addToCustomStack = function (type, timeout) {\n                var input = $('input[ng-model=\"options.timeout\"]');\n                input.clear();\n                input.sendKeys(timeout);\n                $('input[value=\"' + type + '\"]').click();\n                element(by.buttonText('Add to Custom Stack')).click();\n            };\n\n        });\n\n        it('should add a new success message that dismisses itself', function () {\n            addToCustomStack('success', '.5');\n            expect(notifications.all.byText('My message').type).to.eventually.equal('success');\n        });\n\n        it('should remove itself after a little while', function () {\n            browser.sleep(1000);\n            expect(notifications.byStack('custom').exists('My message', 'success')).to.eventually.false;\n        });\n\n        it('should add a new success message indefinitely', function () {\n            addToCustomStack('success', -1);\n            expect(notifications.all.byText('My message').type).to.eventually.equal('success');\n        });\n\n    });\n\n    describe('by stack -- demo', function () {\n\n        it('should have 4 notifications in it', function () {\n            expect(notifications.byStack('demo').count()).to.eventually.equal(4);\n        });\n\n        describe('info type', function () {\n            var info;\n\n            before(function () {\n                info = notifications.byStack('demo').byText('Helpful Information');\n            });\n\n            it('should be type \"info\"', function () {\n                expect(info.type).to.eventually.equal('info');\n            });\n\n            it('should have helpful information', function () {\n                expect(info.text).to.eventually.equal('Helpful Information');\n            });\n\n            it('should be dismissable', function () {\n                expect(info.isDismissable()).to.eventually.be.true;\n            });\n\n            it('should not have a spinner', function () {\n                expect(info.hasSpinner()).to.eventually.be.false;\n            });\n\n            it('should have a second spinner on another notification', function () {\n                expect(notifications.byStack('demo').byText('Loading').hasSpinner()).to.eventually.be.true;\n            });\n\n        });\n\n    });\n\n    describe('all notifications', function () {\n\n        it('should have 6 notifications in it', function () {\n            expect(notifications.all.count()).to.eventually.equal(8);\n        });\n\n        describe('by type', function () {\n            var success;\n\n            before(function () {\n                success = notifications.all.byText('You did it!');\n            });\n\n            it('should be type \"success\"', function () {\n                expect(success.type).to.eventually.equal('success');\n            });\n\n            it('should have done it', function () {\n                expect(success.text).to.eventually.equal('You did it!');\n            });\n\n        });\n    });\n\n    describe('notifications exist', function () {\n\n        it('should find a notification with no class and a string (all)', function () {\n            expect(notifications.all.exists('Under Attack by Aliens')).to.eventually.be.true;\n        });\n\n        it('should find a notification with no class and a string (custom stack)', function () {\n            expect(notifications.byStack('custom').exists('Under Attack by Aliens')).to.eventually.be.true;\n        });\n\n        it('should find a notification with a class and a string', function () {\n            expect(notifications.all.exists('Under Attack by Aliens','error')).to.eventually.be.true;\n        });\n\n        it('should find a notification with a class and no string', function () {\n            expect(notifications.all.exists('','error')).to.eventually.be.true;\n        });\n\n        it('should not find a notification with the wrong class and a string', function () {\n            expect(notifications.all.exists('Under Attack by Aliens','success')).to.eventually.be.false;\n        });\n\n        it('should not find a notification with the wrong class and no string', function () {\n            expect(notifications.all.exists('','abject_failure')).to.eventually.be.false;\n        });\n\n        it('should not find a notification with no class and a wrong string', function () {\n            expect(notifications.all.exists('Under Attack by Alienists')).to.eventually.be.false;\n        });\n\n    });\n\n    describe('dismissing notifications', function () {\n\n        it('should dismiss a single notification', function () {\n            notifications.all.byText('Careful now...').dismiss();\n        });\n\n        it('should have actually dismissed the message', function () {\n            expect(notifications.all.count()).to.eventually.equal(7);\n        });\n\n        describe('by stack', function () {\n\n            it('should dismiss every notification in a stack', function () {\n                notifications.byStack('custom').dismiss();\n            });\n\n            it('should have actually dismissed every message', function () {\n                expect(notifications.byStack('custom').count()).to.eventually.equal(0);\n            });\n\n        });\n\n        describe('with ondismiss function', function () {\n            var msgText = 'Testing On Dismiss Method';\n\n            before(function () {\n                var chkOnDismiss = $('input[ng-model=\"ondismiss.should\"]');\n                var txtMessage = $('input[ng-model=\"message\"]');\n\n                txtMessage.clear();\n                txtMessage.sendKeys(msgText);\n\n                chkOnDismiss.getAttribute('checked').then(function (isChecked) {\n                    if (!isChecked) {\n                        chkOnDismiss.click();\n                    }\n                });\n\n                element(by.buttonText('Add to Custom Stack')).click();\n            });\n\n            it('should have an alert when the message is dismissed', function () {\n                notifications.byStack('custom').byText(msgText).dismiss();\n\n                browser.wait(function () {\n                    return browser.switchTo().alert().then(function (alertBox) {\n                        return alertBox.getText().then(function (txt) {\n                            expect(txt).to.eq('We are dismissing the message: Testing On Dismiss Method');\n                            return alertBox.dismiss().then(function () {\n                                return true;\n                            });\n                        });\n                    });\n                });\n            });\n        });\n\n        describe('all', function () {\n\n            it('should dismiss all notifications', function () {\n                notifications.all.dismiss();\n            });\n\n            it('should have actually dismissed every message', function () {\n                expect(notifications.all.count()).to.eventually.equal(1);\n            });\n\n        });\n\n    });\n\n    describe('stackless notifications', function () {\n        var notification;\n\n        before(function () {\n            notification = notifications.initialize($('rx-notification[type=\"error\"] .rx-notification'));\n        });\n\n        it('should have a warning type', function () {\n            expect(notification.type).to.eventually.equal('error');\n        });\n\n        it('should say hello', function () {\n            expect(notification.text).to.eventually.equal('Hello, world! This is a link.');\n        });\n\n        it('should not be dismissable', function () {\n            expect(notification.isDismissable()).to.eventually.be.false;\n        });\n\n        it('should not have a spinner', function () {\n            expect(notification.hasSpinner()).to.eventually.be.false;\n        });\n\n    });\n\n});\n\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    },
    {
        "name": "rxPageTitle",
        "moduleName": "'encore.ui.rxPageTitle'",
        "displayName": "Rx Page Title",
        "srcFiles": [
            "src/rxPageTitle/rxPageTitle.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/stable.svg\" alt=\"stable\"></a></p>\n<p>Service for managing the page titles. </p>\n<p>Two methods are available for setting the page title. The first is <code>setTitle()</code>, which simply sets the title to whatever raw string is passed in.</p>\n<p>The second is <code>setTitleUnsafeStripHTML()</code>. This will strip any HTML tags from the string, and set the title to the result. This uses\nthe <a href=\"http://stackoverflow.com/questions/5002111/javascript-how-to-strip-html-tags-from-string\">technique found here</a>. Note the caveats\nlisted there, namely:</p>\n<ol>\n<li>Only tags valid within <code>&lt;div&gt;</code> will be correctly stripped out</li>\n<li>You should not have <code>&lt;script&gt;</code> within the title</li>\n<li>You should not pass <code>null</code> as the title</li>\n<li>The title must come from a trusted source, i.e. danger danger danger <code>&lt;img onerror=&#39;alert(\\&quot;could run arbitrary JS here\\&quot;)&#39; src=bogus&gt;</code></li>\n</ol>\n",
            "js": "/*jshint unused:false*/\n\n// This file is used to help build the 'demo' documentation page and should be updated with example code\nfunction rxPageTitleCtrl ($scope, rxPageTitle) {\n    $scope.changeTitle = function () {\n        rxPageTitle.setTitle($scope.newTitle);\n    };\n\n    $scope.refreshTitle = function () {\n        $scope.pageTitle = rxPageTitle.getTitle();\n    };\n\n    $scope.refreshTitle();\n}\n",
            "html": "<!-- Sample HTML goes here as a live example of how to the component can be used -->\n<div ng-controller=\"rxPageTitleCtrl\">\n    Current Title: {{pageTitle}} <button ng-click=\"refreshTitle()\" class=\"button\">Get Updated Title</button><br />\n\n    <input type=\"text\" ng-change=\"changeTitle()\" ng-model=\"newTitle\" placeholder=\"New Title\" />\n</div>",
            "less": "",
            "midway": "\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    },
    {
        "name": "rxPaginate",
        "moduleName": "'encore.ui.rxPaginate'",
        "displayName": "Rx Paginate",
        "srcFiles": [
            "src/rxPaginate/rxPaginate.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [
            "templates/rxPaginate/templates/rxPaginate.html"
        ],
        "dependencies": [
            "rxLocalStorage"
        ],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/stable.svg\" alt=\"stable\"></a></p>\n<p>Used for adding pagination to a table.</p>\n<p>Two different forms of pagination are supported:</p>\n<ol>\n<li>UI-based pagination, where all items are retrieved at once, and paginated in the UI</li>\n<li>Server-side pagination, where the pagination directive works with a paginated API</li>\n</ol>\n<h1>UI-Based Pagination</h1>\n<p>With UI-Based pagination, the entire set of data is looped over via an <code>ngRepeat</code> in the table&#39;s <code>&lt;tbody&gt;</code>, with the data passed into the <code>Paginate</code> filter. This filter does the work of paginating the set of data and communicating with the <code>&lt;rx-paginate&gt;</code> to draw the page selection buttons at the bottom of the table.</p>\n<p>As shown in the first example below, the <code>ngRepeat</code> will usually look like this:</p>\n<pre><code> &lt;tr ng-repeat=&quot;server in servers | orderBy: sorter.predicate:sorter.reverse | Paginate:pager &quot;&gt;\n</code></pre><p>In this case, </p>\n<ol>\n<li><code>servers</code> is a variable bound to your page <code>$scope</code>, and contains the full set of servers. </li>\n<li>This is then passed to <code>orderBy</code>, to perform column sorting with <code>rxSortableColumn</code>. </li>\n<li>The sorted results are then passed to <code>Paginate:pager</code>, where <code>Paginate</code> is a filter from the <code>rxPaginate</code> module, and <code>pager</code> is a variable on your scope created like <code>$scope.pager = PageTracking.createInstance();</code>. </li>\n</ol>\n<p>This <code>pager</code> is responsible for tracking pagination state (i.e. &quot;which page are we on&quot;, &quot;how many items per page&quot;, &quot;total number of items tracked&quot;, etc.</p>\n<p>To add the pagination buttons to your table, do the following in your <code>&lt;tfoot&gt;</code>:</p>\n<pre><code>&lt;tfoot&gt;\n    &lt;tr class=&quot;paginate-area&quot;&gt;\n        &lt;td colspan=&quot;2&quot;&gt;\n            &lt;rx-paginate page-tracking=&quot;pager&quot;&gt;&lt;/rx-paginate&gt;\n        &lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/tfoot&gt;\n</code></pre><p>Here we are using the <code>&lt;rx-paginate&gt;</code> directive to draw the buttons, passing it the same <code>pager</code> instance described above.</p>\n<p>Because all of the <code>servers</code> get passed via <code>ng-repeat</code>, it means you don&#39;t need to take explicit action if the set of data changes. You can change <code>$scope.servers</code> at any time, and <code>&lt;rx-paginate&gt;</code> will automatically re-process it.</p>\n<h2>Persistence</h2>\n<p>The user&#39;s preference for the number of items to display per page will be persisted across applications using localstorage. This preference is set whenever the user selects a new number to show.</p>\n<p>This applies to both UI-based pagination and API-based pagination.</p>\n<h2>Hiding the pagination</h2>\n<p>In some instances, the pagination should be hidden if there isn&#39;t enough data to require it. For example, if you have <code>itemsPerPage</code> set to 10, but only have 7 items of data (so only one page). Hiding the pagination is pretty simple:</p>\n<pre><code>&lt;rx-paginate page-tracking=&quot;pager&quot; ng-hide=&quot;pager.totalPages === 1&quot;&gt;&lt;/rx-paginate&gt;\n</code></pre><p>You can use this code on any part of your view. For example, if you have pagination in your table footer, it&#39;s a good idea to hide the entire footer:</p>\n<pre><code>&lt;tfoot ng-hide=&quot;pager.totalPages === 1&quot;&gt;\n    &lt;tr class=&quot;paginate-area&quot;&gt;\n        &lt;td colspan=&quot;12&quot;&gt;\n            &lt;rx-paginate page-tracking=&quot;pager&quot;&gt;&lt;/rx-paginate&gt;\n        &lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/tfoot&gt;\n</code></pre><p>See the demo below for more examples of this.</p>\n<p>This applies to both UI-based pagination and API-based pagination.</p>\n<h1>API-Based Pagination</h1>\n<p>Many APIs support pagination on their own. Previously, we would have to grab <em>all</em> the data at once, and use the UI-Based Pagination described above. Now we have support for paginated APIs, such that we only retrieve data for given pages when necessary.</p>\n<p>With API-based pagination, the <code>ngRepeat</code> for your table will instead look like this:</p>\n<pre><code>&lt;tr ng-repeat=&quot;server in pagedServers.items&quot;&gt;\n</code></pre><p>Note a few things here:</p>\n<ol>\n<li>We now loop over a variable provided by the pager.</li>\n<li>We no longer pass the values through <em>any</em> filters. Not a search text filter, not sorting filter, and not the <code>Paginate</code> filter.</li>\n</ol>\n<p><strong> BEGIN WARNING </strong> </p>\n<p>You should <em>never</em> access <code>pagedServers.items</code> from anywhere other than the <code>ng-repeat</code>. Do not touch it in your controller. It is a dynamic value that can\nchange at anytime. It is only intended for use by <code>ng-repeat</code>.</p>\n<p><strong> END WARNING </strong> </p>\n<p>The <code>&lt;tfoot&gt;</code> will look like this:</p>\n<pre><code>&lt;tfoot&gt;\n    &lt;tr class=&quot;paginate-area&quot;&gt;\n        &lt;td colspan=&quot;2&quot;&gt;\n            &lt;rx-paginate \n                page-tracking=&quot;pagedServers&quot;\n                server-interface=&quot;serverInterface&quot;\n                filter-text=&quot;searchText&quot;\n                selections=&quot;selectFilter.selected&quot;\n                sort-column=&quot;sort.predicate&quot;\n                sort-direction=&quot;sort.reverse&quot;&gt;\n            &lt;/rx-paginate&gt;\n        &lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/tfoot&gt;\n</code></pre><ul>\n<li><code>page-tracking</code> still receives the pager (<code>pagedServers</code> in this case) as an argument. What&#39;s new are the next four parameters.</li>\n<li><code>server-interface</code> <em>must</em> be present. It has to be passed an object with a <code>getItems()</code> method on it. This method is what <code>&lt;rx-paginate&gt;</code> will use to request data from the paginated API.</li>\n<li><code>filter-text</code>, <code>selections</code>, <code>sort-column</code> and <code>sort-direction</code> are all optional. If present, <code>&lt;rx-paginate&gt;</code> will watch the variables for changes, and will call <code>getItems()</code> for updates whenever the values change.</li>\n</ul>\n<p>Note: If using <code>&lt;rx-select-filter&gt;</code> in the table, the <code>available</code> option passed to the <code>SelectFilter</code> constructor <strong>must</strong> be provided and include every property.  This is because the filter cannot reliably determine all available options from a paginated api.</p>\n<p>You will still create a <code>PageTracking</code> instance on your scope, just like in UI-based pagination:</p>\n<pre><code>$scope.pagedServers = PageTracking.createInstance();\n</code></pre><h2>getItems()</h2>\n<p>The <code>getItems()</code> method is one you write on your own, and lives as an interface between <code>&lt;rx-paginate&gt;</code> and the server-side paginated API that you will be calling. The framework will make calls to <code>getItems()</code> when appropriate. Rather than have to teach <code>&lt;rx-paginate&gt;</code> about how to call and parse a multitude of different paginated APIs, it is your responsibility to implement this generic method.</p>\n<p><code>getItems()</code> takes two required parameters, and one optional parameter object. When the framework calls it, it looks like:</p>\n<pre><code>getItems(pageNumber, itemsPerPage, {\n    filterText: some_filter_search_text,\n    selections: selected_options_from_filters,\n    sortColumn: the_selected_sort_column,\n    sortDirection: the_direction_of_the_sort_column\n});\n</code></pre><p>where:</p>\n<ul>\n<li><code>pageNumber</code>: the 0-based page of data that the user has clicked on/requested</li>\n<li><code>itemsPerPage</code>: the value the user currently has selected for how many items per page they wish to see</li>\n<li><code>filterText</code>: the filter search string entered by the user, if any</li>\n<li><code>selections</code>: an object containing the item properties and their selected options</li>\n<li><code>sortColumn</code>: the name of the selected sort column, if any</li>\n<li><code>sortDirection</code>: either <code>&#39;ASCENDING&#39;</code> or <code>&#39;DESCENDING&#39;</code></li>\n</ul>\n<p>When the framework calls <code>getItems()</code>, you <strong><em>must</em> return a promise</strong>. When this promise resolves, the resolved object must have the following properties on it:</p>\n<ul>\n<li><code>items</code>: An array containing the actual items/rows of the table returned for the request. This should at least contain <code>itemsPerPage</code> items, if that many items exist on the given page</li>\n<li><code>pageNumber</code>: The 0-based page number that these items belong to. Normally this should be the same as the <code>pageNumber</code> value passed to <code>getItems()</code></li>\n<li><code>totalNumberOfItems</code>: The total number of items available, given the <code>filterText</code> parameter.</li>\n</ul>\n<p>Examples are below.</p>\n<h2><code>totalNumberOfItems</code></h2>\n<p>If you could get all items from the API in <em>one call</em>, <code>totalNumberOfItems</code> would reflect the number of items returned (given necessary search parameters). For example, say the following request was made:</p>\n<pre><code>var pageNumber = 0;\nvar itemsPerPage = 50;\ngetItems(pageNumber, itemsPerPage);\n</code></pre><p>This is asking for all the items on page 0, with the user currently viewing 50 items per page. A valid response would return 50 items. However, the <em>total</em> number of items available might be 1000 (i.e. 20 pages of results). Your response must then have <code>totalNumberOfItems: 1000</code>. This data is needed so we can display to the user &quot;Showing 1-50 of 1000 items&quot; in the footer of the table.</p>\n<p>If <code>filterText</code> is present, then the total number of items might change. Say the request became:</p>\n<pre><code>var pageNumber = 0;\nvar itemsPerPage = 50;\nvar opts = {\n    filterText: &quot;Ubuntu&quot;\n};\ngetItems(pageNumber, itemsPerPage, opts);\n</code></pre><p>This means &quot;Filter all your items by the search term &#39;Ubuntu&#39;, then return page 0&quot;. If the total number of items matching &quot;Ubuntu&quot; is 200, then your response would have <code>totalNumberOfItems: 200</code>. You might only return 50 items in <code>.items</code>, but the framework needs to know how many total items are available.</p>\n<h2>Forcing a Refresh</h2>\n<p>When using API-based pagination, there might be instances where you want to force a reload of the current items. For example, if the user takes an action to delete an item. Normally, the items in the view are only updated when the user clicks to change the page. To force a refresh, a <code>refresh()</code> method is available on the <code>pagedServers</code>. Calling this will tell <code>&lt;rx-paginate&gt;</code> to refresh itself. You can also pass it a <code>stayOnPage = true</code> to tell it to make a fresh request for the current page, i.e.</p>\n<pre><code>var stayOnPage = true;\npagedServers.refresh(stayOnPage);\n</code></pre><p>Internally, calling <code>refresh()</code> equates to <code>&lt;rx-paginate&gt;</code> doing a new <code>getItems()</code> call, with the current filter/sort criteria. But the point is that you can&#39;t just call <code>getItems()</code> yourself to cause an update. The framework has to call that method, so it knows to wait on the returned promise.</p>\n<p>This is shown in the demo below with a &quot;Refresh&quot; button above the API-paginated demo.</p>\n<h2>Error Handling</h2>\n<p><code>&lt;rx-paginate&gt;</code> includes a simple way to show error messages when <code>getItems()</code> rejects instead of resolves. By passing <code>error-message=&quot;Some error text!&quot;</code> to <code>&lt;rx-paginate&gt;</code>, the string entered there will be shown in an rxNotification whenever <code>getItems()</code> fails. If <code>error-message</code> is not specified, then nothing will be shown on errors. In either case, on a failure, the table will stay on the page it was on before the request went out.</p>\n<p>If you wish to show more complicated error messages (and it is highly recommended that you do!), then you&#39;ll have to do that yourself. Either put error handling code directly into your <code>getItems()</code>, or have something else wait on the <code>getItems()</code> promise whenever it&#39;s called, and perform the handling there. </p>\n<p>One way to do this is as so:</p>\n<p>Let&#39;s say that you had defined your <code>getItems()</code> method on an object called <code>pageRequest</code>,</p>\n<pre><code>    var pageRequest = {\n        getItems: function (pageNumber, itemsPerPage, opts) {\n            var defer = $q.deferred();\n            ...\n        }\n    }\n</code></pre><p>You want your <code>getItems()</code> to be unaware of the UI, i.e. you don&#39;t want to mix API and UI logic into one method.</p>\n<p>Instead, you could do something like this:</p>\n<pre><code>var pageRequest = {\n    getItemsFromAPI: function (pageNumber, itemsPerPage, opts) {\n        var defer = $q.deferred();\n        ...\n    }\n\n    getItems: function (pageNumber, itemsPerPage, opts) {\n        var promise = this.getItemsFromAPI(pageNumber, itemsPerPage, opts);\n\n        rxPromiseNotifications.add(promise, {\n            error: &#39;Error loading page &#39; + pageNumber\n        }\n\n        return promise;\n    }\n}\n</code></pre><p>Thus we&#39;ve moved the API logic into <code>getItemsFromAPI</code>, and handled the UI logic separately.</p>\n<h2>Extra Filtering Parameters</h2>\n<p>By default, <code>&lt;rx-paginate&gt;</code> can automatically work with a search text field (using <code>search-text=</code>). If you need to filter by additional criteria (maybe some dropdowns/radiobox, extra filter boxes, etc), you&#39;ll need to do a bit more work on your own.</p>\n<p>To filter by some element X, set a <code>$watch</code> on X&#39;s model. Whenever it changes, call <code>pagedServers.refresh()</code> to force <code>&lt;rx-paginate&gt;</code> to do a new <code>getItems()</code> call. Then, in your <code>getItems()</code>, grab the current value of X and send it out along with the normal criteria that are passed into <code>getItems()</code>. Something like:</p>\n<pre><code>$scope.watch(&#39;extraSearch&#39;, $scope.pagedServers.refresh);\n\n\nvar serverInterface = {\n    getItems: function (pageNumber, itemsPerPage, opts) {\n        var extraSearch = $scope.extraSearch;\n        return callServerApi(pageNumber, itemsPerPage, opts, extraSearch);\n    }\n}\n\n...\n\n&lt;rx-paginate server-interface=&quot;serverInterface&quot; ... &gt;&lt;/rx-paginate&gt;\n</code></pre><p>Remember that calling <code>refresh()</code> without arguments will tell <code>rx-paginate</code> to make a fresh request for page 0. If you call it with <code>true</code> as the first argument, the request will be made with whatever the current page is, i.e. <code>getItems(currentPage, ...)</code>. If you have your own search criteria, and they&#39;ve changed since the last time this was called, note that the page number might now be different. i.e. If the user was on page 10, they entered some new filter text, and you call <code>refresh(true)</code>, there might not even be 10 pages of results with that filter applied.</p>\n<p>In general, if you call <code>refresh(true)</code>, you should check if <em>any</em> of the filter criteria have changed since the last call. If they have, you should ask for page 0 from the server, not the page number passed in to <code>getItems()</code>. If you call <code>refresh()</code> without arguments, then you don&#39;t have to worry about comparing to the last-used filter criteria.</p>\n<h2>Local Caching</h2>\n<p><strong>If you are ok with a call to your API every time the user goes to a new page in the table, then you can ignore this section. If you want to reduce the total number of calls to your API, please read on.</strong></p>\n<p>When a <code>getItems()</code> request is made, the framework passes in the user&#39;s <code>itemsPerPage</code> value. If it is 50, and there are 50 results available for the requested page, then you should return <em>at least</em> 50 results. However, you may also return <em>more</em> than 50 items. </p>\n<p>Initially, <code>&lt;rx-paginate&gt;</code> will call <code>getItems()</code>, wait for a response, and then update items in the table.  If your <code>getItems()</code> returned exactly <code>itemsPerPage</code> results in its <code>items</code> array, and the user navigates to a different page of data, <code>getItems()</code> will be called again to fetch new information from the API.  The user will then need to wait before they see new data in the table. This remains true for every interaction with page data navigation.</p>\n<p>For example, say the following request is made when the page first loads:</p>\n<pre><code>var pageNumber = 0;\nvar itemsPerPage = 50;\ngetItems(pageNumber, itemsPerPage);\n</code></pre><p>Because no data is available yet, <code>&lt;rx-paginate&gt;</code> will call <code>getItems()</code>, wait for the response, and then draw the items in the table. If you returned exactly 50 items, and the user then clicks &quot;Next&quot; or 2 (to go to the second page), then <code>getItems()</code> will have to be called again (<code>getItems(1, 50)</code>), and the user will have to wait for the results to come in.</p>\n<p>However, if your <code>getItems()</code> were to pull more than <code>itemsPerPage</code> of data from the API, <code>&lt;rx-paginate&gt;</code> is smart enough to navigate through the saved data without needing to make an API request every time the page is changed.</p>\n<p>There are some caveats, though.</p>\n<ol>\n<li>Your returned <code>items.length</code> must be a multiple of <code>itemsPerPage</code> (if <code>itemsPerPage = 50</code>, <code>items.length</code> must be 50, 100, 150, etc.)</li>\n<li>You will need to calculate the page number sent to the API based on requested values in the UI.</li>\n<li>If the user enters any search text, and you&#39;ve passed the search field to <code>&lt;rx-paginate&gt;</code> via <code>search-text</code>, then the cache will be immediately flushed and a new request made. </li>\n<li>If you&#39;ve turned on column-sorting, and passed <code>sort-column</code> to <code>&lt;rx-paginate&gt;</code>, then the cache will be flushed whenever the user changes the sort, and a new request will be made to <code>getItems()</code></li>\n<li>If you&#39;ve passed <code>sort-direction</code> to <code>&lt;rx-paginate&gt;, and the user changes the sort direction, then the cache will be flushed and a new request will be made to</code>getItems()`</li>\n</ol>\n<p>Details on this are below.</p>\n<h3>Local Caching Formula</h3>\n<p>You have to be careful with grabbing more items than <code>itemsPerPage</code>, as you&#39;ll need to modify the values you send to your server. If you don&#39;t want to be careful, then don&#39;t ever request more than <code>itemsPerPage</code> from your API.</p>\n<p>Let&#39;s say that <code>itemsPerPage</code> is 50, but you want to grab 200 items at a time from the server, to reduce the round-trips to your API. We&#39;ll call this 200 the <code>serverItemsPerPage</code>. First, ensure that your <code>serverItemsPerPage</code> meets this requirement:</p>\n<pre><code>(serverItemsPerPage &gt;= itemsPerPage) &amp;&amp; (serverItemsPerPage % itemsPerPage === 0)\n</code></pre><p>If you&#39;re asking for 200 items at a time, the page number on the server won&#39;t match the page number requested by the user. Before, a user call for <code>pageNumber = 4</code> and <code>itemsPerPage = 50</code> means &quot;Give me items 200-249&quot;. But if you&#39;re telling your API that each page is 200 items long, then <code>pageNumber = 4</code> is not what you want to ask your API for (it would return items 800-999!). You&#39;ll need to send a custom page number to the server. In this case, you&#39;d need <code>serverPageNumber</code> to be <code>1</code>, i.e. the second page of results from the server.</p>\n<p>We have written a utility function do these calculations for you, <code>rxPaginateUtils.calculateApiVals</code>. It returns an object with <code>serverPageNumber</code> and <code>offset</code> properties. To use it, your <code>getItems()</code> might look something like this. </p>\n<pre><code>var getItems = function (pageNumber, itemsPerPage) {\n    var deferred = $q.defer();\n\n    var serverItemsPerPage = 200;\n\n    var vals = rxPaginateUtils.calculateApiVals(pageNumber, itemsPerPage, serverItemsPerPage);\n    yourRequestToAPI(vals.serverPageNumber, serverItemsPerPage)\n    .then(function (items) {\n\n        deferred.resolve({\n            items: items.slice(vals.offset),\n            pageNumber: pageNumber,\n            totalNumberOfItems: items.totalNumberOfItems\n        });\n\n    });\n\n    return deferred.promise;\n}\n</code></pre><p>The following tables should help illustrate what we mean with these conversions. In all three cases, there are a total of 120 items available from the API.</p>\n<table>\n<thead>\n<tr>\n<th>pageNumber</th>\n<th>itemsPerPage</th>\n<th>Items</th>\n<th>Action</th>\n<th>serverPageNumber</th>\n<th>serverItemsPerPage</th>\n<th>Items</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>50</td>\n<td>1-50</td>\n<td>getItems()</td>\n<td>0</td>\n<td>50</td>\n<td>1-50</td>\n</tr>\n<tr>\n<td>1</td>\n<td>50</td>\n<td>51-100</td>\n<td>getItems()</td>\n<td>1</td>\n<td>50</td>\n<td>51-100</td>\n</tr>\n<tr>\n<td>2</td>\n<td>50</td>\n<td>101-120</td>\n<td>getItems()</td>\n<td>2</td>\n<td>50</td>\n<td>101-120</td>\n</tr>\n</tbody>\n</table>\n<p>This first table is where you don&#39;t want to do any local caching. You send the <code>pageNumber</code> and <code>itemsPerPage</code> to your API, unchanged from what\nthe user requested. Every time the user clicks to go to a new page, an API request will take place.</p>\n<hr>\n<table>\n<thead>\n<tr>\n<th>pageNumber</th>\n<th>itemsPerPage</th>\n<th>Items</th>\n<th>Action</th>\n<th>serverPageNumber</th>\n<th>serverItemsPerPage</th>\n<th>Items</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>50</td>\n<td>1-50</td>\n<td>getItems()</td>\n<td>0</td>\n<td>100</td>\n<td>1-100</td>\n</tr>\n<tr>\n<td>1</td>\n<td>50</td>\n<td>51-100</td>\n<td>use cached</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>2</td>\n<td>50</td>\n<td>101-120</td>\n<td>getItems()</td>\n<td>1</td>\n<td>100</td>\n<td>101-120</td>\n</tr>\n</tbody>\n</table>\n<p>This second example shows the case where the user is still looking at 50 <code>itemsPerPage</code>, but you want to grab 100 items at a time from your API.</p>\n<p>When the table loads (i.e. the user wants to look at the first page of results), an &quot;Action&quot; of <code>getItems(0, 50)</code> will take place. Using <code>calculateApiVals</code>, the <code>serverPageNumber</code> will be 0 when you provide <code>serverItemsPerPage=100</code>. When you resolve the <code>getItems()</code> promise, you&#39;ll return items 1-100.</p>\n<p>When the user clicks on the second page (page 1), <code>getItems()</code> will not be called, <code>&lt;rx-paginate&gt;</code> will instead use the values it has cached. </p>\n<p>When the user clicks on the third page (page 2), <code>getItems(2, 50)</code> will be called. You&#39;ll use <code>rxPaginateutils.calculateApiVals</code> to calculate that <code>serverPageNumber</code> now needs to be <code>1</code>. Because only 120 items in total are available, you&#39;ll eventually resolve the promise with <code>items</code> containing items 101-120.</p>\n<hr>\n<table>\n<thead>\n<tr>\n<th>pageNumber</th>\n<th>itemsPerPage</th>\n<th>Items</th>\n<th>Action</th>\n<th>serverPageNumber</th>\n<th>serverItemsPerPage</th>\n<th>Items</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>50</td>\n<td>1-50</td>\n<td>getItems()</td>\n<td>0</td>\n<td>200</td>\n<td>1-120</td>\n</tr>\n<tr>\n<td>1</td>\n<td>50</td>\n<td>51-100</td>\n<td>use cached</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>2</td>\n<td>50</td>\n<td>101-120</td>\n<td>use cached</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>In this final example, there are still only 120 items available, but you&#39;re asking your API for 200 items at a time. This will cause an API request on the first page, but the next two pages will be cached, and <code>&lt;rx-paginate&gt;</code> will use the cached values.</p>\n",
            "js": "/*jshint unused:false*/\n\n// This file is used to help build the 'demo' documentation page and should be updated with example code\nfunction rxPaginateCtrl ($scope, $q, $timeout, $filter, rxPaginateUtils, PageTracking, rxSortUtil, SelectFilter) {\n    $scope.pager = PageTracking.createInstance({ itemsPerPage: 3 });\n\n    var os = ['Ubuntu 12.04', 'Red Hat Enterprise Linux 6.4', 'CentOS 6.4', 'Ubuntu 13.04'];\n    var makeServers = function (serverCount) {\n        var servers = [];\n        for (var i = 1; i < serverCount + 1; i++) {\n            var server = {\n                id: i,\n                name: 'Server ' + i,\n                os: os[i % os.length]\n            };\n            servers.push(server);\n        }\n        return servers;\n    };\n\n    $scope.servers = makeServers(21);\n\n    $scope.removeServers = function () {\n        if ($scope.servers.length > 2) {\n            $scope.servers = $scope.servers.splice(2);\n        }\n    };\n\n    $scope.addServers = function () {\n        $scope.servers = $scope.servers.concat(makeServers(2));\n    };\n    \n    var allLazyServers = makeServers(701);\n\n    var serverInterface = {\n        getItems: function (pageNumber, itemsPerPage, params) {\n            var deferred = $q.defer();\n            var filterText = params.filterText;\n            var sortColumn = params.sortColumn;\n            var sortDirection = params.sortDirection;\n\n            if (sortColumn === 'name') {\n                sortColumn = 'id';\n            }\n\n            if (sortDirection === 'DESCENDING') {\n                sortColumn = '-' + sortColumn;\n            }\n\n            $timeout(function () {\n                var first = pageNumber * itemsPerPage;\n                var added = first + itemsPerPage;\n                var last = (added > allLazyServers.length) ? allLazyServers.length : added;\n\n                var filteredServers = $filter('filter')(allLazyServers, filterText);\n                filteredServers = $scope.osFilter.applyTo(filteredServers);\n                filteredServers = $filter('orderBy')(filteredServers, sortColumn);\n\n                // Return 100 items more than the user's `itemsPerPage`. i.e. if the\n                // user is asking for 25 items per page, return 125 in total\n                var lazyServers = filteredServers.slice(first, last + 100);\n                    \n                var response = {\n                    items: lazyServers,\n                    pageNumber: pageNumber,\n                    totalNumberOfItems: filteredServers.length\n                };\n\n                if (filterText === 'error') {\n                    deferred.reject();\n                } else {\n                    deferred.resolve(response);\n                }\n            }, 1000);\n            return deferred.promise;\n        }\n    };\n\n    $scope.sort = rxSortUtil.getDefault('name', false);\n    $scope.sortCol = function (predicate) {\n        return rxSortUtil.sortCol($scope, predicate);\n    };\n    $scope.data = { searchText: '' };\n    $scope.clearFilter = function () {\n        $scope.data.searchText = '';\n    };\n    $scope.osFilter = SelectFilter.create({\n        properties: ['os'],\n        available: {\n            os: os\n        }\n    });\n    $scope.serverInterface = serverInterface;\n    $scope.pagedServers = PageTracking.createInstance({ itemsPerPage: 25 });\n}\n",
            "html": "<div ng-controller=\"rxPaginateCtrl\">\n    <h2 class=\"title\">UI-Based Pagination</h2>\n    <table class=\"table-striped demo-ui-pagination\">\n        <thead>\n            <tr>\n                <th class=\"column-title\" style=\"width:10em;\">Name</th>\n                <th class=\"column-title\">OS</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr ng-repeat=\"server in servers | orderBy: sorter.predicate:sorter.reverse | Paginate:pager \">\n                <td>\n                    {{server.name}}\n                </td>\n                <td>{{server.os}}</td>\n            </tr>\n        </tbody>\n        <tfoot>\n            <tr class=\"paginate-area\">\n                <td colspan=\"2\">\n                    <rx-paginate page-tracking=\"pager\"></rx-paginate>\n                </td>\n            </tr>\n        </tfoot>\n    </table>\n\n    <p>Use these buttons to adjust the number of pages displayed. The pagination will hide when there is only one page available.</p>\n    <p>\n        <button ng-click=\"removeServers()\" class=\"button sm negative\">Remove first 2 servers</button>\n        <button ng-click=\"addServers()\" class=\"button sm positive\">Add 2 servers</button>\n    </p>\n    \n    <h2 class=\"title\">API-Based Pagination</h2>\n    <p>The API used by this demo is returning 100 items more than the user's selected `itemsPerPage`. If the user's `itemsPerPage` is 25, then the API will return 125 items on each request. This means with the default `itemsPerPage` of 25, five pages of results are coming back at a time. You should be able to click through pages 1-5 without a loading message, and then the loading message will appear for page 6.</p>\n\n    <p>Click the \"Refresh\" button to see how the current page can be reloaded without the user interacting with the <code>&lt;rx-paginate&gt;</code> buttons.</p>\n\n    <p>Enter a search string of \"error\" to see the default error handling.</p>\n   \n    <button ng-click=\"pagedServers.refresh()\" class=\"button sm\">Refresh</button>\n    <table rx-floating-header rx-loading-overlay class=\"table-striped demo-api-pagination\">\n        <thead>\n            <tr>\n                <th colspan=\"2\" class=\"filter-header\">\n                    <rx-search-box rx-placeholder=\"'Filter by any...'\" ng-model=\"data.searchText\"></rx-search-box>\n                    <rx-select-filter filter=\"osFilter\"></rx-select-filter>\n                </th>\n            </tr>\n            <tr>\n                <th class=\"column-title\" style=\"width:10em;\">\n                    <rx-sortable-column\n                        sort-method=\"sortCol(property)\"\n                        sort-property=\"name\"\n                        predicate=\"sort.predicate\"\n                        reverse=\"sort.reverse\">\n                        Name\n                    </rx-sortable-column>\n                </th>\n                <th class=\"column-title\">\n                    <rx-sortable-column\n                        sort-method=\"sortCol(property)\"\n                        sort-property=\"os\"\n                        predicate=\"sort.predicate\"\n                        reverse=\"sort.reverse\">\n                        OS\n                    </rx-sortable-column>\n                </th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr ng-repeat=\"server in pagedServers.items\">\n                <td>\n                    {{server.name}}\n                </td>\n                <td>{{server.os}}</td>\n            </tr>\n        </tbody>\n        <tfoot>\n            <tr class=\"paginate-area\">\n                <td colspan=\"2\">\n                    <rx-paginate\n                        page-tracking=\"pagedServers\"\n                        server-interface=\"serverInterface\"\n                        error-message=\"Error loading page!\"\n                        filter-text=\"data.searchText\"\n                        selections=\"osFilter.selected\"\n                        sort-column=\"sort.predicate\"\n                        sort-direction=\"sort.reverse\">\n                    </rx-paginate>\n                </td>\n            </tr>\n        </tfoot>\n    </table>\n</div>\n<style>\n    rx-search-box {\n        font-style: italic;\n    }\n    rx-select-filter {\n        margin-left: 20px;\n    }\n    .os-filter .rx-multi-select {\n        width: 200px;\n    }\n</style>\n",
            "less": "/*\n  rxPaginate\n\n */\n\n @paginationColor: #ababab;\n\n.paginate-area {\n    text-align: center;\n    td {\n        padding: 0;\n        background: #fff;\n    }\n}\n\n.rx-paginate {\n    .pagination {\n        .flexbox();\n        .flex-flow(row nowrap);\n        padding-left: 0;\n        width: 100%;\n    }\n\n    .pagination li {\n        display: inline;\n    }\n\n    .pagination li a {\n        cursor: pointer;\n    }\n\n    .pagination li a,\n    .pagination li span {\n        position: relative;\n        float: left;\n        padding: 6px 12px;\n        margin-left: -1px;\n        text-decoration: none;\n        background: #fff;\n        border-top: 2px solid transparent;\n        color: @paginationColor;\n    }\n\n    .pagination > li:first-child {\n        order: 1;\n    }\n\n    .pagination > li:first-child > a,\n    .pagination > li:first-child > span {\n        padding-left: 30px;\n        color: @infoBlue;\n        background: transparent;\n        &:before {\n            content: \".\";\n            width: 0;\n            height: 0;\n            font-size: 0;\n            display: block;\n            position: absolute;\n            border: 6px solid transparent;\n            border-bottom-color: @infoBlue;\n            border-top: none;\n            left: 10px;\n            top: 55%;\n            margin-top: -4px;\n        }\n    }\n\n    .pagination > li:nth-child(2) {\n        order: 2;\n        padding: 6px 12px;\n        border-top: 2px solid transparent;\n        color: @paginationColor;\n    }\n\n    .pagination > .page-links {\n        order: 3;\n        margin: auto;\n        align-self: center;\n    }\n\n    .pagination > li:last-child {\n        order: 4;\n        border-top: 2px solid transparent;\n        padding: 6px 12px;\n        color: @paginationColor;\n        button[disabled] {\n            color: @paginationColor;\n        }\n    }\n\n    .pagination > li > div > ul {\n        float: right;\n        padding-left: 5px;\n        button {\n            padding: 0;\n            border: 0;\n            background: transparent;\n            color: @infoBlue;\n        }\n        span {\n            float: none;\n            background: transparent;\n        }\n        & li + li::before {\n           content: \" | \";\n           margin: 0 1em;\n        }\n    }\n\n    .pagination > li:last-child > a,\n    .pagination > li:last-child > span {\n    }\n\n    .pagination > .page-links > li > a:hover,\n    .pagination > .page-links > li > span:hover,\n    .pagination > .page-links > li > a:focus,\n    .pagination > .page-links > li > span:focus {\n        background: #eee;\n    }\n\n    .pagination > .page-links > .active > a,\n    .pagination > .page-links > .active > span,\n    .pagination > .page-links > .active > a:hover,\n    .pagination > .page-links > .active > span:hover,\n    .pagination > .page-links > .active > a:focus,\n    .pagination > .page-links > .active > span:focus {\n        z-index: 2;\n        cursor: default;\n        border-top-color: #000;\n        color: #000;\n        background: #fff;\n    }\n\n    .pagination .disabled > span,\n    .pagination .disabled > span:hover,\n    .pagination .disabled > span:focus,\n    .pagination .disabled > a,\n    .pagination .disabled > a:hover,\n    .pagination .disabled > a:focus {\n        visibility: hidden;\n    }\n\n    .pagination-lg > li > a,\n    .pagination-lg > li > span {\n        padding: 10px 16px;\n        font-size: 18px;\n    }\n\n    .pagination-sm > li > a,\n    .pagination-sm > li > span {\n        padding: 5px 10px;\n        font-size: 12px;\n    }\n}\n\n.loading-overlay {\n    position: absolute;\n    background: rgba(222, 222, 221, 0.8);\n    .loading-text-wrapper {\n        width: 100px;\n        margin: 20% auto;\n    }\n    .loading-text {\n        font-size: 18px;\n        margin-top: 15%;\n        text-align: center;\n        color: #777;\n    }\n    i {\n        font-size: 30px;\n        margin-left: 25px;\n        color: #777;\n    }\n}\n\n.loading-row {\n    padding: 10px;\n}\n",
            "midway": "var exercise = require('../rxPaginate.exercise.js');\nvar rxSortableColumn = require('../../rxSortableColumn/rxSortableColumn.page').rxSortableColumn;\nvar rxSelectFilter = require('../../rxSelectFilter/rxSelectFilter.page').rxSelectFilter;\nvar rxSearchBox = require('../../rxSearchBox/rxSearchBox.page').rxSearchBox;\nvar Page = require('astrolabe').Page;\n\n// rowFromElement and table are anonymous page objects to assist with table data\nvar rowFromElement = function (rowElement) {\n    return Page.create({\n\n        name: {\n            get: function () {\n                return rowElement.element(by.binding('name')).getText();\n            }\n        },\n\n        os: {\n            get: function () {\n                return rowElement.element(by.binding('os')).getText();\n            }\n        },\n    });\n};\nvar repeaterString = 'server in pagedServers.items';\nvar tableSelector = '.demo-api-pagination';\nvar table = Page.create({\n\n    tblResults: {\n        get: function () {\n            return element.all(by.repeater(repeaterString));\n        }\n    },\n\n    count: {\n        value: function () {\n            return this.tblResults.count();\n        }\n    },\n\n    row: {\n        value: function (rowIndex) {\n            return rowFromElement(this.tblResults.get(rowIndex));\n        }\n    },\n\n    column: {\n        value: function (columnName) {\n            var column = element(by.cssContainingText(tableSelector + ' rx-sortable-column', columnName));\n            return rxSortableColumn.initialize(column, repeaterString);\n        }\n    },\n\n    textFilter: {\n        get: function () {\n            return rxSearchBox.main.term;\n        },\n        set: function (filterTerm) {\n            rxSearchBox.main.term = filterTerm;\n        }\n    },\n\n    selectFilter: {\n        value: function (filterData) {\n            rxSelectFilter.main.apply(filterData);\n        }\n    }\n});\n\ndescribe('rxPaginate', function () {\n\n    before(function () {\n        demoPage.go('#/component/rxPaginate');\n    });\n\n    describe('UI pagination exercises', exercise.rxPaginate({\n        pageSizes: [3, 50, 200, 350, 500],\n        defaultPageSize: 3,\n        cssSelector: '.demo-ui-pagination .rx-paginate'\n    }));\n\n    describe('API pagination exercises', exercise.rxPaginate({\n        pageSizes: [25, 50, 200, 350, 500],\n        defaultPageSize: 25,\n        pages: 30,\n        cssSelector: '.demo-api-pagination .rx-paginate'\n    }));\n    describe('Filter and sort tests', function () {\n        var nameColumn = table.column('Name');\n        var osColumn = table.column('OS');\n\n        beforeEach(function () {\n            table.textFilter = '';\n            table.selectFilter({\n                Os: { All: true }\n            });\n            nameColumn.sortAscending();\n        });\n\n        it('should get new items when filter text is entered', function () {\n            table.textFilter = 'Ubuntu';\n            expect(table.row(0).name).to.eventually.equal('Server 3');\n            expect(table.row(0).os).to.eventually.equal('Ubuntu 13.04');\n        });\n\n        it('should get new items when the select filter is used', function () {\n            table.selectFilter({\n                Os: {\n                    All: false,\n                    Centos: true\n                }\n            });\n            expect(table.row(0).name).to.eventually.equal('Server 2');\n            expect(table.row(0).os).to.eventually.equal('CentOS 6.4');\n        });\n\n        it('should sort the Name column descending', function () {\n            nameColumn.sortDescending();\n            expect(table.row(0).name).to.eventually.equal('Server 701');\n        });\n\n        it('should sort the OS column descending', function () {\n            osColumn.sortDescending();\n            expect(table.row(0).os).to.eventually.equal('Ubuntu 13.04');\n        });\n\n    });\n});\n\n// this component's exercise.js file, if it exists, is below\n\nvar _ = require('lodash');\n\nvar rxPaginate = require('./rxPaginate.page').rxPaginate;\n\n/**\n   rxPaginate exercises.\n   @exports encore.exercise.rxPaginate\n   @param {Object} [options=] - Test options. Used to build valid tests.\n   @param {string} [options.cssSelector=] - Fallback selector string to initialize pagination widget with.\n   @param {string} [options.pages=6] - Estimated page size in the pagination widget.\n   @param {number[]} [options.pageSizes=50, 200, 350, 500] - Page sizes to validate.\n   @param {number} [options.defaultPageSize=50] - Default page size on page load.\n   @param {number} [options.invalidPageSize=45] - For testing resizing pagination to invalid items per page.\n   @example\n   ```js\n   describe('default exercises', encore.exercise.rxPaginate({\n       cssSelector: '.secondary-info rx-paginate', // select one of many pagination tables\n       pages: 20 // will exercise full functionality at 6, limited functionality at 2\n   }));\n   ```\n */\nexports.rxPaginate = function (options) {\n    if (options === undefined) {\n        options = {};\n    }\n\n    options = _.defaults(options, {\n        pages: 6,\n        pageSizes: [50, 200, 350, 500],\n        defaultPageSize: 50,\n        invalidPageSize: 45\n    });\n\n    return function () {\n        var pagination;\n\n        before(function () {\n            if (options.cssSelector === undefined) {\n                pagination = rxPaginate.main;\n            } else {\n                pagination = rxPaginate.initialize($(options.cssSelector));\n            }\n        });\n\n        if (options.pages > 1) {\n            it('should navigate forward one page at a time', function () {\n                pagination.next();\n                expect(pagination.page).to.eventually.equal(2);\n            });\n\n            it('should navigate backwards one page at a time', function () {\n                pagination.previous();\n                expect(pagination.page).to.eventually.equal(1);\n            });\n\n            it('should navigate to the last page', function () {\n                pagination.page.then(function (page) {\n                    var firstPage = page;\n                    pagination.last();\n                    expect(pagination.page).to.eventually.be.above(firstPage);\n                    pagination.first();\n                });\n            });\n        }\n\n        if (options.pages > 5) {\n            it('should jump forward to page 6 using pagination', function () {\n                pagination.page = 6;\n                expect(pagination.page).to.eventually.equal(6);\n            });\n\n            it('should jump backward to page 2 using pagination', function () {\n                pagination.page = 2;\n                expect(pagination.page).to.eventually.equal(2);\n                pagination.page = 1;\n            });\n        }\n\n        it('should not allow navigating `next` the last page', function () {\n            expect(pagination.next).to.throw(pagination.NoSuchPageException);\n        });\n\n        it('should allow attempting to navigate to the last page when already on the last page', function () {\n            pagination.last();\n            pagination.page.then(function (page) {\n                pagination.last();\n                expect(pagination.page).to.eventually.equal(page);\n            });\n        });\n\n        it('should navigate to the first page', function () {\n            pagination.first();\n            expect(pagination.page).to.eventually.equal(1);\n        });\n\n        it('should not allow navigating `prev` the first page', function () {\n            expect(pagination.previous).to.throw(pagination.NoSuchPageException);\n        });\n\n        it('should allow attempting to navigate to the first page when already on the first page', function () {\n            pagination.first();\n            expect(pagination.page).to.eventually.equal(1);\n        });\n\n        it('should have all available page sizes', function () {\n            expect(pagination.pageSizes).to.eventually.eql(options.pageSizes);\n        });\n\n        it('should highlight the current items per page selection', function () {\n            expect(pagination.pageSize).to.eventually.equal(options.defaultPageSize);\n        });\n\n        it('should list the lower bounds of the shown items currently in the table', function () {\n            expect(pagination.shownItems.first).to.eventually.equal(1);\n        });\n\n        it('should list the upper bounds of the shown items currently in the table', function () {\n            expect(pagination.shownItems.last).to.eventually.not.be.above(options.defaultPageSize);\n        });\n\n        it('should know the total number of pages without visiting it', function () {\n            pagination.totalPages.then(function (totalPages) {\n                pagination.last();\n                expect(pagination.page).to.eventually.equal(totalPages);\n                pagination.first();\n            });\n        });\n\n        if (options.pageSizes.length > 1) {\n\n            it('should switch to a different items per page', function () {\n                pagination.pageSize = options.pageSizes[1];\n                expect(pagination.pageSize).to.eventually.equal(options.pageSizes[1]);\n                pagination.pageSize = options.pageSizes[0];\n            });\n\n            if (options.pages > 1) {\n                it('should put the user back on the first page after resizing the items per page', function () {\n                    pagination.page = 2;\n                    pagination.pageSize = options.pageSizes[1];\n                    expect(pagination.page).to.eventually.equal(1);\n                    pagination.pageSize = options.pageSizes[0];\n                });\n            }\n\n        }\n\n        it('should not fail to match the lower bounds of the shown items even if not displayed', function () {\n            expect(pagination.shownItems.first).to.eventually.equal(1);\n        });\n\n        // execute only if the greatest items per page setting can contain all items\n        if (_.first(options.pageSizes) * options.pages < _.last(options.pageSizes)) {\n\n            it('should not fail to match the upper bounds of the shown items even if not displayed', function () {\n                pagination.pageSize = _.last(options.pageSizes);\n                pagination.shownItems.total.then(function (totalItems) {\n                    expect(pagination.shownItems.last).to.eventually.equal(totalItems);\n                    pagination.pageSize = options.defaultPageSize;\n                });\n            });\n        }\n\n        if (options.invalidPageSize) {\n\n            it('should not allow selecting an unavailable items per page', function () {\n                var fn = function () {\n                    var pageSizeFn = pagination.__lookupSetter__('pageSize');\n                    return protractor.promise.fulfilled(pageSizeFn.call(pagination, options.invalidPageSize));\n                };\n                expect(fn()).to.be.rejectedWith(pagination.NoSuchItemsPerPage);\n            });\n\n        }\n\n    };\n};\n"
        }
    },
    {
        "name": "rxPermission",
        "moduleName": "'encore.ui.rxPermission'",
        "displayName": "Rx Permission",
        "srcFiles": [
            "src/rxPermission/rxPermission.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [
            "templates/rxPermission/templates/rxPermission.html"
        ],
        "dependencies": [
            "rxSession",
            "rxLocalStorage"
        ],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\"></a></p>\n<p>Service and directive for mananging permissions in EncoreUI</p>\n",
            "js": "function rxPermissionCtrl ($scope, Session, rxNotify) {\n    rxNotify.add('Respect My Authority!!', {\n        stack: 'permission',\n        type: 'warning'\n    });\n\n    $scope.storeToken = function () {\n        Session.storeToken({ access: { user: { roles: [{ name: 'test' } ] }}});\n    }\n\n    $scope.clearToken = function () {\n        Session.logout();\n    };\n}\n",
            "html": "<!-- Sample HTML goes here as a live example of how to the component can be used -->\n<div ng-controller=\"rxPermissionCtrl\">\n    <button class=\"storeToken button\" name=\"button\" ng-click=\"storeToken()\">Store Token</button>\n    <button class=\"clearToken button button-negative\" name=\"button\" ng-click=\"clearToken()\">Clear Token</button>\n\n    <rx-permission role=\"test\">\n        <rx-notifications stack=\"permission\"></rx-notifications>\n    </rx-permission>\n</div>\n",
            "less": "",
            "midway": "var rxPermissionPage = require('../rxPermission.page').rxPermission;\n\ndescribe('rxPermission', function () {\n\n    before(function () {\n        demoPage.go('#/component/rxPermission');\n    });\n\n    it('rxPermission should display and hide content when appropriate', function () {\n        var rxPermission = rxPermissionPage.rxPermission;\n        expect(rxPermission.isDisplayed()).to.eventually.be.false;\n        demoPage.storeTokenButton.click();\n        expect(rxPermission.isDisplayed()).to.eventually.be.true;\n        demoPage.clearTokenButton.click();\n        expect(rxPermissionPage.rxPermission.isDisplayed()).to.eventually.be.false;\n    });\n});\n\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    },
    {
        "name": "rxRadio",
        "moduleName": "'encore.ui.rxRadio'",
        "displayName": "Rx Radio",
        "srcFiles": [
            "src/rxRadio/rxRadio.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/experimental.svg\" alt=\"experimental\"></a></p>\n<p>rxRadio is an <strong>attribute directive</strong> that wraps a native radio element in markup required for styling purposes.\nTo use the directive, you can replace <code>type=&quot;radio&quot;</code> with <code>rx-radio</code>. The directive is smart enough to set\nthe correct input type.</p>\n<h2>Styling</h2>\n<ul>\n<li>Directive results in an <strong>inline-block element</strong></li>\n<li>You can style the output against decendents of the <strong><code>.rxRadio</code></strong> CSS class.</li>\n</ul>\n<h2>Show/Hide</h2>\n<p>If you wish to show/hide your <code>rxRadio</code> element (and its label), we recommend placing the element (and its label)\ninside of a <code>&lt;div&gt;</code> or <code>&lt;span&gt;</code> wrapper, and performing the show/hide logic on the wrapper.</p>\n<pre><code class=\"lang-html\">&lt;span ng-show=&quot;isShown&quot;&gt;\n  &lt;input rx-radio id=&quot;radDemo&quot; ng-model=&quot;radDemo&quot; /&gt;\n  &lt;label for=&quot;radDemo&quot;&gt;Label for Demo Radio&lt;/label&gt;\n&lt;/span&gt;\n</code></pre>\n<p>It is highly recommended that you use <code>ng-show</code> and <code>ng-hide</code> for display logic. Because of the way that <code>ng-if</code> and <code>ng-switch</code>\ndirectives behave with scope, they may introduce unnecessary complexity in your code.</p>\n",
            "js": "/*jshint unused:false*/\nangular.module('demoApp')\n.controller('rxRadioCtrl', function ($scope) {\n    $scope.ngDisabledRadio = 1;\n    $scope.disabledRadio = 1;\n    $scope.enabledRadio = 1;\n    $scope.errRadio = 1;\n    $scope.radCreateDestroy = 'destroyed';\n});\n",
            "html": "<!-- Sample HTML goes here as a live example of how the component can be used -->\n<div ng-controller=\"rxRadioCtrl\">\n\n  <h2 class=\"title\">Examples</h2>\n\n  <h3 class=\"title\">Show/Hide Input</h3>\n  <p>\n    <strong>Do you like bacon?</strong>\n    <small ng-show=\"likesbacon\">({{likesbacon}})</small>\n  </p>\n  <p>\n    <input rx-radio\n           id=\"radHateBacon\"\n           value=\"hate it\"\n           ng-model=\"likesbacon\"\n           ng-required=\"true\" />\n    <label for=\"radHateBacon\">I hate bacon</label>\n  </p>\n  <p>\n    <input rx-radio\n           id=\"radLikeBacon\"\n           value=\"like it\"\n           ng-model=\"likesbacon\"\n           ng-required=\"true\" />\n    <label for=\"radLikeBacon\">I like bacon</label>\n  </p>\n  <p ng-show=\"likesbacon && likesbacon !== 'hate it'\">\n    <input rx-radio\n           id=\"radLoveBacon\"\n           value=\"love it\"\n           ng-model=\"likesbacon\"\n           ng-required=\"true\" />\n    <label for=\"radLoveBacon\">Actually, I LOVE bacon</label>\n  </p>\n\n  <br />\n\n  <h3 class=\"title\">Destroy Input</h3>\n  <p>Suport for <code>$destroy</code> events.</p>\n  <p>\n    <span>\n      <input rx-radio\n             id=\"radDestroyed\"\n             value=\"destroyed\"\n             ng-model=\"radCreateDestroy\" />\n      <label for=\"radDestroy\">Destroyed</label>\n    </span>\n    &nbsp;\n    <span>\n      <input rx-radio\n             id=\"radCreated\"\n             value=\"created\"\n             ng-model=\"radCreateDestroy\" />\n      <label for=\"radCreate\">Created</label>\n    </span>\n  </p>\n  <p>\n    The following radio is <code>{{radCreateDestroy}}</code>:\n    <input rx-radio\n           checked\n           id=\"radTargetCreated\"\n           ng-if=\"radCreateDestroy === 'created'\" />\n  </p>\n\n  <!-- END DEMO CODE -->\n  <!-- END DEMO CODE -->\n  <!-- END DEMO CODE -->\n\n  <h2 class=\"title\">Radio States</h3>\n  <table>\n    <thead>\n      <tr>\n        <th>Disabled (ng-disable)</th>\n        <th>Disabled (disabled)</th>\n        <th>Valid</th>\n        <th>Invalid</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <!-- NG-Disabled -->\n        <td>\n          <p>\n            <input rx-radio\n                   id=\"radOne\"\n                   value=\"1\"\n                   ng-disabled=\"true\"\n                   ng-model=\"ngDisabledRadio\" />\n            <label for=\"radOne\">Selected</label>\n          </p>\n          <p>\n            <input rx-radio\n                   id=\"radTwo\"\n                   value=\"2\"\n                   ng-disabled=\"true\"\n                   ng-model=\"ngDisabledRadio\" />\n            <label for=\"radTwo\">Unselected</label>\n          </p>\n        </td>\n\n        <!-- Native Disabled -->\n        <td>\n          <p>\n            <input rx-radio\n                   id=\"radSeven\"\n                   value=\"1\"\n                   disabled\n                   ng-model=\"disabledRadio\" />\n            <label for=\"radSeven\">Selected</label>\n          </p>\n          <p>\n            <input rx-radio\n                   id=\"radEight\"\n                   value=\"2\"\n                   disabled\n                   ng-model=\"disabledRadio\" />\n            <label for=\"radEight\">Unselected</label>\n          </p>\n        </td>\n\n        <!-- Valid -->\n        <td>\n          <p>\n            <input rx-radio\n                   id=\"radThree\"\n                   value=\"1\"\n                   ng-model=\"enabledRadio\" />\n            <label for=\"radThree\">Selected</label>\n          </p>\n          <p>\n            <input rx-radio\n                   id=\"radFour\"\n                   value=\"2\"\n                   ng-model=\"enabledRadio\" />\n            <label for=\"radFour\">Unselected</label>\n          </p>\n        </td>\n\n        <!-- Invalid -->\n        <td>\n          <p>\n            <input rx-radio\n                   id=\"radFive\"\n                   value=\"1\"\n                   ng-model=\"errRadio\"\n                   always-invalid />\n            <label for=\"radFive\">Selected</label>\n          </p>\n          <p>\n            <input rx-radio\n                   id=\"radSix\"\n                   value=\"2\"\n                   ng-model=\"errRadio\"\n                   always-invalid />\n            <label for=\"radSix\">Unselected</label>\n          </p>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n\n<h3 class=\"title\">Attributes</h3>\n<table class=\"component-attributes table-striped\">\n  <thead>\n    <tr>\n      <th>Attribute</th>\n      <th>Required?</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>\n        <code>ng-disabled</code>\n      </th>\n      <td><em>optional</em></td>\n      <td>\n        In addition to default functionality, this will add/remove the <code>rx-disabled</code> class on the control wrapper for purposes of styling sibling elements.\n      </td>\n    </tr>\n  </tbody>\n</table>\n",
            "less": "/*\n * rxRadio\n */\n.rxRadio {\n  display: inline-block;\n  width: @rxRadio-size;\n  height: @rxRadio-size;\n  background-color: transparent;\n  position: relative;\n\n  input[type=\"radio\"],\n  .fake-radio {\n    position: absolute;\n    top: 0;\n    left: 0;\n    display: block;\n    margin: 0px;\n    padding: 0px;\n    border: 0px;\n    outline: 0px;\n  }\n\n  .fake-radio {\n    .box-sizing(border-box);\n    z-index: 0;\n    width: 100%;\n    height: 100%;\n    .border-radius(100%);\n    overflow: hidden;\n    border: @rxRadio-border-width solid @inputBorderColor;\n    background-color: @rxRadio-background-color;\n\n    // perfect center alignment for tick\n    .flexbox();\n    .flex-flow(row nowrap);\n    .align-items(center);\n    .justify-content(center);\n\n    .tick {\n      .flex(0 0 auto);\n      .box-sizing(border-box);\n      .border-radius(@rxRadio-tick-border-radius);\n      width: @rxRadio-tick-size;\n      height: @rxRadio-tick-size;\n      background-color: transparent;\n    }\n  }//.fake-radio\n\n  &.rx-disabled + label {\n    color: @inputColorDisabled;\n  }\n\n  input[type=\"radio\"] {\n    z-index: 1;\n    height: 110%;\n    width: 110%;\n    opacity: 0;\n    cursor: pointer;\n\n    // enabled checked\n    &:checked + .fake-radio {\n      border-color: @rxRadio-color-selected;\n\n      .tick {\n        background-color: @rxRadio-color-selected;\n      }\n    }\n\n    &[disabled] {\n      cursor: not-allowed;\n\n      // disabled, unchecked\n      & + .fake-radio {\n        border-color: @inputBackgroundDisabled;\n      }\n\n      &:checked + .fake-radio .tick {\n        background: @inputBackgroundDisabled;\n      }\n    }//[disabled]\n\n    &.ng-invalid {\n      // enabled unchecked error\n      & + .fake-radio {\n        border: @rxRadio-border-width-invalid solid @rxRadio-color-error;\n\n        .tick {\n          .border-radius(@rxRadio-tick-border-radius-invalid);\n          width: @rxRadio-tick-size-invalid;\n          height: @rxRadio-tick-size-invalid;\n        }\n      }\n\n      &:checked + .fake-radio .tick {\n        background: @rxRadio-color-error;\n      }\n    }\n  }//input\n}//.rxRadio\n",
            "midway": "var rxRadioPage = require('../rxRadio.page').rxRadio;\nvar exercise = require('../rxRadio.exercise');\n\ndescribe('rxRadio', function () {\n    var subject;\n\n    before(function () {\n        demoPage.go('#/component/rxRadio');\n    });\n\n    describe('(State) NG-Disabled Selected', exercise.rxRadio({\n        cssSelector: '#radOne',\n        disabled: true,\n        selected: true,\n        valid: true\n    }));\n\n    describe('(State) NG-Disabled Unselected', exercise.rxRadio({\n        cssSelector: '#radTwo',\n        disabled: true,\n        selected: false,\n        valid: true\n    }));\n\n    describe('(State) Disabled Selected', exercise.rxRadio({\n        cssSelector: '#radSeven',\n        disabled: true,\n        selected: true,\n        valid: true\n    }));\n\n    describe('(State) Disabled Unselected', exercise.rxRadio({\n        cssSelector: '#radEight',\n        disabled: true,\n        selected: false,\n        valid: true\n    }));\n\n    describe('(State) Valid Selected', exercise.rxRadio({\n        cssSelector: '#radThree',\n        disabled: false,\n        selected: true,\n        valid: true\n    }));\n\n    describe('(State) Valid Unselected', exercise.rxRadio({\n        cssSelector: '#radFour',\n        disabled: false,\n        selected: false,\n        valid: true\n    }));\n\n    describe('(State) Invalid Selected', exercise.rxRadio({\n        cssSelector: '#radFive',\n        disabled: false,\n        selected: true,\n        valid: false\n    }));\n\n    describe('(State) Invalid Unselected', exercise.rxRadio({\n        cssSelector: '#radSix',\n        disabled: false,\n        selected: false,\n        valid: false\n    }));\n\n    describe('Show/Hide Input', function () {\n        var radHate, radLike, radLove;\n\n        before(function () {\n            radHate = rxRadioPage.initialize($('#radHateBacon'));\n            radLike = rxRadioPage.initialize($('#radLikeBacon'));\n            radLove = rxRadioPage.initialize($('#radLoveBacon'));\n        });\n\n        describe('\"I hate bacon\"', function () {\n            before(function () {\n                subject = radHate;\n            });\n\n            it('should be visible', function () {\n                expect(subject.isDisplayed()).to.eventually.be.true;\n            });\n\n            it('should not be valid', function () {\n                expect(subject.isValid()).to.eventually.be.false;\n            });\n        });\n\n        describe('\"Actually, I LOVE bacon\"', function () {\n            before(function () {\n                subject = radLove;\n            });\n\n            it('should not be visible', function () {\n                expect(subject.isDisplayed()).to.eventually.be.false;\n            });\n\n            it('should not be valid', function () {\n                expect(subject.isValid()).to.eventually.be.false;\n            });\n        });\n\n        describe('\"I like bacon\"', function () {\n            before(function () {\n                subject = radLike;\n            });\n\n            it('should be visible', function () {\n                expect(subject.isDisplayed()).to.eventually.be.true;\n            });\n\n            it('should not be valid', function () {\n                expect(subject.isValid()).to.eventually.be.false;\n            });\n\n            describe('when selected', function () {\n                before(function () {\n                    subject.select();\n                });\n\n                it('should be valid', function () {\n                    expect(subject.isValid()).to.eventually.be.true;\n                });\n\n                describe('\"I hate bacon\"', function () {\n                    it('should be valid', function () {\n                        expect(radHate.isValid()).to.eventually.be.true;\n                    });\n                });\n\n                describe('\"Actually, I LOVE bacon\"', function () {\n                    before(function () {\n                        subject = radLove;\n                    });\n\n                    it('should be visible', function () {\n                        expect(subject.isDisplayed()).to.eventually.be.true;\n                    });\n\n                    it('should be valid', function () {\n                        expect(subject.isValid()).to.eventually.be.true;\n                    });\n                });\n            });\n        });\n    });//Show/Hide Input\n\n    describe('Destroy Input', function () {\n        var radCreated, radDestroyed, radTargetCreated;\n\n        before(function () {\n            radCreated = rxRadioPage.initialize($('#radCreated'));\n            radDestroyed = rxRadioPage.initialize($('#radDestroyed'));\n            radTargetCreated = rxRadioPage.initialize($('#radTargetCreated'));\n        });\n\n        it('\"Destroyed\" should be selected', function () {\n            expect(radDestroyed.isSelected()).to.eventually.be.true;\n        });\n\n        it('\"Created\" should not be selected', function () {\n            expect(radCreated.isSelected()).to.eventually.be.false;\n        });\n\n        it('target radio should not be present', function () {\n            radTargetCreated = rxRadioPage.initialize($('#radTargetCreated'));\n            expect(radTargetCreated.isPresent()).to.eventually.be.false;\n        });\n\n        describe('when \"Created\" is selected', function () {\n            before(function () {\n                radCreated.select();\n            });\n\n            it('\"Destroyed\" should not be selected', function () {\n                expect(radDestroyed.isSelected()).to.eventually.be.false;\n            });\n\n            it('target radio should be present', function () {\n                radTargetCreated = rxRadioPage.initialize($('#radTargetCreated'));\n                expect(radTargetCreated.isPresent()).to.eventually.be.true;\n            });\n        });\n\n        describe('when \"Destroyed\" is selected again', function () {\n            before(function () {\n                radDestroyed.select();\n            });\n\n            it('\"Created\" should not be selected', function () {\n                expect(radCreated.isSelected()).to.eventually.be.false;\n            });\n\n            it('target radio should not be present', function () {\n                radTargetCreated = rxRadioPage.initialize($('#radTargetCreated'));\n                expect(radTargetCreated.isPresent()).to.eventually.be.false;\n            });\n        });\n    });//Destroy Input\n});\n\n// this component's exercise.js file, if it exists, is below\n\nvar _ = require('lodash');\nvar rxRadio = require('./rxRadio.page').rxRadio;\n\n/**\n * @description rxRadio exercises\n * @exports encore.exercise.rxRadio\n * @param {Object} [options=] - Test options. Used to build valid tests.\n * @param {String} [options.cssSelector=] - Fallback selector string with which to initialize widget.\n * @param {Boolean} [options.disabled=false] - Determines if the radio is disabled.\n * @param {Boolean} [options.selected=false] - Determines if the radio is selected.\n * @param {Boolean} [options.visible=true] - Determines if the radio is visible.\n * @param {Boolean} [options.valid=true] - Determines if the radio is valid.\n */\nexports.rxRadio = function (options) {\n    if (options === undefined) {\n        options = {};\n    }\n\n    options = _.defaults(options, {\n        disabled: false,\n        selected: false,\n        visible: true,\n        valid: true\n    });\n\n    return function () {\n        var component;\n\n        before(function () {\n            if (options.cssSelector === undefined) {\n                component = rxRadio.main;\n            } else {\n                component = rxRadio.initialize($(options.cssSelector));\n            }\n        });\n\n        it('should be a radio type', function () {\n            expect(component.isRadio()).to.eventually.be.true;\n        });\n\n        it('should be present', function () {\n            expect(component.isPresent()).to.eventually.be.true;\n        });\n\n        it('should ' + (options.visible ? 'be' : 'not be') + ' visible', function () {\n            expect(component.isDisplayed()).to.eventually.eq(options.visible);\n        });\n\n        it('should ' + (options.disabled ? 'be' : 'not be') + ' disabled', function () {\n            expect(component.isDisabled()).to.eventually.eq(options.disabled);\n        });\n\n        it('should ' + (options.selected ? 'be' : 'not be') + ' selected', function () {\n            expect(component.isSelected()).to.eventually.eq(options.selected);\n        });\n\n        it('should ' + (options.valid ? 'be' : 'not be') + ' valid', function () {\n            expect(component.isValid()).to.eventually.eq(options.valid);\n        });\n    };\n};\n"
        }
    },
    {
        "name": "rxSearchBox",
        "moduleName": "'encore.ui.rxSearchBox'",
        "displayName": "Rx Search Box",
        "srcFiles": [
            "src/rxSearchBox/rxSearchBox.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [
            "templates/rxSearchBox/templates/rxSearchBox.html"
        ],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/experimental.svg\" alt=\"experimental\"></a></p>\n<p>The <code>rxSearchBox</code> directive behaves similar to the HTML &quot;search&quot; input type.  When the search box is not empty, an &quot;X&quot; button within the element will allow you to clear the value.  Once clear, the &quot;X&quot; will disappear.  A disabled search box cannot be cleared of its value via the &quot;X&quot; button because the button will not display.</p>\n<p>Though it is described as a search box, you can also use it for filtering capabilities (as seen by the placeholder text in the &quot;Customized&quot; demo).</p>\n<h2>Options</h2>\n<table>\n<thead>\n<tr>\n<th>Options</th>\n<th>Required?</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong><code>ng-model</code></strong></td>\n<td><strong>required</strong></td>\n<td>Model value to bind the search value</td>\n</tr>\n<tr>\n<td><code>ng-disabled</code></td>\n<td><em>optional</em></td>\n<td>Boolean value to enable/disable the search box</td>\n</tr>\n<tr>\n<td><code>rx-placeholder</code></td>\n<td><em>optional</em></td>\n<td>String to override the default placeholder (<code>Search...</code>)</td>\n</tr>\n</tbody>\n</table>\n<h2>Styling</h2>\n<p>You can style the <code>&lt;rx-search-box&gt;</code> element via custom CSS classes the same way you would any HTML element. </p>\n<p>See the &quot;Customized&quot; search box in the demo for an example.</p>\n",
            "js": "angular.module('demoApp')\n.controller('rxSearchBoxCtrl', function ($scope) {\n    $scope.searchModel = '';\n    $scope.filterPlaceholder = 'Filter by any...';\n});\n",
            "html": "<!-- Sample HTML goes here as a live example of how the component can be used -->\n<div ng-controller=\"rxSearchBoxCtrl\">\n    <h3 class=\"title sm\">Default</h3>\n    <rx-search-box\n      class=\"default-search-box\"\n      ng-model=\"searchModel\"></rx-search-box>\n\n    <h3 class=\"title sm\">Disabled (shared search model)</h3>\n    <rx-search-box\n        class=\"disabled-search-box\"\n        ng-model=\"searchModel\"\n        ng-disabled=\"true\"></rx-search-box>\n\n    <h3 class=\"title sm\">Customized (100% width, custom placeholder text)</h3>\n    <style>\n      .wide-search-box { width: 100%; }\n    </style>\n    <rx-search-box\n        class=\"wide-search-box\"\n        ng-model=\"customSearchModel\"\n        rx-placeholder=\"filterPlaceholder\"></rx-search-box>\n</div>\n",
            "less": "/*\n * rxSearchBox\n */\nrx-search-box {\n  display: inline-block;\n  width: @rxSearchBox-width;\n  min-width: @rxSearchBox-min-width;\n  font-size: 1.2em;\n\n  // wrapper fits full width\n  .rxSearchBox-wrapper {\n    .box-sizing(border-box);\n    border: @rxSearchBox-border;\n    height: auto;\n    min-width: @rxSearchBox-min-width;\n    padding: 0px;\n\n    background: @rxSearchBox-background;\n    color: @rxSearchBox-color;\n\n    // as flex container\n    .flexbox();\n    .flex-flow(row nowrap);\n    .justify-content(flex-start);\n\n    .rxSearchBox-input {\n      .ResetFormInput();\n      .flex(1 1);\n      .box-sizing(border-box);\n\n      background: transparent;\n      padding: @rxSearchBox-padding-vertical @rxSearchBox-padding-horizontal;\n\n      /*\n      This gets around FireFox setting the min-width to a value\n      that overflows content out of the .rxSearch container.\n       */\n      min-width: (@rxSearchBox-min-width - @rxSearchBox-clear-width - (2 * @rxSearchBox-padding-horizontal));\n\n      &[disabled] {\n        color: @rxSearchBox-color-disabled;\n        background: @rxSearchBox-background-disabled;\n        cursor: not-allowed;\n      }\n    }//.rxSearchBox-input\n\n    .rxSearchBox-clear {\n      .box-sizing(border-box);\n      cursor: pointer;\n      //font-size: 0.75em;\n      color: @rxSearchBox-color-icon;\n\n      // as flex item\n      .flex(0 0 @rxSearchBox-clear-width);\n\n      // as flex container\n      .flexbox();\n      .align-items(center);\n      .justify-content(center);\n\n      .rxSearchBox-clear-icon {\n        min-width: @rxSearchBox-clear-width;\n      }\n    }//.rxSearchBox-clear\n  }//.rxSearchBox-wrapper\n}//rx-search-box\n",
            "midway": "var rxSearchBoxPage = require('../rxSearchBox.page').rxSearchBox;\nvar exercise = require('../rxSearchBox.exercise');\n\ndescribe('rxSearchBox', function () {\n    before(function () {\n        demoPage.go('#/component/rxSearchBox');\n    });\n\n    describe('default rxSearchBox', exercise.rxSearchBox({\n        cssSelector: '.default-search-box'\n    }));\n\n    describe('disabled rxSearchBox', exercise.rxSearchBox({\n        cssSelector: '.disabled-search-box',\n        disabled: true\n    }));\n\n    describe('custom, wide rxSearchBox', exercise.rxSearchBox({\n        cssSelector: '.wide-search-box',\n        placeholder: 'Filter by any...'\n    }));\n});//rxSearchBox\n\n// this component's exercise.js file, if it exists, is below\n\nvar _ = require('lodash');\nvar rxSearchBox = require('./rxSearchBox.page').rxSearchBox;\n\n/**\n   rxSearchBox exercises.\n   @exports encore.exercise.rxSearchBox\n   @param {Object} [options=] - Test options. Used to build valid tests.\n   @param {string} [options.cssSelector=] - Fallback selector string to initialize widget with.\n   @param {boolean} [options.disabled=false] - Determines if the search box is disabled\n   @param {string} [options.placeholder='Search...'] - Expected placeholder value\n   @example\n   ```js\n   describe('default exercises', encore.exercise.rxSearchBox({\n       cssSelector: '.secondary-info rx-search-box', // select one of many widgets on page\n   }));\n   ```\n */\nexports.rxSearchBox = function (options) {\n    if (options === undefined) {\n        options = {};\n    }\n\n    options = _.defaults(options, {\n        disabled: false,\n        placeholder: 'Search...'\n    });\n\n    return function () {\n        var component;\n\n        before(function () {\n            if (options.cssSelector === undefined) {\n                component = rxSearchBox.main;\n            } else {\n                component = rxSearchBox.initialize($(options.cssSelector));\n            }\n        });\n\n        it('should show the element', function () {\n            expect(component.isDisplayed()).to.eventually.be.true;\n        });\n\n        if (options.placeholder) {\n            it('should have a placeholder', function () {\n                expect(component.placeholder).to.eventually.equal(options.placeholder);\n            });\n        }\n\n        if (options.disabled) {\n            describe('when disabled', function () {\n                it('should not display the clear button', function () {\n                    expect(component.isClearable()).to.eventually.be.false;\n                });\n\n                it('should not be searchable', function () {\n                    expect(component.isSearchable()).to.eventually.be.false;\n                });\n            });//when disabled\n        } else {\n            describe('when enabled', function () {\n                it('should be searchable', function () {\n                    expect(component.isSearchable()).to.eventually.be.true;\n                });\n\n                it('should update the search term', function () {\n                    component.term = 'testing';\n                    expect(component.term).to.eventually.equal('testing');\n                });\n\n                it('should be clearable', function () {\n                    expect(component.isClearable()).to.eventually.be.true;\n                });\n\n                it('should clear the search term', function () {\n                    component.clear();\n                    expect(component.term).to.eventually.equal('');\n                });\n\n                it('should not be clearable', function () {\n                    expect(component.isClearable()).to.eventually.be.false;\n                });\n            });//when enabled\n        }\n    };\n};\n"
        }
    },
    {
        "name": "rxSelect",
        "moduleName": "'encore.ui.rxSelect'",
        "displayName": "Rx Select",
        "srcFiles": [
            "src/rxSelect/rxSelect.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\"></a></p>\n<p>The rxSelect component is an <strong>attribute directive</strong> that wraps native select elements in markup required for styling.</p>\n<h2>Styling</h2>\n<ul>\n<li>Directive results in a <strong>block element</strong> that takes up the <em>full width of its container</em>.</li>\n<li>You can style the output against decendents of the <strong><code>.rxSelect</code></strong> CSS class.</li>\n</ul>\n<h2>Show/Hide</h2>\n<p>If you wish to show/hide your <code>rxSelect</code> element, we recommend placing it within a <code>&lt;div&gt;</code> or <code>&lt;span&gt;</code>\nwrapper, and performing the show/hide logic on the wrapper.</p>\n<pre><code class=\"lang-html\">&lt;span ng-show=&quot;isShown&quot;&gt;\n  &lt;select rx-select ng-model=&quot;selDemo&quot;&gt;\n    &lt;option value=&quot;1&quot;&gt;First&lt;/option&gt;\n    &lt;option value=&quot;2&quot;&gt;Second&lt;/option&gt;\n    &lt;option value=&quot;3&quot;&gt;Third&lt;/option&gt;\n  &lt;/select&gt;\n&lt;/span&gt;\n</code></pre>\n<p>It is highly recommended that you use <code>ng-show</code> and <code>ng-hide</code> for display logic. Because of the way that\n<code>ng-if</code> and <code>ng-switch</code> directives behave with scope, they may introduce unnecessary complexity in your code.</p>\n",
            "js": "/*jshint unused:false*/\nangular.module('demoApp')\n.controller('rxSelectCtrl', function ($scope) {\n    $scope.radCreateDestroy = 'destroyed';\n\n    $scope.selOne = 'na';\n    $scope.selTwo = 'na';\n    $scope.selThree = 3;\n    $scope.selFour = 4;\n});\n",
            "html": "<style>\n  .demoContainer { width: 400px; }\n</style>\n\n<div ng-controller=\"rxSelectCtrl\">\n  <div class=\"demoContainer\">\n    <h2 class=\"title\">Examples</h2>\n\n    <h3 class=\"title\">With Validation</h3>\n    <p>\n      <strong>How do you like your bacon?</strong>\n      <small ng-if=\"baconPrep\">({{baconPrep}})</small>\n      <br />\n      <select rx-select\n              id=\"selBaconPrep\"\n              ng-model=\"baconPrep\"\n              ng-required=\"true\">\n        <option value=\"\">I do not like bacon</option>\n        <option value=\"thin\">Thin (light and crispy)</option>\n        <option value=\"medium\">Medium (perfect balance of flavor)</option>\n        <option value=\"thick\">Thick (borderline jerky)</option>\n        <option value=\"crumbled\">Crumbled (great on salads)</option>\n      </select>\n    </p>\n    <br />\n\n    <h3 class=\"title\">Show/Hide Select</h3>\n    <p>\n      <input rx-checkbox id=\"chkShow\" ng-model=\"isShown\" />\n      <label for=\"chkShow\">Show?</label><br />\n      <span ng-show=\"isShown\">\n        <select rx-select id=\"selTargetShow\">\n          <option>I'm visible!</option>\n        </select>\n      </span>\n    </p>\n\n    <h3 class=\"title\">Destroy Select</h3>\n    <p>Support for <code>$destroy</code> events.</p>\n    <p>\n      <span>\n        <input rx-radio\n               id=\"radDestroyed\"\n               value=\"destroyed\"\n               ng-model=\"radCreateDestroy\" />\n        <label for=\"radDestroyed\">Destroyed</label>\n      </span>\n      <span>\n        <input rx-radio\n               id=\"radCreated\"\n               value=\"created\"\n               ng-model=\"radCreateDestroy\" />\n        <label for=\"radCreated\">Created</label>\n      </span>\n    </p>\n    <p>\n      The following select is <code>{{radCreateDestroy}}</code>:\n      <select rx-select\n              id=\"selTargetCreated\"\n              ng-if=\"radCreateDestroy === 'created'\">\n        <option>CREATED!</option>\n      </select>\n    </p>\n    <br />\n  </div>\n\n  <!-- END OF DEMO -->\n  <!-- END OF DEMO -->\n  <!-- END OF DEMO -->\n\n  <h3 class=\"title\">Select States</h3>\n  <table>\n    <thead>\n      <tr>\n        <th width=\"150px\">State</th>\n        <th>Example</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <th>Disabled</th>\n        <td>\n          <select rx-select\n                  id=\"selOne\"\n                  ng-model=\"selOne\"\n                  ng-disabled=\"true\">\n            <option value=\"na\">Disabled by 'ng-disabled' attribute</option>\n          </select>\n          <br />\n          <select rx-select\n                  id=\"selTwo\"\n                  disabled\n                  ng-model=\"selTwo\">\n            <option value=\"na\">Disabled by 'disabled' attribute</option>\n          </select>\n        </td>\n      </tr>\n      <tr>\n        <th>Valid</th>\n        <td>\n          <select rx-select\n                  id=\"selThree\"\n                  ng-model=\"selThree\">\n            <option value=\"1\">First</option>\n            <option value=\"2\">Second</option>\n            <option value=\"3\">Third</option>\n            <option value=\"4\">Fourth</option>\n          </select>\n        </td>\n      </tr>\n      <tr>\n        <th>Invalid</th>\n        <td>\n          <select rx-select\n                  id=\"selFour\"\n                  always-invalid\n                  ng-model=\"selFour\">\n            <option value=\"1\">First</option>\n            <option value=\"2\">Second</option>\n            <option value=\"3\">Third</option>\n            <option value=\"4\">Fourth</option>\n          </select>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n\n<h3 class=\"title\">Attributes</h3>\n<table class=\"component-attributes table-striped\">\n  <thead>\n    <tr>\n      <th>Attribute</th>\n      <th>Required?</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>\n        <code>ng-disabled</code>\n      </th>\n      <td>\n        <em>optional</em>\n      </td>\n      <td>\n        In addition to default functionality, this will add/remove the <code>rx-disabled</code> class on the control wrapper for purposes of styling sibling elements.\n      </td>\n    </tr>\n  </tbody>\n</table>\n",
            "less": "/*\n * rxSelect\n */\n.rxSelect {\n  .box-sizing(border-box);\n  display: block;\n  overflow: hidden;\n  position: relative;\n  color: @rxSelect-color;\n  background: @rxSelect-background;\n  .border-radius(@rxSelect-border-radius);\n\n  // Element should be resizable via wrapper alone\n  min-width: @rxSelect-min-width;\n  min-height: @rxSelect-min-height;\n\n  &.rx-disabled {\n    color: @inputColorDisabled;\n    background: @inputBackgroundDisabled;\n  }\n\n  // position elements in wrapper\n  select,\n  .fake-select {\n    .box-sizing(border-box);\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n  }\n\n  select {\n    z-index: 0;\n    padding: 5px;\n    cursor: pointer;\n\n    // reset native styling\n    border: none !important;\n    outline: none !important;\n    background: transparent;\n    &:-moz-focusring {\n      // FF uses text color to draw ring. Make it transparent\n      color: transparent;\n      // However, we still need to display our select <option> text\n      text-shadow: 0 0 0 @rxSelect-color;\n    }\n\n    & + .fake-select {\n      border-color: @inputBorderColor;\n      border-width: 1px;\n    }\n\n    &.ng-invalid + .fake-select {\n      border-color: @rxSelect-border-color-invalid;\n      border-width: 2px;\n\n      .select-trigger {\n        color: @rxSelect-trigger-color-invalid;\n      }\n    }\n\n    &[disabled] {\n      cursor: not-allowed ;\n\n      & + .fake-select {\n        border-color: @rxSelect-border-color-disabled;\n        border-width: 1px;\n\n        .select-trigger {\n          background: @rxSelect-background-disabled;\n          border-left-width: 0px;\n          border-left-color: @rxSelect-color-disabled;\n          color: @rxSelect-trigger-color-disabled;\n        }\n      }\n    }//[disabled]\n  }//select\n\n  .fake-select {\n    z-index: 10;\n    border: @rxSelect-border-width solid @rxSelect-border-color;\n    overflow: hidden;\n    .border-radius(@rxSelect-border-radius);\n    .flexbox();\n    .justify-content(flex-end);\n    .flex-flow(row nowrap);\n\n    // This allow pointer events to pass THROUGH to the\n    // native <select> element\n    pointer-events: none !important;\n\n    // Custom trigger button will cover native <select> button\n    .select-trigger {\n      .box-sizing(border-box);\n      width: @rxSelect-trigger-width;\n      background: @rxSelect-trigger-background;\n      color: @rxSelect-trigger-color;\n\n      // perfectly center the trigger icon\n      .flexbox();\n      .align-items(center);\n      .justify-content(center);\n    }//.select-trigger\n  }//.fake-select\n}//.rxSelect\n\n",
            "midway": "var rxSelect = require('../rxSelect.page').rxSelect;\nvar htmlCheckbox = require('../../rxCheckbox/rxCheckbox.page').htmlCheckbox;\nvar htmlRadio = require('../../rxRadio/rxRadio.page').htmlRadio;\n\nvar exercise = require('../rxSelect.exercise');\n\ndescribe('rxSelect', function () {\n    var subject;\n\n    before(function () {\n        demoPage.go('#/component/rxSelect');\n    });\n\n    describe('(State) NG-Disabled', exercise.rxSelect({\n        cssSelector: '#selOne',\n        disabled: true,\n        visible: true,\n        valid: true\n    }));\n\n    describe('(State) Disabled', exercise.rxSelect({\n        cssSelector: '#selTwo',\n        disabled: true,\n        visible: true,\n        valid: true\n    }));\n\n    describe('(State) Valid', exercise.rxSelect({\n        cssSelector: '#selThree',\n        disabled: false,\n        visible: true,\n        valid: true\n    }));\n\n    describe('(State) Invalid', exercise.rxSelect({\n        cssSelector: '#selFour',\n        disabled: false,\n        visible: true,\n        valid: false\n    }));\n\n    describe('With Validation', function () {\n        before(function () {\n            subject = rxSelect.initialize($('#selBaconPrep'));\n        });\n\n        it('should not be valid', function () {\n            expect(subject.isValid()).to.eventually.be.false;\n        });\n\n        describe('Selecting \"Thick (borderline jerky)\"', function () {\n            before(function () {\n                subject.selectOption('Thick (borderline jerky)');\n            });\n\n            it('should be valid', function () {\n                expect(subject.isValid()).to.eventually.be.true;\n            });\n        });\n\n        describe('Selecting \"I do not like bacon\"', function () {\n            before(function () {\n                subject.selectOption('I do not like bacon');\n            });\n\n            it('should not be valid', function () {\n                expect(subject.isValid()).to.eventually.be.false;\n            });\n        });\n    });\n\n    describe('Show/Hide Select', function () {\n        var checkbox;\n\n        before(function () {\n            checkbox = htmlCheckbox.initialize($('#chkShow'));\n            subject = rxSelect.initialize($('#selTargetShow'));\n        });\n\n        describe('when checkbox checked', function () {\n            before(function () {\n                checkbox.select();\n            });\n\n            it('should be visible', function () {\n                expect(subject.isDisplayed()).to.eventually.be.true;\n            });\n        });\n\n        describe('when checkbox unchecked', function () {\n            before(function () {\n                checkbox.deselect();\n            });\n\n            it('should not be visible', function () {\n                expect(subject.isDisplayed()).to.eventually.be.false;\n            });\n        });\n    });\n\n    describe('Destroy Select', function () {\n        var radDestroyed, radCreated;\n\n        before(function () {\n            radDestroyed = htmlRadio.initialize($('#radDestroyed'));\n            radCreated = htmlRadio.initialize($('#radCreated'));\n            subject = rxSelect.initialize($('#selTargetCreated'));\n        });\n\n        describe('when created', function () {\n            before(function () {\n                radCreated.select();\n            });\n\n            it('should be present', function () {\n                expect(subject.isPresent()).to.eventually.be.true;\n            });\n        });\n\n        describe('when destroyed', function () {\n            before(function () {\n                radDestroyed.select();\n            });\n\n            it('should not be present', function () {\n                expect(subject.isPresent()).to.eventually.be.false;\n            });\n        });\n    });\n});\n\n// this component's exercise.js file, if it exists, is below\n\nvar _ = require('lodash');\nvar rxSelect = require('./rxSelect.page').rxSelect;\n\n/**\n * @description rxSelect exercises\n * @exports encore.exercise.rxSelect\n * @param {Object} [options=] - Test options. Used to build valid tests.\n * @param {String} [options.cssSelector=] - Fallback selector string to initialize widget with.\n * @param {Boolean} [options.disabled=false] - Determines if the select is disabled\n * @param {Boolean} [options.visible=true] - Determines if the select is visible\n * @param {Boolean} [options.valid=true] - Determines if the select is valid\n */\nexports.rxSelect = function (options) {\n    if (options === undefined) {\n        options = {};\n    }\n\n    options = _.defaults(options, {\n        disabled: false,\n        visible: true,\n        valid: true\n    });\n\n    return function () {\n        var component;\n\n        before(function () {\n            if (options.cssSelector === undefined) {\n                component = rxSelect.main;\n            } else {\n                component = rxSelect.initialize($(options.cssSelector));\n            }\n        });\n\n        it('should be present', function () {\n            expect(component.isPresent()).to.eventually.be.true;\n        });\n\n        it('should ' + (options.visible ? 'be' : 'not be') + ' visible', function () {\n            expect(component.isDisplayed()).to.eventually.eq(options.visible);\n        });\n\n        it('should ' + (options.disabled ? 'be' : 'not be') + ' disabled', function () {\n            expect(component.isDisabled()).to.eventually.eq(options.disabled);\n        });\n\n        it('should ' + (options.valid ? 'be' : 'not be') + ' valid', function () {\n            expect(component.isValid()).to.eventually.eq(options.valid);\n        });\n    };\n};\n"
        }
    },
    {
        "name": "rxSelectFilter",
        "moduleName": "'encore.ui.rxSelectFilter'",
        "displayName": "Rx Select Filter",
        "srcFiles": [
            "src/rxSelectFilter/rxSelectFilter.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [
            "templates/rxSelectFilter/templates/rxMultiSelect.html",
            "templates/rxSelectFilter/templates/rxSelectFilter.html",
            "templates/rxSelectFilter/templates/rxSelectOption.html"
        ],
        "dependencies": [
            "rxMisc",
            "rxSessionStorage"
        ],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/experimental.svg\" alt=\"experimental\"></a></p>\n<p>A multi-select dropdown for table filtering.</p>\n<h1>Services</h1>\n<h2>SelectFilter</h2>\n<p>This service exposes an object with single method, <code>create()</code>, used to create instances of a <code>SelectFilter</code>.  It is configurable via three options:</p>\n<ul>\n<li><code>properties</code>: A list of the properties to create a filter control for.  Assuming the source data is an array of objects, a property is equivalent to an object&#39;s key.<pre><code>SelectFilter.create({\n    properties: [&#39;year&#39;]\n});\n</code></pre></li>\n<li><code>available</code> (optional): An object that tracks which options are available for a property. It has the form:<pre><code>SelectFilter.create({\n    // other options...\n    available: {\n        year: [2013, 2014, 2015],\n    }\n});\n</code></pre>Note that the key of the object matches a value in the <code>properties</code> array.</li>\n<li><code>selected</code> (optional): An object that tracks which options are selected for a property. It has the same form as the <code>available</code> object, but the arrays indicate which options are selected, and as such are strict subsets of their <code>available</code> counterparts.<pre><code>SelectFilter.create({\n    // other options...\n    selected: {\n        year: [2014],\n    }\n});\n</code></pre></li>\n</ul>\n<h3>Option Defaults</h3>\n<p>Every property that is listed in <code>properties</code> but not provided as a key to <code>available</code> will be automatically populated the first time <code>applyTo()</code> (see below) is called.</p>\n<pre><code>var filter = SelectFilter.create({\n    properties: [&#39;year&#39;]\n});\n\nfilter.applyTo([{\n    eventId: 1,\n    year: 2013\n}, {\n    eventId: 2,\n    year: 2014\n}, {\n    eventId: 3,\n    year: 2013\n}]);\n// filter.available is { year: [2013, 2014] }\n</code></pre><p><strong>Note:</strong> There is an implied requirement that, when relying on the auto-populated filter, the input array will have at least one item for every available option.  For example, this may not be the case when used with server-side pagination.</p>\n<p>Every property that is listed in <code>properties</code> but not provided as a key to <code>selected</code> is initialized to have all options selected (by looking them up in <code>available</code>).  If property is also not provided to <code>available</code>, its initialization is delayed until the first call of <code>applyTo()</code>.</p>\n<pre><code>var filter = SelectFilter.create({\n    properties: [&#39;year&#39;],\n    available: {\n        year: [2013, 2014, 2015]\n    }\n});\n// filter.selected is { year: [2013, 2014, 2015] }\n</code></pre><h3>Instances</h3>\n<p>Instances of <code>SelectFilter</code> have an <code>applyTo()</code> method, which applies the filter&#39;s internal state of selected options to the array. This will not often be called directly, instead used by the <code>Apply</code> filter (see below).  As stated previously, the first call of <code>applyTo()</code> will initialize any <code>properties</code> that have not been defined in <code>available</code> or <code>selected</code>.</p>\n<pre><code class=\"lang-js\">var filter = SelectFilter.create({\n    properties: [&#39;year&#39;],\n    selected: {\n        year: [2014]\n    }\n});\n\nvar filteredArray = filter.applyTo([{\n    eventId: 1,\n    year: 2013\n}, {\n    eventId: 2,\n    year: 2014\n}, {\n    eventId: 3,\n    year: 2013\n}]);\n// filteredArray is [{ eventId: 2, year: 2014 }]\n</code></pre>\n<p>The instance will also have all of the constructor options as public properties, so that they can be watched or changed.</p>\n<h1>Directives</h1>\n<h2>rxSelectOption</h2>\n<p><code>&lt;rx-select-option&gt;</code> is to <code>&lt;rx-multi-select&gt;</code> as <code>&lt;option&gt;</code> is to <code>&lt;select&gt;</code>.</p>\n<p>Just like <code>&lt;option&gt;</code>, it has a <code>value</code> attribute and uses the element&#39;s content for the label. If the label is not provided, it defaults to a titleized version of <code>value</code>.</p>\n<pre><code>&lt;rx-select-option value=&quot;DISABLED&quot;&gt;Disabled&lt;/rx-select-option&gt;\n</code></pre><h2>rxMultiSelect</h2>\n<p>A replacement for <code>&lt;select multiple&gt;</code> when space is an issue, such as in the header of a table.</p>\n<p>The options for the control can be specified by passing an array of strings (corresponding to the options&#39; values) to the <code>options</code> attribute of the directive or using <code>&lt;rx-select-option&gt;</code>s. An &#39;All&#39; option is automatically set as the first option for the dropdown, which allows all options to be toggled at once.</p>\n<p>The following two dropdowns are equivalent.</p>\n<pre><code>&lt;!-- $scope.available = [2014, 2015] --&gt;\n&lt;rx-multi-select ng-model=&quot;selected&quot; options=&quot;available&quot;&gt;&lt;/rx-multi-select&gt;\n\n&lt;rx-multi-select ng-model=&quot;selected&quot;&gt;\n    &lt;rx-select-option value=&quot;2014&quot;&gt;&lt;/rx-select-option&gt;\n    &lt;rx-select-option value=&quot;2015&quot;&gt;&lt;/rx-select-option&gt;\n&lt;/rx-multi-select&gt;\n</code></pre><p>This component requires the <code>ng-model</code> attribute and binds the model to an array of the selected options.</p>\n<p>The preview text (what is shown when the element is not active) follows the following rules:</p>\n<ul>\n<li>If no items are selected, show &quot;None&quot;.</li>\n<li>If only one item is selected from the dropdown, its label will display.</li>\n<li>If &gt; 1 but &lt; n-1 items are selected, show &quot;[#] Selected&quot;.</li>\n<li>If all but one item is selected, show &quot;All except [x]&quot;</li>\n<li>If all items are selected, show &quot;All Selected&quot;.</li>\n</ul>\n<h2>rxSelectFilter</h2>\n<p>Uses an instance of <code>SelectFilter</code> to create a set of <code>&lt;rx-multi-select&gt;</code>s that modify the instance object.</p>\n<pre><code>// In the controller\n$scope.filter = SelectFilter.create({\n    // options...\n});\n\n// In the template\n&lt;rx-select-filter filter=&quot;filter&quot;&gt;&lt;/rx-select-filter&gt;\n</code></pre><h1>Filters</h1>\n<h2>Apply</h2>\n<p>Merely calls the <code>applyTo()</code> method of a <code>SelectFilter</code> instance to an input array.</p>\n<pre><code class=\"lang-html\">&lt;tr ng-repeat=&quot;item in list | Apply:filter&quot;&gt;\n</code></pre>\n<h1>Styling</h1>\n<p>Remember to adhere to the Null Pattern for <a href=\"#/styleguide/tables\">tables</a> in Encore UI.  When there are no results to populate the table, the table content should say &quot;No [x] were found.&quot;  However, if the table is empty because of the applied filters, the message should instead say &quot;No results match those criteria.&quot;  This has been included in the demo below for an example implemtation.</p>\n<p>The developer is reponsible for ensuring that the multi-select input is wide enough to show the preview text. Especially for the &quot;All except [x]&quot; case, the text could wrap if the proper width is not set.  To facilitate this, a class is provided that adds a &#39;-filter&#39; suffix to the filtered property.  See the demo markup for an example.</p>\n",
            "js": "/*jshint unused:false*/\n\n// This file is used to help build the 'demo' documentation page and should be updated with example code\nfunction rxSelectFilterCtrl ($scope, SelectFilter) {\n    $scope.data = {\n        classification: []\n    };\n\n    $scope.filter = SelectFilter.create({\n        properties: ['account', 'status'],\n        selected: {\n            account: ['A']\n        }\n    });\n\n    $scope.tickets = [\n        { account: 'A', status: 'NEW', description: 'A new ticket' },\n        { account: 'A', status: 'IN_PROGRESS', description: 'Fix all the bugs' },\n        { account: 'B', status: 'TRANSFERRED', description: 'Don\\'t stop believing' },\n        { account: 'B', status: 'VENDOR', description: 'Hold on to that feeling' },\n        { account: 'A', status: 'TRANSFERRED', description: 'qwertyuiop' }\n    ];\n}\n",
            "html": "<!-- Sample HTML goes here as a live example of how the component can be used -->\n<div ng-controller=\"rxSelectFilterCtrl\">\n    <h3 class=\"title\">rxMultiSelect Input</h3>\n    <rx-form-item label=\"Classification\">\n        <rx-multi-select ng-model=\"data.classification\" id=\"classification\">\n            <rx-select-option value=\"A\">Type A</rx-select-option>\n            <rx-select-option value=\"B\">Type B</rx-select-option>\n            <rx-select-option value=\"C\">Type C</rx-select-option>\n            <rx-select-option value=\"D\">Type D</rx-select-option>\n        </rx-multi-select>\n    </rx-form-item>\n    <span>Model value: [{{ data.classification.join(', ') }}]</span>\n\n    <h3 class=\"title\">Filtered Table</h3>\n    <table class=\"table-striped\">\n        <thead>\n            <th colspan=\"6\" class=\"filter-header\">\n                <rx-select-filter filter=\"filter\"></rx-select-filter>\n            </th>\n            <tr>\n                <th>Account</th>\n                <th>Status</th>\n                <th>Description</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr ng-repeat=\"ticket in (filteredTickets = (tickets | Apply:filter))\">\n                <td>{{ticket.account}}</td>\n                <td>{{ticket.status}}</td>\n                <td>{{ticket.description}}</td>\n            </tr>\n            <tr ng-if=\"filteredTickets.length === 0\">\n                <td colspan=\"6\">\n                    <div ng-if=\"tickets.length === 0\">No tickets were found.</div>\n                    <div ng-if=\"tickets.length !== 0\">No results match those criteria.</div>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n<style>\n    .status-filter .rx-multi-select {\n        width: 180px;\n    }\n</style>\n",
            "less": "/*\n * rxSelectFilter\n */\n@import 'vars';\n\n.rx-select-filter {\n    .select-wrapper:not(:first-child) {\n        padding-left: 20px;\n    }\n\n    .field-label {\n        margin-right: 5px;\n    }\n}\n\n.rx-multi-select {\n\n    color: @inputColor;\n    border: 1px solid @inputBorderColor;\n    padding: 3px;\n    width: 150px;\n    position: relative;\n    font-size: 1.2em;\n\n    &:hover {\n        cursor:pointer;\n    }\n\n    ul {\n        position: absolute;\n        top: ~\"calc(-1px)\";\n        z-index: 1;\n        left: -1px;\n        width: 100%;\n        border: 1px solid @inputBorderColor;\n        background: @white;\n        box-shadow: 0px 3px 15px 0px rgba(0, 0, 0, 0.35);\n    }\n\n    rx-select-option[value=\"all\"] label {\n        border-bottom: 1px solid @inputBorderColor;\n    }\n\n}\n\n.rx-select-option {\n\n    label {\n        display: block;\n        padding: 2px 10px;\n\n        &:hover {\n            background: @optionHighlightBg;\n            color: @white;\n            cursor: pointer;\n        }\n    }\n}\n",
            "midway": "var Page = require('astrolabe').Page;\nvar _ = require('lodash');\nvar rxMultiSelectPage = require('../rxSelectFilter.page').rxMultiSelect;\nvar rxSelectFilterPage = require('../rxSelectFilter.page').rxSelectFilter;\nvar exercise = require('../rxSelectFilter.exercise');\n\ndescribe('rxMultiSelect', function () {\n\n    before(function () {\n        demoPage.go('#/component/rxSelectFilter');\n    });\n\n    describe('exercises', exercise.rxMultiSelect({\n        cssSelector: '#classification',\n        inputs: ['Type A', 'Type B', 'Type C', 'Type D']\n    }));\n\n});\n\nvar table = Page.create({\n    getDataForColumn: {\n        value: function (column) {\n            return element.all(by.repeater('ticket in').column(column)).map(function (cell) {\n                return cell.getText();\n            }).then(_.uniq).then(_.sortBy);\n        }\n    },\n\n    accounts: {\n        get: function () {\n            return this.getDataForColumn('ticket.account');\n        }\n    },\n\n    statuses: {\n        get: function () {\n            return this.getDataForColumn('ticket.status');\n        }\n    }\n});\n\ndescribe('rxSelectFilter', function () {\n    var rxSelectFilter;\n\n    before(function () {\n        demoPage.go('#/component/rxSelectFilter');\n        rxSelectFilter = rxSelectFilterPage.main;\n    });\n\n    it('shows all the table data', function () {\n        rxSelectFilter.apply({\n            Account: { All: true },\n            Status: { All: true }\n        });\n\n        expect(table.accounts).to.eventually.eql(['A', 'B']);\n        expect(table.statuses).to.eventually.eql(['IN_PROGRESS', 'NEW', 'TRANSFERRED', 'VENDOR']);\n    });\n\n    it('filters the table data by the status', function () {\n        rxSelectFilter.apply({\n            Status: { All: false, Transferred: true }\n        });\n\n        expect(table.accounts).to.eventually.eql(['A', 'B']);\n        expect(table.statuses).to.eventually.eql(['TRANSFERRED']);\n    });\n\n    it('filters the table data by the account', function () {\n        rxSelectFilter.apply({\n            Account: { All: false, B: true },\n            Status: { All: true }\n        });\n\n        expect(table.accounts).to.eventually.eql(['B']);\n        expect(table.statuses).to.eventually.eql(['TRANSFERRED', 'VENDOR']);\n    });\n});\n\n// this component's exercise.js file, if it exists, is below\n\nvar rxMultiSelect = require('./rxSelectFilter.page').rxMultiSelect;\nvar _ = require('lodash');\n\n/**\n   rxMultiSelect exercises.\n   @exports encore.exercise.rxMultiSelect\n   @param {Object} [options=] - Test options. Used to build valid tests.\n   @param {string} [options.cssSelector=] - Fallback selector string to initialize widget with.\n   @param {Object} [options.inputs=[]] - The options of the select input.\n   @example\n   ```js\n   describe('default exercises', encore.exercise.rxMultiSelect({\n       cssSelector: '.my-form rx-multi-select', // select one of many widgets on page\n   }));\n   ```\n */\nexports.rxMultiSelect = function (options) {\n    if (options === undefined) {\n        options = {};\n    }\n\n    options = _.defaults(options, {\n        inputs: []\n    });\n\n    return function () {\n        var component;\n\n        before(function () {\n            if (options.cssSelector === undefined) {\n                component = rxMultiSelect.main;\n            } else {\n                component = rxMultiSelect.initialize($(options.cssSelector));\n            }\n        });\n\n        it('hides the menu initially', function () {\n            expect(component.isOpen()).to.eventually.be.false;\n        });\n\n        it('shows the menu when clicked', function () {\n            component.openMenu();\n            expect(component.isOpen()).to.eventually.be.true;\n        });\n\n        it('selects no options', function () {\n            component.unselect(['Select All']);\n            expect(component.selectedOptions).to.eventually.be.empty;\n            expect(component.preview).to.eventually.equal('None');\n        });\n\n        it('selects a single option', function () {\n            var input = _.first(options.inputs);\n            component.select([input]);\n            expect(component.selectedOptions).to.eventually.eql([input]);\n            expect(component.preview).to.eventually.equal(input);\n        });\n\n        if (options.inputs.length > 2) {\n            it('selects multiple options', function () {\n                var inputs = options.inputs.slice(0, 2);\n                component.select(inputs);\n                expect(component.selectedOptions).to.eventually.eql(inputs);\n                expect(component.preview).to.eventually.equal('2 Selected');\n            });\n        }\n\n        it('selects all options', function () {\n            component.select(['Select All']);\n            expect(component.selectedOptions).to.eventually.eql(['Select All'].concat(options.inputs));\n            expect(component.preview).to.eventually.equal('All Selected');\n        });\n\n        it('unselects all options', function () {\n            component.unselect(['Select All']);\n            expect(component.selectedOptions).to.eventually.be.empty;\n            expect(component.preview).to.eventually.equal('None');\n        });\n\n        it('hides the menu when another element is clicked', function () {\n            component.rootElement.element(by.xpath('../..')).click();\n            expect(component.isOpen()).to.eventually.be.false;\n        });\n\n    };\n};\n"
        }
    },
    {
        "name": "rxSession",
        "moduleName": "'encore.ui.rxSession'",
        "displayName": "Rx Session",
        "srcFiles": [
            "src/rxSession/rxSession.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [
            "rxLocalStorage"
        ],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\"></a></p>\n<p>Service for managing user session in encore-ui.</p>\n",
            "js": "function rxSessionCtrl ($scope, Session) {\n    $scope.isAuthenticated = function () {\n        alert(Session.isAuthenticated());\n    };\n}\n",
            "html": "<div ng-controller=\"rxSessionCtrl\">\n    <button ng-click=\"isAuthenticated()\" class=\"button\">Is Authenticated</button>\n</div>\n",
            "less": "",
            "midway": "\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    },
    {
        "name": "rxSessionStorage",
        "moduleName": "'encore.ui.rxSessionStorage'",
        "displayName": "Rx Session Storage",
        "srcFiles": [
            "src/rxSessionStorage/rxSessionStorage.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\"></a></p>\n<p>A simple wrapper of the global sessionStorage object for interacting with session storage.\nThis service is similar to angular&#39;s $window and $document services.  The API is exactly the\nsame as the W3C&#39;s specification provided at: <a href=\"http://dev.w3.org/html5/webstorage/#storage-0\">http://dev.w3.org/html5/webstorage/#storage-0</a></p>\n",
            "js": "function rxSessionStorageCtrl ($scope, SessionStorage) {\n    $scope.setSideKick = function () {\n        SessionStorage.setItem('Batman', 'Robin');\n    };\n\n    $scope.getSideKick = function () {\n        alert(SessionStorage.getItem('Batman'));\n    };\n}\n",
            "html": "<div ng-controller=\"rxSessionStorageCtrl\">\n    <label>Who is Batman's side kick?</label>\n    <button ng-click=\"setSideKick()\" class=\"button button-positive\">Store Answer</button>\n    <button ng-click=\"getSideKick()\" class=\"button\">Answer?</button>\n</div>\n",
            "less": "",
            "midway": "\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    },
    {
        "name": "rxSortableColumn",
        "moduleName": "'encore.ui.rxSortableColumn'",
        "displayName": "Rx Sortable Column",
        "srcFiles": [
            "src/rxSortableColumn/rxSortableColumn.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [
            "templates/rxSortableColumn/templates/rxSortableColumn.html"
        ],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\"></a></p>\n<p>A clickable link in a table heading which will sort the table by the referenced property in ascending or descending order.</p>\n<p>The module also provides an optional filter - <code>rxSortEmptyTop</code> - which moves empty values to the top in ascending order, and bottom in descending order.</p>\n",
            "js": "/*jshint unused:false*/\n\n// This file is used to help build the 'demo' documentation page and should be updated with example code\nfunction rxSortableColumnCtrl ($scope, PageTracking, rxSortUtil) {\n    $scope.sort = rxSortUtil.getDefault('name');\n    $scope.sort = rxSortUtil.getDefault('name', false);\n    $scope.pager = PageTracking.createInstance();\n\n    $scope.sortCol = function (predicate) {\n        return rxSortUtil.sortCol($scope, predicate);\n    };\n\n    $scope.talentPool = [\n        {\n            name: 'Andrew Yurisich',\n            jobTitle: 'Mailroom Associate IV'\n        },\n        {\n            name: 'Patrick Deuley',\n            jobTitle: 'Design Chaplain'\n        },\n        {\n            name: null,\n            jobTitle: 'Chief Mastermind'\n        },\n        {\n            jobTitle: 'Assistant Chief Mastermind'\n        },\n        {\n            name: 'Hussam Dawood',\n            jobTitle: 'Evangelist of Roger Enriquez'\n        },\n        {\n            name: 'Kerry Bowley',\n            jobTitle: 'Dev Mom'\n        },\n    ];\n}\n",
            "html": "<div ng-controller=\"rxSortableColumnCtrl\">\n    <p>Note: The demo table is also using <code>rx-floating-header</code>, which is not required. We've only done this to illustrate that <code>rxSortableColumn</code> works properly with <code>rxFloatingHeader</code>. The table is also using <code>rxSortEmptyTop</code>.</p>\n    <table rx-floating-header>\n        <thead>\n            <tr>\n                <th scope=\"col\">\n                    <rx-sortable-column\n                        sort-method=\"sortCol(property)\"\n                        sort-property=\"name\"\n                        predicate=\"sort.predicate\"\n                        reverse=\"sort.reverse\">\n                        Name\n                    </rx-sortable-column>\n                </th>\n                <th scope=\"col\">\n                    <rx-sortable-column\n                        sort-method=\"sortCol(property)\"\n                        sort-property=\"jobTitle\"\n                        predicate=\"sort.predicate\"\n                        reverse=\"sort.reverse\">\n                        Occupation\n                    </rx-sortable-column>\n                </th>\n                <th scope=\"col\">\n                    <rx-sortable-column\n                        sort-method=\"sortCol\"\n                        sort-property=\"none\"\n                        predicate=\"sort.predicate\"\n                        reverse=\"sort.reverse\">\n                        Testing Sort Errors (see Protractor Tab)\n                    </rx-sortable-column>\n                </th>\n            </tr>\n        </thead>\n        <tbody id=\"talentPoolData\">\n            <tr ng-repeat=\"resource in talentPool | rxSortEmptyTop:sort.predicate:sort.reverse\">\n                <th scope=\"row\" class=\"talent-name\">\n                    {{resource.name}}\n                </th>\n                <td class=\"talent-job\">\n                    {{resource.jobTitle}}\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n",
            "less": "/*\n * rxSortableColumn\n */\n.rx-sortable-column {\n    position: relative;\n\n    .btn-link {\n        // This needs to be set explicitly, otherwise `.table-filters button`\n        // applies a font size of 93% and sortable columns have smaller headers.\n        font-size: 13px;\n    }\n\n    .sort-action {\n        display: block;\n        width: 100%;\n        margin: 0;\n        text-align: left;\n        &:focus {\n            // since we underline on focus, we can remove the outline rectangle that sticks around\n            outline: none;\n        }\n    }\n\n    .sort-icon {\n        display: block;\n        height: 0;\n        width: 0;\n        border: solid transparent;\n        border-width: 6px 5px;\n        position: absolute;\n        right: 0;\n        top: 50%;\n\n        &.asc {\n            margin-top: -9px;\n            border-bottom-color: #4a4a4a;\n        }\n        &.desc {\n            margin-top: -3px;\n            border-top-color: #4a4a4a;\n        }\n    }\n}",
            "midway": "var rxSortableColumn = require('../rxSortableColumn.page').rxSortableColumn;\n\nvar column = function (columnName, repeaterString) {\n    var columnElement = element(by.cssContainingText('rx-sortable-column', columnName));\n    return rxSortableColumn.initialize(columnElement, repeaterString);\n};\n\ndescribe('rxSortableColumn', function () {\n    var sorts = rxSortableColumn.sortDirections;\n    var columnNames = ['Name', 'Occupation', 'Testing Sort Errors (see Protractor Tab)'];\n    var columns, nameColumn, roleColumn;\n\n    before(function () {\n        demoPage.go('#/component/rxSortableColumn');\n        columns = rxSortableColumn.byTable($('.component-demo table'));\n        nameColumn = column('Name', 'resource in talentPool');\n        roleColumn = column('Occupation');\n    });\n\n    // https://github.com/rackerlabs/encore-ui/issues/694 -- See \"End odd behavior\".\n    it('should have every column', function () {\n        expect(columns.names).to.eventually.eql(columnNames);\n    });\n\n    it('should apply a custom function to each column', function () {\n        var doesNotUseBoldText = function (columnElement) {\n            return columnElement.getText().then(function (text) {\n                return text.indexOf('Occupation') > -1;\n            });\n        };\n        expect(columns.getNamesUsing(doesNotUseBoldText)).to.eventually.eql([false, true, false]);\n    });\n\n    it('should return all sorts in the table', function () {\n        expect(columns.sorts).to.eventually.eql([sorts.ascending, sorts.notSorted, sorts.notSorted]);\n    });\n    // https://github.com/rackerlabs/encore-ui/issues/694 -- End odd behavior.\n\n    it('should display some sortable columns', function () {\n        expect(nameColumn.rootElement.isDisplayed()).to.eventually.eq.true;\n        expect(roleColumn.rootElement.isDisplayed()).to.eventually.eq.true;\n    });\n\n    it('should have an ascending sort shown by default for the name column', function () {\n        expect(nameColumn.currentSortDirection).to.eventually.eq(sorts.ascending);\n    });\n\n    it('should have no sort shown by default for the job title column', function () {\n        expect(roleColumn.currentSortDirection).to.eventually.eq(sorts.notSorted);\n    });\n\n    it('should not throw an error if the column responds to sorting clicks', function () {\n        var error = nameColumn.ColumnSortRequestUnresponsiveError;\n        expect(nameColumn.sort({ isAscending: true })).to.not.be.rejectedWith(error);\n    });\n\n    it('should support sorting columns ascending', function () {\n        nameColumn.sortAscending();\n        expect(nameColumn.currentSortDirection).to.eventually.eq(sorts.ascending);\n    });\n\n    it('should have empty names appearing at the top in ascending sort', function () {\n        var names = ['', '', 'Andrew Yurisich', 'Hussam Dawood', 'Kerry Bowley', 'Patrick Deuley'];\n        nameColumn.sortAscending();\n        expect(nameColumn.data).to.eventually.eql(names);\n    });\n\n    it('should support sorting columns descending', function () {\n        nameColumn.sortDescending();\n        expect(nameColumn.currentSortDirection).to.eventually.eq(sorts.descending);\n    });\n\n    it('should have empty names appearing at the bottom in descending sort', function () {\n        nameColumn.sortDescending();\n        var names = ['Patrick Deuley', 'Kerry Bowley', 'Hussam Dawood', 'Andrew Yurisich', '', ''];\n        expect(nameColumn.data).to.eventually.eql(names);\n    });\n\n    it('should remove all other sorts when sorting an unsorted column', function () {\n        roleColumn.sortAscending();\n        expect(nameColumn.currentSortDirection).to.eventually.eq(sorts.notSorted);\n    });\n\n    it('should have a name', function () {\n        expect(nameColumn.name).to.eventually.eq('Name');\n        expect(roleColumn.name).to.eventually.eq('Occupation');\n    });\n\n    describe('column data', function () {\n\n        beforeEach(function () {\n            nameColumn.sortAscending();\n        });\n\n        it('should throw an error if attempting to access cell data without a repeater string', function () {\n            expect(roleColumn.data).to.be.rejectedWith(roleColumn.CellUndiscoverableError);\n        });\n\n        it('should return all names as data', function () {\n            var names = ['', '', 'Andrew Yurisich', 'Hussam Dawood', 'Kerry Bowley', 'Patrick Deuley'];\n            expect(nameColumn.data).to.eventually.eql(names);\n        });\n\n        it('should apply a custom map function to cells', function () {\n            var mapFn = function sortsMail (cellElements) {\n                return cellElements.map(function (cellElement) {\n                    return cellElement.getText().then(function (name) {\n                        return name === 'Andrew Yurisich';\n                    });\n                });\n            };\n\n            expect(nameColumn.getDataUsing(mapFn)).to.eventually.eql([false, false, true, false, false, false]);\n        });\n\n        it('should apply a custom reduce function to cells', function () {\n            var reduceFn = function hasNamedState (cellElements) {\n                return cellElements.reduce(function (acc, cellElement) {\n                    return cellElement.getText().then(function (text) {\n                        if (text === 'Hussam Dawood') {\n                            acc[text] = 'Republic of Dawood';\n                        }\n                        return acc;\n                    });\n                }, {});\n            };\n\n            expect(nameColumn.getDataUsing(reduceFn)).to.eventually.eql({ 'Hussam Dawood': 'Republic of Dawood' });\n        });\n\n    });\n\n    describe('unresponsive column sorting', function () {\n        var errorColumn;\n\n        before(function () {\n            errorColumn = column('Testing Sort Errors');\n        });\n\n        it('should throw an error if the column does not respond to sorting clicks', function () {\n            var error = errorColumn.ColumnSortRequestUnresponsiveError;\n            expect(errorColumn.sort({ isAscending: true })).to.be.rejectedWith(error);\n        });\n\n    });\n\n});\n\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    },
    {
        "name": "rxSpinner",
        "moduleName": "'encore.ui.rxSpinner'",
        "displayName": "Rx Spinner",
        "srcFiles": [
            "src/rxSpinner/rxSpinner.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/stable.svg\" alt=\"stable\"></a></p>\n<p>Add a spinner icon to any element</p>\n",
            "js": "/*jshint unused:false*/\nfunction rxSpinnerCtrl ($scope) {\n    $scope.loading = true;\n}\n",
            "html": "<div ng-controller=\"rxSpinnerCtrl\">\n    <button rx-toggle=\"loading\" class=\"button\">Toggle Loading</button>\n    <div rx-spinner toggle=\"loading\" class=\"rxSpinnerExample\">Spinning = {{loading}}</div>\n</div>\n<style type=\"text/css\">\n.rxSpinnerExample {\n    background: #00ac31;\n    padding: 20px;\n    color: white;\n    line-height: 20px;\n}\n</style>\n",
            "less": "@import 'vars';\n\n/*********************************************************\n *  CSS3 Animation spinner\n *\n *  Based on: http://cssdeck.com/labs/css3-animation-spinner\n *  Copyright 2013 - birkof.ro\n *********************************************************/\n.rx-spinner {\n    background-color: transparent;\n    border: 2px solid white;\n    border-top-color: transparent;\n    border-left-color: transparent;\n    .border-radius(150px);\n    display: inline-block;\n    width: 12px;\n    height: 12px;\n    margin-bottom: 3px;\n    vertical-align: middle;\n    -webkit-animation: spin .8s infinite linear;\n    -moz-animation: spin .8s infinite linear;\n    -ms-animation: spin .8s infinite linear;\n    -o-animation: spin .8s infinite linear;\n    animation: spin .8s infinite linear;\n}\n.rx-spinner.dark {\n    border-bottom-color: @appTextColor;\n    border-right-color: @appTextColor;\n}\n.rx-spinner.mini {\n    border-width: 2px;\n    width: 4px;\n    height: 4px;\n}\n.rx-spinner.small {\n    border-width: 2px;\n    width: 8px;\n    height: 8px;\n}\n.rx-spinner.large {\n    border-width: 3px;\n    width: 22px;\n    height: 22px;\n}\n.rx-spinner.extra-large {\n    border-width: 4px;\n    width: 32px;\n    height: 32px;\n}\n@-webkit-keyframes spin { /* Safari and Chrome */\n    0% { -webkit-transform: rotate(0deg); }\n    100% { -webkit-transform: rotate(360deg); }\n}\n@-moz-keyframes spin { /* Firefox */\n    0% { -moz-transform: rotate(0deg); }\n    100% { -moz-transform: rotate(360deg); }\n}\n@-ms-keyframes spin { /* IE */\n    0% { -ms-transform: rotate(0deg); }\n    100% { -ms-transform: rotate(360deg); }\n}\n@-o-keyframes spin { /* Opera */\n    0% { -o-transform: rotate(0deg); }\n    100% { -o-transform: rotate(360deg); }\n}\n@keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n}\n",
            "midway": "var rxSpinnerPage = require('../rxSpinner.page').rxSpinner;\n\ndescribe('rxSpinner', function () {\n\n    before(function () {\n        demoPage.go('#/component/rxSpinner');\n    });\n\n    it.skip('should show element', function () {\n        expect(rxSpinnerPage.rxSpinnerElement.isDisplayed()).toEqual(true);\n    });\n\n});\n\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    },
    {
        "name": "rxStatus",
        "moduleName": "'encore.ui.rxStatus'",
        "displayName": "Rx Status",
        "srcFiles": [
            "src/rxStatus/rxStatus.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [
            "rxNotify"
        ],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/stable.svg\" alt=\"stable\"></a></p>\n<h1>Description</h1>\n<p>This service is provided as a compliment to <a href=\"http://rackerlabs.github.io/encore-ui/#/component/rxNotify\"><code>rxNotify</code> rxNotify service</a>.  It abstracts out some of the raw functionality provided by rxNotify to make the addition and removal of single messages easier.</p>\n<h1>Usage</h1>\n<h2>Preparation</h2>\n<p>In order to use the <code>Status</code> service, one has to instantiate it with a proper <code>$scope</code> object to keep track of a running state.  <code>rxNotify</code> indirectly makes use of the <code>$scope</code> variable when a message can be auto-dismissed.  In order to keep the interface for the wrapper functions coherent, the <code>$scope</code> variable must be provided before use.  This can be accomplished as follows:</p>\n<pre><code>    Status.setupScope($scope);\n</code></pre><h2>Success cases</h2>\n<p>The <code>Status</code> service is provided as a wrapper to rxNotify.  As such, the status types supported by <code>rxNotify</code> are still used and have been wrapped into utility functions.  For example, on page load it is usually necessary to inform the user of pending data retrieval.  This can be accomplished by:</p>\n<pre><code>    Status.setLoading(&#39;Retrieving users&#39;);\n</code></pre><p>This will call rxNotify in the following manner:</p>\n<pre><code>    rxNotify.add(&#39;Retrieving users&#39;, {\n        stack: &#39;page&#39;,\n        dismiss: [scope, &#39;loaded&#39;],\n        loading: true\n    });\n</code></pre><p>Similarly, the following call using the Status service:</p>\n<pre><code>    Status.setSuccess(&#39;Successfully deleted questionable &#39; +\n        &#39;browsing history&#39;);\n</code></pre><p>results in a call to rxNotify as such:</p>\n<pre><code>    rxNotify.add(&#39;Successfully deleted questionable &#39; +\n        &#39;browsing history&#39;,\n        {\n            stack: &#39;page&#39;,\n            show: &#39;next&#39;\n        }\n    );\n</code></pre><p>Note: For <code>success</code> and <code>error</code> messages, the <code>repeat</code> attribute is set to false. Messages of <code>success</code> will also automatically timeout after 5 seconds. Both of these defaults were design decisions made at this level for usability and consistency across all Encore products. </p>\n<p>Each of the wrapper functions to the different rxNotify message types support receiving an <code>options:{}</code> parameter that can override defaults for the respective wrapper. For example, instead of showing a success message on next route change, it can be shown immediately:</p>\n<pre><code>    Status.setSuccess(&#39;Please show immediately&#39;, {\n        show: &#39;immediate&#39;\n    });\n</code></pre><p>Please note that the <code>options</code> are of the same type as one would provide to rxNotify.  This should allow for maximum flexibility when necessary.  However, as a bonus, some common behaviours expected to be overriden have been provided as their own wrapper functions.  For example:</p>\n<pre><code>    Status.setSuccessImmediate(&#39;Please show immediately&#39;)\n</code></pre><p>is the equivalent of calling <code>Status.setSuccess()</code> with the <code>{ show: &#39;immediate&#39; }</code> parameter.  Please note, there isn&#39;t much fault checking in place, so the following behaviour although permitted, is not advised:</p>\n<pre><code>    Status.setSuccessImmediate(&#39;Please show immediately&#39;, {\n        show: &#39;next&#39;\n    });\n</code></pre><h2>Error cases</h2>\n<p>The <code>{ type: &#39;error&#39; }</code> wrapper is a unique one.  It allows for a string to be passed as an error message, just like the wrappers before.  For example:</p>\n<pre><code>    Status.setError(&#39;This is an error!&#39;);\n</code></pre><p>It also allows for a specialized template to be specified as the error string with an <code>object:{}</code> as the second parameter containing the replacements for the template in the error string.  If in a proper format, the object can be automatically parsed using an <code>ErrorFormatter</code> and displayed to the user.  For example:</p>\n<pre><code>    Status.setError(\n        &#39;Failed loading browsing history: ${message}&#39;,\n        { message: &#39;User has previously cleared their history!&#39; }\n    );\n</code></pre><p>Please note that the replacement variable <code>${message}</code> in the error string maps one-to-one to the keys provided in the the error object.  One can specify any number of template variables to replace.  Not providing a balanced list of variables and their replacements will result in a <code>ReferenceError: &lt;replacement&gt; is not defined</code>.</p>\n<p>The following wrapper functions are available today.  Their names should be self explanatory:</p>\n<ul>\n<li>setLoading</li>\n<li>setSuccess</li>\n<li>setSuccessNext</li>\n<li>setSuccessImmediate</li>\n<li>setWarning</li>\n<li>setInfo</li>\n<li>setError</li>\n<li>complete &rarr; setSuccessImmediate</li>\n</ul>\n<p>The following are used to programmatically remove notifications from the screen:</p>\n<ul>\n<li>dismiss</li>\n<li>clear</li>\n</ul>\n<h1>Utilities</h1>\n<p>The <code>Status</code> service requires that one provide a <code>$scope</code> object to keep tracking of state before any of the wrapper functions can be utilized.  Since it is expected that almost all pages will make use of notifications, one can place the repeated setup of the <code>Status</code> service in a page load event handler.  This will allow all pages to gain an already setup <code>Status</code> service for immediate use.  For example:</p>\n<pre><code>    .run(function ($rootScope, StatusUtil) {\n        $rootScope.$on(&#39;$routeChangeSuccess&#39;, function () {\n            Status.setupScope($rootScope);\n        });\n    });\n</code></pre><p>Although hidden away in the app&#39;s bootstrap code, the above makes for a less repetitive call to <code>Status.setScope()</code> at the beginning of each use.</p>\n",
            "js": "function rxStatusCtrl ($scope, $rootScope, Status) {\n    Status.setScope($scope);\n\n    $scope.triggerRouteChangeSuccess = function () {\n        $rootScope.$broadcast('$routeChangeSuccess');\n    };\n\n    $scope.clear = function () {\n        Status.clear();\n        $scope.notify = undefined;\n    };\n\n    $scope.setLoading = function (msg) {\n        Status.clear();\n        $scope.notify = Status.setLoading(msg);\n    };\n\n    $scope.setSuccess = function (msg) {\n        Status.clear();\n        $scope.notify = Status.setSuccess(msg);\n    };\n\n    $scope.setSuccessNext = function (msg) {\n        Status.clear();\n        $scope.notify = Status.setSuccessNext(msg);\n    };\n\n    $scope.setSuccessImmediate = function (msg) {\n        Status.clear();\n        $scope.notify = Status.setSuccessImmediate(msg);\n    };\n\n    $scope.setWarning = function (msg) {\n        Status.clear();\n        $scope.notify = Status.setWarning(msg);\n    };\n\n    $scope.setInfo = function (msg) {\n        Status.clear();\n        $scope.notify = Status.setInfo(msg);\n    };\n\n    $scope.setError = function (msg) {\n        Status.clear();\n        $scope.notify = Status.setError(msg);\n    };\n\n    $scope.dismiss = function () {\n        $scope.notify && Status.dismiss($scope.notify);\n        $scope.notify = undefined;\n    };\n}\n",
            "html": "<div ng-controller=\"rxStatusCtrl\">\n    <div style=\"clear: left;\">\n        <ol>\n            <li>\n                <input type=\"button\" value=\"setLoading\"\n                    ng-click=\"setLoading('This should set a spinner')\"/>\n                        should set a spinner</li>\n            <li>&nbsp;</li>\n            <li>\n                <input type=\"button\" value=\"setSuccess\"\n                    ng-click=\"setSuccess('This should show a success on $routeChangeSuccess')\"/>\n                        should show a success on <strong>$routeChangeSuccess</strong> -\n                        <input type=\"button\" ng-click=\"triggerRouteChangeSuccess()\" value=\"Trigger it!\" /></li>\n            <li>&nbsp;</li>\n            <li>\n                <input type=\"button\" value=\"setSuccessNext\"\n                    ng-click=\"setSuccessNext('This should show a success on $routeChangeSuccess')\"/>\n                        should show a success on <strong>$routeChangeSuccess</strong> -\n                        <input type=\"button\" ng-click=\"triggerRouteChangeSuccess()\" value=\"Trigger it!\"/></li>\n            <li>&nbsp;</li>\n            <li>\n                <input type=\"button\" value=\"setSuccessImmediate\"\n                    ng-click=\"setSuccessImmediate('This should show a success immediately')\"/>\n                        should show a <strong>success immediately</strong></li>\n            <li>&nbsp;</li>\n            <li>\n                <input type=\"button\" value=\"setWarning\"\n                    ng-click=\"setWarning('This should set a warning')\"/>\n                        should set a <strong>warning</strong></li>\n            <li>&nbsp;</li>\n            <li>\n                <input type=\"button\" value=\"setInfo\"\n                    ng-click=\"setInfo('This should set an informational')\"/>\n                        should set an <strong>informational</strong></li>\n            <li>&nbsp;</li>\n            <li>\n                <input type=\"button\" value=\"setError\"\n                    ng-click=\"setError('This should set an error')\"/>\n                        should set an <strong>error</strong></li>\n        </ol>\n\n        <hr ng-show=\"!!notify\" />\n        <p ng-show=\"!!notify\">\n            <input type=\"button\" value=\"Dismiss\" ng-click=\"dismiss()\" /> the message shown </p>\n\n        <p ng-show=\"notify\">\n            <input type=\"button\" value=\"Clear\" ng-click=\"clear()\" /> all shown messages </p>\n    </div>\n</div>\n",
            "less": "",
            "midway": "\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    },
    {
        "name": "rxStatusColumn",
        "moduleName": "'encore.ui.rxStatusColumn'",
        "displayName": "Rx Status Column",
        "srcFiles": [
            "src/rxStatusColumn/rxStatusColumn.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [
            "templates/rxStatusColumn/templates/rxStatusColumn.html"
        ],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/experimental.svg\" alt=\"experimental\"></a></p>\n<h1>Directives</h1>\n<p>This component provides directives and styles for putting status columns into tables.</p>\n<h2>rx-status-header</h2>\n<p>For the <code>&lt;th&gt;</code> component representing the status column, add the <code>rx-status-header</code> attribute, i.e.</p>\n<pre><code>&lt;th rx-status-header&gt;&lt;/th&gt;\n</code></pre><p>Note that status columns are sortable with <a href=\"#/component/rxSortableColumn\">rxSortableColumn</a>, just like any other column. The demo below shows an example of this.</p>\n<p>One few things to note about the demo: The <code>&lt;th&gt;<code> is defined as:</p>\n<pre><code>\n        &lt;th rx-status-header&gt;\n            &lt;rx-sortable-column\n              sort-method=\"sortCol(property)\"\n              sort-property=\"status\"\n              predicate=\"sort.predicate\"\n              reverse=\"sort.reverse\">\n                Status\n            &lt;/rx-sortable-column&gt;\n        &lt;th&gt;\n</code></pre>\n\n<p>In particular, note that the word <code>Status</code> is used as the content of the <code>&lt;rx-sortable-column&gt;</code> directive, but this word doesn&#39;t actually appear in the header of the status column. This is because of a bug in <code>rxSortableColumn</code> that we will fix later. We purposely do not want the word to appear in that column, but we require <em>something</em> to be there, otherwise the column header is not clickable.</p>\n<p>Also note that <code>sort-property=&quot;status&quot;</code> is referring to the <code>server.status</code> property on each row. Thus the sorting is done in this example by the status text coming from the API.</p>\n<h2>rx-status-column</h2>\n<p>For the corresponding <code>&lt;td&gt;</code>, you will need to add the <code>rx-status-column</code> attribute, and set the <code>status</code> attribute appropriately. You can optionally set <code>api</code> and <code>tooltip-content</code> attributes. <code>tooltip-content</code> sets the tooltip that will be used. If not set, it will default to the value you passed in for <code>status</code>. The <code>api</code> attribute will be explained below.</p>\n<p>We currently support six statuses, with corresponding CSS styles. Namely, <code>&quot;ACTIVE&quot;</code>, <code>&quot;DISABLED&quot;</code>, <code>&quot;WARNING&quot;</code>, <code>&quot;ERROR&quot;</code>, <code>&quot;INFO&quot;</code> and <code>&quot;PENDING&quot;</code>. If your code happens to already use those statuses, then you can simply pass them to the <code>status</code> attribute as appropriate. However, it&#39;s likely that internally you will be receiving a number of different statuses from your APIs, and will need to map them to these six statuses.</p>\n<p>The example in the demo shows a typical use of this directive, such as:</p>\n<pre><code>&lt;tbody&gt;\n    &lt;tr ng-repeat=&quot;server in servers&quot;&gt;\n        &lt;!-- Both `api` and `tooltip-content` are optional --&gt;\n        &lt;td rx-status-column status=&quot;{{ server.status }}&quot; api=&quot;{{ server.api }}&quot; tooltip-content=&quot;{{ server.status }}&quot;&gt;&lt;/td&gt;\n        &lt;td&gt;{{ server.title }}&lt;/td&gt;\n        &lt;td&gt;{{ server.value }}&lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/tbody&gt;\n</code></pre><h1>A note about color usage for rxStatusColumn</h1>\n<p>Encore uses the color red for destructive and &quot;delete&quot; actions, and the color green for additive or &quot;create&quot; actions, and at first it may seem that the styles of rxStatusColumn do not follow that same logic. However, the distinction here is that when an action or status on an item is &quot;in progress&quot; or &quot;pending&quot; (i.e. the user cannot take any additional action on that item until a transition completes), it is given the yellow animated <code>PENDING</code> treatment. This is true even for &quot;create&quot;/&quot;add&quot; actions or &quot;delete&quot; actions. A general rule of thumb to follow is that if a status ends in -<code>ING</code>, it should get the animated yellow stripes of <code>PENDING</code>.</p>\n<h1>Defining mappings</h1>\n<p>To accommodate different statuses, the <code>rxStatusMappings</code> factory includes methods for defining mappings from your own statuses to the six defined ones. The basic methods for this are <code>rxStatusMappings.addGlobal()</code> and <code>rxStatusMappings.addAPI()</code>.</p>\n<h2>addGlobal()</h2>\n<p><code>rxStatusMappings.addGlobal()</code> takes an object as an argument, with the keys being your own product&#39;s statuses, and the values being one of the six internal statuses that it should map to. For example:</p>\n<pre><code>rxStatusMappings.addGlobal({\n    &#39;RUNNING&#39;: &#39;ACTIVE&#39;,\n    &#39;STANDBY&#39;: &#39;INFO&#39;,\n    &#39;SUSPENDED&#39;: &#39;WARNING&#39;,\n    &#39;FAILURE&#39;: &#39;ERROR&#39;\n})\n</code></pre><p>These mappings will be used throughout all instances of <code>rx-status-column</code> in your code. </p>\n<h2>addAPI()</h2>\n<p>Say that you are using three APIs in your product, <code>X</code>, <code>Y</code> and <code>Z</code>. Both <code>X</code> and <code>Y</code> define a status <code>&quot;FOO&quot;</code>, which you want to map to encore-ui&#39;s <code>&quot;WARNING&quot;</code>. You can declare this  mapping with <code>rxStatusMappings.addGlobal({ &#39;FOO&#39;: &#39;WARNING&#39; })</code>. But your API <code>Z</code> also returns a <code>&quot;FOO&quot;</code> status, which you need mapped to encore-ui&#39;s <code>&quot;ERROR&quot;</code> status. </p>\n<p>You <em>could</em> do a transformation in your product to convert the <code>&quot;FOO&quot;</code> from <code>Z</code> into something else, or you can make use of <code>rxStatusMappings.addAPI()</code>, as follows:</p>\n<pre><code>rxStatusMappings.addAPI(&#39;z&#39;, { &#39;FOO&#39;: &#39;ERROR&#39; })\n</code></pre><p>Then in your template code, you would use <code>rx-status-column</code> as:</p>\n<pre><code>&lt;td rx-status-column status=&quot;{{ status }}&quot; api=&quot;z&quot;&gt;\n</code></pre><p>This will tell encore-ui that it should first check if the passed in <code>status</code> was defined separately for an api <code>&quot;z&quot;</code>, and if so, to use that mapping. If <code>status</code> can&#39;t be found in the mappings defined for <code>&quot;z&quot;</code>, then it will fall back to the mappings you defined in your <code>.addGlobal()</code> call.</p>\n<h2>mapToActive()/mapToWarning()/mapToError()/mapToInfo()/mapToPending()</h2>\n<p>While <code>.addGlobal()</code> and <code>.addAPI()</code> would be sufficient on their own, they can be slightly cumbersome. If you have a list of statuses that all need to get mapped to the same encore-ui status, the mapping object will be forced to have repetition, leaving room for errors. For example, something like this:</p>\n<pre><code>rxStatusMappings.addGlobal({\n    &#39;BLOCKED&#39;: &#39;ERROR&#39;,\n    &#39;SHUTDOWN&#39;: &#39;ERROR&#39;,\n    &#39;FAILED&#39;: &#39;ERROR&#39;\n});\n</code></pre><p>There is required repetition of <code>&quot;ERROR&quot;</code> in each pair, and there&#39;s always the chance of misspelling <code>&quot;ERROR&quot;</code>. Instead, we provide a utility method <code>mapToError</code> to help with this:</p>\n<pre><code>rxStatusMappings.mapToError([&#39;BLOCKED&#39;, &#39;SHUTDOWN&#39;, &#39;FAILED&#39;]);\n</code></pre><p>This has the advantage that it&#39;s shorter to type, eliminates the chance of mistyping or misassigning <code>&quot;ERROR&quot;</code>, and keeps all <code>&quot;ERROR&quot;</code> mappings physically grouped. With this, you could easily keep your mapping values in an Angular <code>.value</code> or <code>.constant</code>, and just pass them to these methods in your <code>.run()</code> method.</p>\n<p>There are equivalent <code>mapToWarning</code>, <code>mapToActive</code>, <code>mapToDisabled</code>, <code>mapToPending</code> and <code>mapToInfo</code> methods.</p>\n<p>All six of these methods can take an array or a single string as the first argument. The call above is equivalent to this group of individual calls:</p>\n<pre><code>rxStatusMappings.mapToError(&#39;BLOCKED&#39;);\nrxStatusMappings.mapToError(&#39;SHUTDOWN&#39;);\nrxStatusMappings.mapToError(&#39;FAILED&#39;);\n</code></pre><p>All six can also take <code>api</code> as a second, optional parameter. Thus we could define the <code>rxStatusMappings.addAPI({ &#39;FOO&#39;: &#39;ERROR&#39; }, &#39;z&#39;)</code> example from above as:</p>\n<pre><code>rxStatusMappings.mapToError(&#39;FOO&#39;, &#39;z&#39;);\n</code></pre><h2>getInternalMapping()</h2>\n<p><code>rxStatusMappings</code> defines a <code>getInternalMapping(statusString, api)</code> method, which the framework uses to map a provided <code>status</code> string based on the mapping rules from all the methods above. It&#39;s intended for internal use, but there&#39;s nothing stopping you from using it if you find a need.</p>\n<p>If you ask it to map a string that is not registered for a mapping, it will return back that same string.</p>\n",
            "js": "/*jshint unused:false*/\n\n// This file is used to help build the 'demo' documentation page and should be updated with example code\nfunction rxStatusColumnCtrl ($scope, rxStatusMappings, rxSortUtil) {\n    $scope.servers = [\n        { status: 'ACTIVE', title: 'ACTIVE status' },\n        { status: 'ERROR', title: 'ERROR status' },\n        { status: 'DISABLED', title: 'DISABLED status' },\n        { status: 'DELETED', title: 'DELETED status mapped to ERROR' },\n        { status: 'UNKNOWN', title: 'UNKNOWN status mapped to ERROR' },\n        { status: 'RESCUE', title: 'RESCUE status mapped to INFO' },\n        { status: 'SUSPENDED', title: 'SUSPENDED status mapped to WARNING' },\n        { status: 'REBUILD', title: 'REBUILD status mapped to PENDING' },\n        { status: 'RESIZE', title: 'RESIZE status mapped to PENDING' },\n        { status: 'MIGRATING', title: 'MIGRATING status mapped to PENDING' },\n        { status: 'DELETING', title: 'DELETING status mapped to PENDING, using `fooApi` mapping', api:'fooApi' }\n    ];\n\n    // We have a few different ways of adding mappings. We've tried to show them all here\n    rxStatusMappings.addGlobal({\n        'DELETING': 'PENDING'\n    });\n    rxStatusMappings.mapToInfo('RESCUE');\n    rxStatusMappings.mapToWarning('SUSPENDED');\n    rxStatusMappings.mapToPending(['REBUILD','RESIZE','MIGRATING']);\n    rxStatusMappings.mapToError(['DELETED', 'UNKNOWN']);\n    rxStatusMappings.addAPI('fooApi', { 'DELETING': 'PENDING' });\n    rxStatusMappings.mapToPending('SomeApiSpecificStatus', 'fooApi');\n    $scope.sortCol = function (predicate) {\n        return rxSortUtil.sortCol($scope, predicate);\n    };\n    $scope.sort = rxSortUtil.getDefault('status');\n}\n",
            "html": "<div ng-controller=\"rxStatusColumnCtrl\">\n    <table class=\"table-striped demo-status-column-table\">\n        <thead>\n            <tr>\n                <th rx-status-header>\n                    <rx-sortable-column\n                      sort-method=\"sortCol(property)\"\n                      sort-property=\"status\"\n                      predicate=\"sort.predicate\"\n                      reverse=\"sort.reverse\">\n                        Status\n                    </rx-sortable-column>\n                </th>\n                <th class=\"column-title\">\n                    Title\n                </th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr ng-repeat=\"server in servers | orderBy: sort.predicate:sort.reverse \">\n                <!-- Both `api` and `tooltip-content` are optional -->\n                <td rx-status-column status=\"{{ server.status }}\" api=\"{{ server.api }}\" tooltip-content=\"{{ server.status }}\"></td>\n                <td>{{ server.title }}</td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n\n<style>\n.demo-status-column-table {\n    max-width: 500px;\n}\n</style>\n",
            "less": "/*\n * rxStatusColumn\n */\n\nth.rx-status-header {\n    width: 20px;\n    padding: 0;\n    rx-sortable-column {\n        .sort-action {\n            color: transparent;\n        }\n        .sort-icon {\n            margin: -9px 14px;\n        }\n    }\n}\n\ntd.rx-status-column {\n    i {\n        padding-left: 2px;\n    }\n    &.status-ACTIVE {\n        background: #ddffd3;\n    }\n    &.status-PENDING {\n        background: #fdbc3c;\n        background-image: url('images/status-pending.gif');\n    }\n    &.status-WARNING {\n        background: #fdbc3c;\n        i {\n            color: #db7820;\n        }\n    }\n    &.status-ERROR {\n        background: #eb2124;\n        i {\n            color: #861212;\n        }\n    }\n    &.status-INFO {\n        background: #86cafd;\n        i {\n            color: #287BBD;\n        }\n    }\n    &.status-DISABLED {\n        background: #dededd;\n    }\n\n    .fa-exclamation-circle {\n        color: transparent;\n    }\n\n\n}\n",
            "midway": "var _ = require('lodash');\nvar Page = require('astrolabe').Page;\n\nvar rxStatusColumn = require('../rxStatusColumn.page').rxStatusColumn;\nvar rxSortableColumn = require('../../rxSortableColumn/rxSortableColumn.page').rxSortableColumn;\n\n// an anonymous page object to demonstrate table and cell creation\nvar repeaterString = 'server in servers';\nvar tablePageObject = Page.create({\n\n    rootElement: {\n        get: function () {\n            return $('.demo-status-column-table');\n        }\n    },\n\n    tblServers: {\n        get: function () {\n            return this.rootElement.all(by.repeater(repeaterString));\n        }\n    },\n\n    column: {\n        value: function (columnName) {\n            // Only 'Status' is supported -- 'Title' is unsortable.\n            if (columnName === 'Status') {\n                var columnElement = this.rootElement.$('rx-sortable-column[sort-property=\"status\"]');\n                return rxSortableColumn.initialize(columnElement, repeaterString);\n            }\n        }\n    },\n\n    row: {\n        value: function (rowIndex) {\n            var rowElement = this.tblServers.get(rowIndex);\n            return Page.create({\n                // The tests below focus heavily on this table row property\n                status: {\n                    get: function () {\n                        return rxStatusColumn.initialize(rowElement.$('[rx-status-column]'));\n                    }\n                },\n\n                // goo.gl/OJdysF\n                title: {\n                    get: function () {\n                        return rowElement.$('td+td').getText();\n                    }\n                }\n            });\n        }\n    }\n\n});\n\nvar statuses = rxStatusColumn.statuses;\nvar icons = rxStatusColumn.icons;\nvar colors = rxStatusColumn.colors;\ndescribe('rxStatusColumn', function () {\n\n    before(function () {\n        demoPage.go('#/component/rxStatusColumn');\n    });\n\n    describe('rows', function () {\n        var status;\n\n        describe('active cell', function () {\n\n            before(function () {\n                status = tablePageObject.row(0).status;\n            });\n\n            it('should have a status by type', function () {\n                expect(status.byType).to.eventually.equal(statuses.active);\n            });\n\n            it('should not have a status by icon', function () {\n                expect(status.byIcon).to.eventually.be.null;\n            });\n\n            it('should have a status by color', function () {\n                expect(status.byColor).to.eventually.equal(colors.active);\n            });\n\n            it('should not have an api ', function () {\n                expect(status.api).to.eventually.be.null;\n            });\n\n            it('should not have a tooltip', function () {\n                expect(status.tooltip.exists).to.eventually.be.true;\n            });\n\n            it('should have tooltip text', function () {\n                expect(status.tooltip.text).to.eventually.equal('ACTIVE');\n            });\n\n        });\n\n        describe('disabled cell', function () {\n\n            before(function () {\n                status = tablePageObject.row(3).status;\n            });\n\n            it('should have a status by type', function () {\n                expect(status.byType).to.eventually.equal(statuses.disabled);\n            });\n\n            it('should not have a status by icon', function () {\n                expect(status.byIcon).to.eventually.be.null;\n            });\n\n            it('should have a status by color', function () {\n                expect(status.byColor).to.eventually.equal(colors.disabled);\n            });\n\n            it('should not have an api ', function () {\n                expect(status.api).to.eventually.be.null;\n            });\n\n            it('should not have a tooltip', function () {\n                expect(status.tooltip.exists).to.eventually.be.true;\n            });\n\n            it('should have tooltip text', function () {\n                expect(status.tooltip.text).to.eventually.equal('DISABLED');\n            });\n\n        });\n\n        describe('error cell', function () {\n\n            before(function () {\n                status = tablePageObject.row(4).status;\n            });\n\n            it('should have a status by type', function () {\n                expect(status.byType).to.eventually.equal(statuses.error);\n            });\n\n            it('should not have a status by icon', function () {\n                expect(status.byIcon).to.eventually.equal(statuses.error);\n            });\n\n            it('should have a status by color', function () {\n                expect(status.byColor).to.eventually.equal(colors.error);\n            });\n\n            it('should have a tooltip', function () {\n                expect(status.tooltip.exists).to.eventually.be.true;\n            });\n\n            it('should have tooltip text', function () {\n                expect(status.tooltip.text).to.eventually.equal('ERROR');\n            });\n\n        });\n\n        describe('info cells', function () {\n\n            describe('rescue cell', function () {\n\n                before(function () {\n                    status = tablePageObject.row(7).status;\n                });\n\n                it('should have a status by type', function () {\n                    expect(status.byType).to.eventually.equal(statuses.rescue);\n                });\n\n                it('should not have a status by icon', function () {\n                    expect(status.byIcon).to.eventually.equal(icons.info);\n                });\n\n                it('should have a status by color', function () {\n                    expect(status.byColor).to.eventually.equal(colors.info);\n                });\n\n            });\n\n        });\n\n        describe('pending cells', function () {\n\n            describe('migrating cell', function () {\n\n                before(function () {\n                    status = tablePageObject.row(5).status;\n                });\n\n                it('should have a status by type', function () {\n                    expect(status.byType).to.eventually.equal(statuses.migrating);\n                });\n\n                it('should have a status by icon', function () {\n                    expect(status.byIcon).to.eventually.be.null;\n                });\n\n                it('should have a status by color', function () {\n                    expect(status.byColor).to.eventually.equal(colors.pending);\n                });\n\n            });\n\n            describe('deleting cell', function () {\n\n                before(function () {\n                    status = tablePageObject.row(2).status;\n                });\n\n                it('should have a status by type', function () {\n                    expect(status.byType).to.eventually.equal(statuses.deleting);\n                });\n\n                it('should have a status by icon', function () {\n                    expect(status.byIcon).to.eventually.be.null;\n                });\n\n                it('should have a status by color', function () {\n                    expect(status.byColor).to.eventually.equal(colors.pending);\n                });\n\n                it('should be using an api', function () {\n                    expect(status.api).to.eventually.equal('fooApi');\n                });\n\n                it('should have tooltip text', function () {\n                    expect(status.tooltip.text).to.eventually.equal('DELETING');\n                });\n\n            });\n\n        });\n\n    });\n\n    describe('sorting', function () {\n        var column;\n        var ascendingOrder = _.values(statuses).sort();\n\n        var statusCellData = function (cellElements) {\n            return cellElements.map(function (cellElement) {\n                return rxStatusColumn.initialize(cellElement).byType;\n            });\n        };\n\n        before(function () {\n            column = tablePageObject.column('Status');\n        });\n\n        it('should support sorting ascending', function () {\n            column.sortAscending();\n            expect(column.getDataUsing(statusCellData, '[rx-status-column]')).to.eventually.eql(ascendingOrder);\n        });\n\n        it('should support sorting descending', function () {\n            var descendingOrder = ascendingOrder.reverse();\n            column.sortDescending();\n            expect(column.getDataUsing(statusCellData, '[rx-status-column]')).to.eventually.eql(descendingOrder);\n        });\n\n    });\n\n});\n\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    },
    {
        "name": "rxToggle",
        "moduleName": "'encore.ui.rxToggle'",
        "displayName": "Rx Toggle",
        "srcFiles": [
            "src/rxToggle/rxToggle.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/stable.svg\" alt=\"stable\"></a></p>\n<p>This component provides and attribute to handle toggling a boolean scope property for hide/show purposes. Normally used in conjunction with ng-show to toggle hidden content. See the collapse functionality in &#39;rxApp&#39; for a real-world use.</p>\n<h2>Future plans</h2>\n<p>In conjunction with rxToggle, it would be helpful to have an attribute that binds the visibility state of an element with an event, so that when an event is fired from a component of the same type, it hides all other components of that time. For example, if a pop-up menu appears on click of a &#39;gear&#39; component, it should hide any other existing pop-up menus currently showing.</p>\n",
            "js": "",
            "html": "<div>\n    <button rx-toggle=\"visible\" id=\"vacillator\" class=\"button\">Toggle Div</button>\n\n    <p>Current state: {{visible}}</p>\n\n    <div ng-show=\"visible\" id=\"vacillated\">Shows when $scope.visibile == true</div>\n</div>",
            "less": "",
            "midway": "describe('rxToggle', function () {\n    var rxToggle, rxToggleContent;\n\n    before(function () {\n        demoPage.go('#/component/rxToggle');\n        rxToggle = $('#vacillator');\n        rxToggleContent = $('#vacillated');\n    });\n\n    it('should toggle content on show', function () {\n        expect(rxToggleContent.isDisplayed()).to.eventually.be.false;\n\n        rxToggle.click();\n\n        expect(rxToggleContent.isDisplayed()).to.eventually.be.true;\n\n        rxToggle.click();\n\n        expect(rxToggleContent.isDisplayed()).to.eventually.be.false;\n    });\n});\n\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    },
    {
        "name": "rxToggleSwitch",
        "moduleName": "'encore.ui.rxToggleSwitch'",
        "displayName": "Rx Toggle Switch",
        "srcFiles": [
            "src/rxToggleSwitch/rxToggleSwitch.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [
            "templates/rxToggleSwitch/templates/rxToggleSwitch.html"
        ],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/experimental.svg\" alt=\"experimental\"></a></p>\n<p>A simple boolean toggle switch.</p>\n<p>The switch shows the states of &#39;ON&#39; and &#39;OFF&#39;, which evaluate to <code>true</code> and <code>false</code>, respectively.  The model values are configurable with the <code>true-value</code> and <code>false-value</code> attributes.</p>\n<p><strong> Note: If the value of the model is not defined at the time of initialization, it will be automatically set to the false value. </strong></p>\n<p>The expression passed to the <code>post-hook</code> attribute will be evaluated every time the switch is toggled (after the model property is written on the scope).  It takes one argument, <code>value</code>, which is the new value of the model.  This can be used instead of a <code>$scope.$watch</code> on the <code>ng-model</code> property.  As shown in the demo, the <code>disabled</code> attribute can be used to prevent further toggles if the <code>post-hook</code> performs an asynchronous operation.</p>\n",
            "js": "/*jshint unused:false*/\n\n// This file is used to help build the 'demo' documentation page and should be updated with example code\nangular.module('demoApp')\n.controller('rxToggleSwitchCtrl', function ($scope, $timeout, rxNotify) {\n    $scope.toggle3 = true;\n\n    $scope.attemptChange = function (value) {\n        $scope.loading = true;\n        rxNotify.add('Saving...', {\n            loading: true\n        });\n\n        // Simulate an api request\n        $timeout(function () {\n            $scope.loading = false;\n            rxNotify.clear('page');\n            rxNotify.add('Change saved', {\n                type: 'success'\n            });\n        }, 1000);\n    };\n});\n",
            "html": "<!-- Sample HTML goes here as a live example of how the component can be used -->\n<div ng-controller=\"rxToggleSwitchCtrl\">\n    <p>\n        <h3>Simple use</h3>\n        <rx-toggle-switch class=\"demo-default-values\" ng-model=\"encoreSuperpowers\"></rx-toggle-switch>\n        <span>Do you have powers? {{ encoreSuperpowers }}</span>\n    </p>\n    <p>\n        <h3>Specific model values</h3>\n        <rx-toggle-switch class=\"demo-model-values\"\n            ng-model=\"toggle2\"\n            true-value=\"active\"\n            false-value=\"disabled\">\n        </rx-toggle-switch>\n        <span>Model value: {{ toggle2 }}</span>\n    </p>\n    <p>\n        <h3>Performing an asynchronous operation</h3>\n        <rx-toggle-switch class=\"demo-post-hook\"\n            ng-model=\"toggle3\"\n            post-hook=\"attemptChange(value)\"\n            disabled=\"loading\">\n        </rx-toggle-switch>\n    </p>\n    <p>\n        <h3>Disabled</h3>\n        <rx-toggle-switch class=\"demo-disabled\" ng-model=\"toggle4\" disabled=\"true\"></rx-toggle-switch>\n    </p>\n</div>\n",
            "less": "/*\n * rxToggleSwitch\n */\n.rx-toggle-switch {\n\n    @textColor: #fff;\n    @offStateColor: #b3b3b3;\n    @borderColor: darken(@offStateColor, 10%);\n    @onStateColor: #00ac31;\n    @knobColor: #fff;\n    @knobBorderColor: darken(@knobColor, 10%);\n    @knobSize: 1.2em;\n    @edgeSpacing: @knobSize * 0.9;\n    @lineHeight: @knobSize * 1.25;\n    @blurDist: @edgeSpacing;\n    @blurSpread: (@edgeSpacing/3) * -1;\n\n    font-size: 0.8em;\n    line-height: @lineHeight;\n\n    display: inline-block;\n\n    border: 1px @borderColor solid;\n    border-radius: 9px;\n    background-color: @offStateColor;\n    color: @textColor;\n\n    padding: 0 @edgeSpacing 0 @edgeSpacing;\n\n    width: 5em;\n\n    cursor: pointer;\n    position: relative;\n    text-align: right;\n\n    .box-shadow(inset 1px 2px @blurDist @blurSpread rgba(0,0,0,0.50));\n    .user-select(none);\n    .box-sizing(border-box);\n\n    &[disabled] {\n        background-color: desaturate(lighten(@offStateColor, 7%), 80%);\n        color: #666666;\n        &.on {\n            background-color: desaturate(lighten(@onStateColor, 33%), 80%);\n        }\n        cursor: not-allowed;\n        .knob {\n            background-color: #adadad;\n            border: 1px #999999 solid;\n        }\n    }\n    &.on {\n        background-color: @onStateColor;\n        text-align: left;\n        .knob {\n            left: 100%;\n            -webkit-transform: translate(-100%, 0);\n            -moz-transform: translate(-100%, 0);\n            transform: translate(-100%, 0);\n        }\n    }\n    .knob {\n        .transition-value(all 0.1s ease-out);\n\n        position: absolute;\n        display: inline-block;\n        top: 0;\n        left: 0;\n\n        width: @knobSize;\n        height: @knobSize;\n        border-radius: (@knobSize/2)+1;\n        background-color: @knobColor;\n        border: 1px @knobBorderColor solid;\n\n        .box-shadow(0 0 @blurDist @blurSpread rgba(0,0,0,0.55));\n        overflow: hidden;\n    }\n\n}\n",
            "midway": "var exercise = require('../rxToggleSwitch.exercise');\n\ndescribe('rxToggleSwitch', function () {\n    var rxToggleSwitch;\n\n    before(function () {\n        demoPage.go('#/component/rxToggleSwitch');\n    });\n\n    describe('defaults', exercise.rxToggleSwitch({\n        cssSelector: '.demo-default-values'\n    }));\n\n    describe('specific model values', exercise.rxToggleSwitch({\n        cssSelector: '.demo-model-values'\n    }));\n\n    describe('post hook', exercise.rxToggleSwitch({\n        cssSelector: '.demo-post-hook'\n    }));\n\n    describe('disabled', exercise.rxToggleSwitch({\n        cssSelector: '.demo-disabled',\n        disabled: true\n    }));\n\n});\n\n// this component's exercise.js file, if it exists, is below\n\nvar _ = require('lodash');\nvar rxToggleSwitch = require('./rxToggleSwitch.page').rxToggleSwitch;\n\n/**\n   rxToggleSwitch exercises.\n   @exports encore.exercise.rxToggleSwitch\n   @param {Object} [options] - Test options. Used to build valid tests.\n   @param {string} [options.cssSelector] - Fallback selector string to initialize widget with.\n   @param {boolean} [options.disabled=false] - Determines if the switch can be toggled\n   @example\n   ```js\n   describe('default exercises', encore.exercise.rxToggleSwitch({\n       cssSelector: '.demo-defualt-values' // select one of many widgets on page\n   }));\n   ```\n */\nexports.rxToggleSwitch = function (options) {\n    if (options === undefined) {\n        options = {};\n    }\n\n    options = _.defaults(options, {\n        disabled: false\n    });\n\n    return function () {\n        var component;\n        var initialState;\n\n        var getText = function (isEnabled) {\n            return isEnabled ? 'ON' : 'OFF';\n        };\n\n        var toggle = function () {\n            return component.isEnabled().then(function (enabled) {\n                enabled ? component.disable() : component.enable();\n            });\n        };\n\n        before(function () {\n            if (options.cssSelector === undefined) {\n                component = rxToggleSwitch.main;\n            } else {\n                component = rxToggleSwitch.initialize($(options.cssSelector));\n            }\n            component.isEnabled().then(function (isEnabled) {\n                initialState = isEnabled;\n            });\n        });\n\n        it('should show the element', function () {\n            expect(component.isDisplayed()).to.eventually.be.true;\n        });\n\n        if (options.disabled) {\n            it('does not change state when clicked', function () {\n                toggle();\n                expect(component.isEnabled()).to.eventually.equal(initialState);\n                expect(component.text).to.eventually.equal(getText(initialState));\n            });\n        } else {\n            it('is in the ' + getText(initialState) + ' state', function () {\n                expect(component.text).to.eventually.equal(getText(initialState));\n            });\n\n            it('changes to ' + getText(!initialState) + ' when clicked', function () {\n                toggle();\n                expect(component.isEnabled()).to.eventually.equal(!initialState);\n                expect(component.text).to.eventually.equal(getText(!initialState));\n            });\n\n            it('returns to the ' + getText(initialState) + ' when clicked again', function () {\n                toggle();\n                expect(component.isEnabled()).to.eventually.equal(initialState);\n                expect(component.text).to.eventually.equal(getText(initialState));\n            });\n        }\n\n    };\n};\n"
        }
    },
    {
        "name": "rxTokenInterceptor",
        "moduleName": "'encore.ui.rxTokenInterceptor'",
        "displayName": "Rx Token Interceptor",
        "srcFiles": [
            "src/rxTokenInterceptor/rxTokenInterceptor.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [
            "rxSession",
            "rxLocalStorage"
        ],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\"></a></p>\n<p>Simple $http interceptor which adds auth token id to http requests.</p>\n",
            "js": "",
            "html": "<pre>\n    <code>\n        angular.module('encoreApp', ['encore.ui'])\n            .config(function ($httpProvider) {\n                $httpProvider.interceptors.push('TokenInterceptor');\n            });\n    </code>\n</pre>\n",
            "less": "",
            "midway": "\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    },
    {
        "name": "rxUnauthorizedInterceptor",
        "moduleName": "'encore.ui.rxUnauthorizedInterceptor'",
        "displayName": "Rx Unauthorized Interceptor",
        "srcFiles": [
            "src/rxUnauthorizedInterceptor/rxUnauthorizedInterceptor.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [
            "rxSession",
            "rxLocalStorage"
        ],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\"></a></p>\n<p>Simple $http interceptor which will redirect users back to login on 401.</p>\n",
            "js": "",
            "html": "<pre>\n    <code>\n        angular.module('encoreApp', ['encore.ui'])\n            .config(function ($httpProvider) {\n                $httpProvider.interceptors.push('UnauthorizedInterceptor');\n            });\n    </code>\n</pre>\n",
            "less": "",
            "midway": "\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    },
    {
        "name": "tabs",
        "moduleName": "'encore.ui.tabs'",
        "displayName": "Tabs",
        "srcFiles": [],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\"></a></p>\n<p>This component provides styles and a demo for the <a href=\"https://github.com/angular-ui/bootstrap/tree/master/src/tabs\">the Angular-UI Bootstrap Tabs plugin</a>, which is included as a dependency for EncoreUI.</p>\n<h2>Usage</h2>\n<p>Usage is the exact same as demoed on the Angular-UI Bootstrap site. See <a href=\"http://angular-ui.github.io/bootstrap/\">the Angular-UI Bootstrap Docs</a> for further guidance on usage and configuration of this component.</p>\n<h2>Disclaimer</h2>\n<p>Only the default horizontal tabs are supported by these styles. <code>Vertical</code>, <code>Pills</code> and <code>Justified</code> tabs are currently unsupported. Support can be added if needed.</p>\n",
            "js": "",
            "html": "<div>\n    <h1 class=\"title lg\">Alternative Lorem Ipsums</h1>\n    <tabset id=\"tabs\">\n        <tab heading=\"Bacon Ipsum\">\n            <p>Bacon ipsum dolor sit amet salami jowl corned beef, andouille flank tongue ball tip kielbasa pastrami tri-tip meatloaf short loin beef biltong. Cow bresaola ground round strip steak fatback meatball shoulder leberkas pastrami sausage corned beef t-bone pork belly drumstick.</p>\n        </tab>\n        <tab heading=\"Veggie Ipsum\">\n            <p>Veggies sunt bona vobis, proinde vos postulo esse magis grape pea sprouts horseradish courgette maize spinach prairie turnip jícama coriander quandong gourd broccoli seakale gumbo. Parsley corn lentil zucchini radicchio maize burdock avocado sea lettuce. Garbanzo tigernut earthnut pea fennel.</p>\n        </tab>\n        <tab>\n            <tab-heading>Cat Ipsum <span class=\"subdued\">(meow)</span></tab-heading>\n            <p>Cat ipsum dolor sit amet, hunt anything that moves or hopped up on goofballs hide when guests come over. Hide when guests come over intrigued by the shower, or stare at ceiling climb leg for stretch and use lap as chair. Hunt anything that moves flop over, leave dead animals as gifts for chase imaginary bugs, chase mice for stare at ceiling yet hopped up on goofballs.</p>\n        </tab>\n        <tab>\n            <tab-heading>Tupac Ipsum</tab-heading>\n            <p>I give a holla to my sisters on welfare 2Pac cares, if don't nobody else care And, I know they like to beat you down a lot When you come around the block, brothers clown a lot But please don't cry, dry your eyes, never let up Forgive but don't forget, girl, keep your head up And when he tells you you ain't nothin', don't believe him And if he can't learn to love you, you should leave him Cause sister, you don't need him And I ain't tryin' to gas ya up, I just call 'em how I see 'em</p>\n        </tab>\n    </tabset>\n</div>",
            "less": "@import 'vars';\n\n/*\n\n# Angular-UI Tabs\n\nProvides styling for the Angular-UI tab HTML\n\n```\n<div class=\"tabbable\">\n    <ul class=\"nav nav-tabs\">\n        <li class=\"active\">\n            <a>Bacon Ipsum</a>\n        </li>\n        <li>\n            <a>Veggie Ipsum</a>\n        </li>\n        <li>\n            <a>Cat Ipsum</a>\n        </li>\n    </ul>\n    <div class=\"tab-content\">\n        <div class=\"tab-pane active\">\n            <p>First Tab Content. Bacon ipsum dolor sit amet salami jowl corned beef, andouille flank tongue ball tip kielbasa pastrami tri-tip meatloaf short loin beef biltong. Cow bresaola ground round strip steak fatback meatball shoulder leberkas pastrami sausage corned beef t-bone pork belly drumstick.</p>\n        </div>\n        <div class=\"tab-pane\">\n            <p>Second tab content. Veggies sunt bona vobis, proinde vos postulo esse magis grape pea sprouts horseradish courgette maize spinach prairie turnip jícama coriander quandong gourd broccoli seakale gumbo. Parsley corn lentil zucchini radicchio maize burdock avocado sea lettuce. Garbanzo tigernut earthnut pea fennel.</p>\n        </div>\n        <div class=\"tab-pane\">\n            <p>Cat ipsum dolor sit amet, hunt anything that moves or hopped up on goofballs hide when guests come over. Hide when guests come over intrigued by the shower, or stare at ceiling climb leg for stretch and use lap as chair. Hunt anything that moves flop over, leave dead animals as gifts for chase imaginary bugs, chase mice for stare at ceiling yet hopped up on goofballs.</p>\n        </div>\n    </div>\n</div>\n```\n*/\n.nav-tabs {\n    .flexbox();\n    border-bottom: 9px solid @tabBorder;\n    clear: both;\n\n    li {\n        .flex(0 0 auto);\n        font-size: 14px;\n        margin-right: 1px;\n    }\n\n    a {\n        display: block;\n        background: #3f6085;\n        color: #ccc;\n        padding: 10px 20px;\n\n        .subdued {\n            color: @subduedTextHover;\n        }\n\n        &:hover:not(.active),\n        &:focus:not(.active) {\n            cursor: pointer;\n            color: @white;\n            text-decoration: none;\n\n            .subdued {\n                color: @subduedText;\n            }\n        }\n    }\n\n    .active a {\n        background: @tabBorder;\n        color: @white;\n\n        .subdued {\n            color: @subduedText;\n        }\n    }\n}\n\n.tab-pane {\n    clear: both;\n    display: none;\n    background: @white;\n    padding: 10px;\n    border-left: 2px solid @tabBorder;\n    border-right: 2px solid @tabBorder;\n    border-bottom: 2px solid @tabBorder;\n\n    &.active {\n        display: block;\n    }\n\n    // If the title is the first part of the tab-pane, remove its top border so there isn't so much space\n    .title:first-child {\n        margin-top: 0;\n    }\n}\n",
            "midway": "var tabsPage = require('../tabs.page').tabs;\n\ndescribe('tabs', function () {\n    var tabs;\n    var tabNames = ['Bacon Ipsum', 'Veggie Ipsum', 'Cat Ipsum (meow)', 'Tupac Ipsum'];\n\n    before(function () {\n        demoPage.go('#/component/tabs');\n        tabs = tabsPage.initialize($('#tabs'));\n    });\n\n    it('should show element', function () {\n        expect(tabs.isDisplayed()).to.eventually.be.true;\n    });\n\n    it('should count all the tabs', function () {\n        expect(tabs.count()).to.eventually.equal(tabNames.length);\n    });\n\n    it('should still have all tabs match the test data', function () {\n        expect(tabs.names).to.eventually.eql(tabNames);\n    });\n\n    it('should not find tabs that are not represented', function () {\n        expect(tabs.hasTab('Yankovipsum')).to.eventually.be.false;\n    });\n\n    it('should find tabs that represent', function () {\n        expect(tabs.hasTab('Tupac Ipsum')).to.eventually.be.true;\n    });\n\n    it('should have an active tab', function () {\n        expect(tabs.activeTab.name).to.eventually.equal('Bacon Ipsum');\n    });\n\n    it('should get a tab by index', function () {\n        expect(tabs.byIndex(1).name).to.eventually.equal('Veggie Ipsum');\n    });\n\n    it('should report null for tabs missing subtitles', function () {\n        expect(tabs.byIndex(-1).subtitle).to.eventually.be.null;\n    });\n\n    describe('tab', function () {\n        var tab;\n\n        before(function () {\n            tab = tabs.byName('Cat Ipsum');\n        });\n\n        it('should be displayed', function () {\n            expect(tab.isDisplayed()).to.eventually.be.true;\n        });\n\n        it('should still not be the active tab', function () {\n            expect(tab.isActive()).to.eventually.be.false;\n        });\n\n        it('should report that it is the active tab after visiting it', function () {\n            tab.visit();\n            expect(tab.isActive()).to.eventually.be.true;\n        });\n\n        it('should be the active tab in the tabs group', function () {\n            expect(tabs.activeTab.name).to.eventually.equal('Cat Ipsum');\n        });\n\n        it('should have a full name', function () {\n            expect(tab.fullName).to.eventually.equal('Cat Ipsum (meow)');\n        });\n\n        it('should have a name', function () {\n            expect(tab.name).to.eventually.equal('Cat Ipsum');\n        });\n\n        it('should have a subtitle', function () {\n            expect(tab.subtitle).to.eventually.equal('(meow)');\n        });\n\n    });\n\n    describe('main tabs', function () {\n\n        before(function () {\n            demoPage.go('#/component/hotkeys');\n        });\n\n        it('should find the only tabs on the page', function () {\n            expect(tabsPage.main.names).to.eventually.eql(['Demo', 'Markup', 'JavaScript', 'Protractor']);\n        });\n\n    });\n\n});\n\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    },
    {
        "name": "tooltips",
        "moduleName": "'encore.ui.tooltips'",
        "displayName": "Tooltips",
        "srcFiles": [],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\"></a></p>\n<p>This component provides styles and a demo for the <a href=\"https://github.com/angular-ui/bootstrap/tree/master/src/tabs\">the Angular-UI Bootstrap Tooltip plugin</a>, which is included as a dependency for EncoreUI.</p>\n<p>Note that the <code>tooltip</code> directive and its optional attributes can <em>only</em> be applied to raw HTML elements. They can&#39;t be applied to directives like this: <code>&lt;rx-button tooltip=&quot;...&quot;&gt;</code></p>\n<p>If you&#39;re creating your own custom directive, it&#39;s fine to use the <code>tooltip</code> directive inside of your directive&#39;s template.</p>\n<h2>Usage</h2>\n<p>Usage is the exact same as demoed on the Angular-UI Bootstrap site. See <a href=\"http://angular-ui.github.io/bootstrap/\">the Angular-UI Bootstrap Docs</a> for further guidance on usage and configuration of this component.</p>\n",
            "js": "/* jshint unused:false */\nfunction tooltipsCtrl ($scope) {\n    $scope.dynamicTooltip = 'I was defined in the controller!';\n}\n",
            "html": "<div ng-controller=\"tooltipsCtrl\">\n    <ul>\n        <li><span tooltip=\"Right tooltip\" tooltip-placement=\"right\">Hover over me for a right-side tooltip</span></li>\n        <li><span tooltip=\"A top tooltip\" tooltip-placement=\"top\"><rx-button default-msg=\"Top tooltip\"></rx-button></span></li>\n        <li><span tooltip=\"A bottom tooltip\" tooltip-placement=\"bottom\"><rx-button default-msg=\"Bottom tooltip\"></rx-button></span></li>\n        <li><span tooltip=\"{{dynamicTooltip}}\"><rx-button default-msg=\"Hover to see text coming from the controller\"></rx-button></span></li>\n        <li><span tooltip-html-unsafe=\"<span class='tooltip-header'>A Tooltip Title</span><p>You can use HTML</p>\"><span>Hover over this text to see HTML in a tooltip</span></li>\n    </ul>\n</div>\n",
            "less": "@import 'vars';\n//\n// Tooltips\n// --------------------------------------------------\n\n@zindexTooltip: 1070;\n@tooltipMaxWidth: 200px;\n@tooltipHeaderColor: #fff;\n@tooltipColor: #f1f1f1;\n@tooltipBg: #878787;\n@tooltipOpacity: 1;\n\n//** Tooltip arrow width\n@tooltipArrowWidth: 5px;\n//** Tooltip arrow color\n@tooltipArrowColor: @tooltipBg;\n\n// Base class\n.tooltip {\n    position: absolute;\n    z-index: @zindexTooltip;\n    display: block;\n    visibility: visible;\n    font-size: @appFontSize;\n    line-height: @appLineHeight;\n    .opacity(0);\n\n    &.in {\n        .opacity(@tooltipOpacity);\n    }\n\n    &.top {\n        margin-top: -3px;\n        padding: @tooltipArrowWidth 0;\n    }\n\n    &.right {\n        margin-left: 3px;\n        padding: 0 @tooltipArrowWidth;\n    }\n\n    &.bottom {\n        margin-top: 3px;\n        padding: @tooltipArrowWidth 0;\n    }\n\n    &.left {\n        margin-left: -3px;\n        padding: 0 @tooltipArrowWidth;\n    }\n}\n\n// Wrapper for the tooltip content\n.tooltip-inner {\n    max-width: @tooltipMaxWidth;\n    padding: 3px 8px;\n    color: @tooltipColor;\n    text-align: center;\n    text-decoration: none;\n    background-color: @tooltipBg;\n    .border-radius(4px);\n    box-shadow: rgba(0, 0, 0, 0.35) 1px 1px 4px 0px;\n    padding: 1em;\n    .tooltip-header {\n        color: @tooltipHeaderColor;\n        text-align: left;\n        font-size: 15px;\n        padding-bottom: 5px;\n        font-weight: 600;\n  }\n}\n\n// Arrows\n.tooltip-arrow {\n    position: absolute;\n    width: 0;\n    height: 0;\n    border-color: transparent;\n    border-style: solid;\n    text-shadow: rgba(0, 0, 0, 0.09) 1px 1px 1px;\n}\n.tooltip {\n    &.top .tooltip-arrow {\n        bottom: 0;\n        left: 50%;\n        margin-left: -@tooltipArrowWidth;\n        border-width: @tooltipArrowWidth @tooltipArrowWidth 0;\n        border-top-color: @tooltipArrowColor;\n    }\n    &.top-left .tooltip-arrow {\n        bottom: 0;\n        left: @tooltipArrowWidth;\n        border-width: @tooltipArrowWidth @tooltipArrowWidth 0;\n        border-top-color: @tooltipArrowColor;\n    }\n    &.top-right .tooltip-arrow {\n        bottom: 0;\n        right: @tooltipArrowWidth;\n        border-width: @tooltipArrowWidth @tooltipArrowWidth 0;\n        border-top-color: @tooltipArrowColor;\n    }\n    &.right .tooltip-arrow {\n        top: 50%;\n        left: 0;\n        margin-top: -@tooltipArrowWidth;\n        border-width: @tooltipArrowWidth @tooltipArrowWidth @tooltipArrowWidth 0;\n        border-right-color: @tooltipArrowColor;\n    }\n    &.left .tooltip-arrow {\n        top: 50%;\n        right: 0;\n        margin-top: -@tooltipArrowWidth;\n        border-width: @tooltipArrowWidth 0 @tooltipArrowWidth @tooltipArrowWidth;\n        border-left-color: @tooltipArrowColor;\n    }\n    &.bottom .tooltip-arrow {\n        top: 0;\n        left: 50%;\n        margin-left: -@tooltipArrowWidth;\n        border-width: 0 @tooltipArrowWidth @tooltipArrowWidth;\n        border-bottom-color: @tooltipArrowColor;\n    }\n    &.bottom-left .tooltip-arrow {\n        top: 0;\n        left: @tooltipArrowWidth;\n        border-width: 0 @tooltipArrowWidth @tooltipArrowWidth;\n        border-bottom-color: @tooltipArrowColor;\n    }\n    &.bottom-right .tooltip-arrow {\n        top: 0;\n        right: @tooltipArrowWidth;\n        border-width: 0 @tooltipArrowWidth @tooltipArrowWidth;\n        border-bottom-color: @tooltipArrowColor;\n    }\n}\n",
            "midway": "\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    },
    {
        "name": "typeahead",
        "moduleName": "'encore.ui.typeahead'",
        "displayName": "Typeahead",
        "srcFiles": [
            "src/typeahead/typeahead.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\"></a></p>\n<p>This component provides styles and a demo for the <a href=\"https://github.com/angular-ui/bootstrap/tree/master/src/typeahead\">the Angular-UI Bootstrap Typeahead plugin</a>, which is included as a dependency for EncoreUI.</p>\n<h2>Usage</h2>\n<p>Usage is the exact same as demoed on the Angular-UI Bootstrap site. See <a href=\"http://angular-ui.github.io/bootstrap/\">the Angular-UI Bootstrap Docs</a> for further guidance on usage and configuration of this component.</p>\n<p>A feature has been added that shows the list of options when the input receives focus.  This list is still filtered according to the input&#39;s value, except when the input is empty.  In that case, all the options are shown.  To use this feature, add the <code>allowEmpty</code> parameter to the <code>filter</code> filter in the <code>typeahead</code> attribute.  See the demo for an example.</p>\n",
            "js": "/*jshint unused:false*/\nfunction typeaheadCtrl ($scope) {\n    $scope.states = ['Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut',\n        'Delaware', 'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas',\n        'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi',\n        'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York',\n        'North Dakota', 'North Carolina', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania', 'Republic of Dawood',\n        'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virginia',\n        'Washington', 'West Virginia', 'Wisconsin', 'Wyoming'];\n}\n",
            "html": "<div ng-controller=\"typeaheadCtrl\">\n    <h3 class=\"title\">Standard Use</h3>\n    <rx-form-item label=\"States\">\n        <input type=\"text\" ng-model=\"selected1\" typeahead=\"state for state in states | filter:$viewValue | limitTo:8\">\n    </rx-form-item>\n\n    <h3 class=\"title\">Show List on Focus</h3>\n    <rx-form-item label=\"States\">\n        <input type=\"text\" ng-model=\"selected2\" typeahead=\"state for state in states | filter:$viewValue:allowEmpty\" id=\"typeahead\">\n    </rx-form-item>\n</div>\n",
            "less": "@import 'vars';\n\n.dropdown-menu {\n    position: absolute;\n    top: 100%;\n    left: 0;\n    margin-top: -1px;\n    display: none;\n    list-style: none;\n    background: @white;\n    border: 1px solid #ccc;\n    padding: 6px 0;\n    z-index: 3; // Will display over a textarea element\n    max-height: 300px;\n    overflow-y: auto;\n\n    a {\n        display: block;\n        margin: 0;\n        padding: 5px 10px;\n        color: @inputColor;\n    }\n    .active a {\n        background: @optionHighlightBg;\n        color: @white;\n    }\n}\n",
            "midway": "var typeaheadPage = require('../typeahead.page').typeahead;\n\ndescribe('typeahead', function () {\n    var typeahead;\n\n    before(function () {\n        demoPage.go('#/component/typeahead');\n        typeahead = typeaheadPage.initialize($('#typeahead'));\n    });\n\n    it('should show element', function () {\n        expect(typeahead.isDisplayed()).to.eventually.be.true;\n    });\n\n    it('should hide the menu initially', function () {\n        expect(typeahead.isOpen()).to.eventually.be.false;\n    });\n\n    it('should show the menu when clicked', function () {\n        typeahead.focus();\n        expect(typeahead.isOpen()).to.eventually.be.true;\n    });\n\n    it('should hide the menu when the input loses focus', function () {\n        typeahead.rootElement.element(by.xpath('../..')).click();\n        expect(typeahead.isOpen()).to.eventually.be.false;\n    });\n});\n\n// this component's exercise.js file, if it exists, is below\n\n"
        }
    }
]);