angular.module('demoApp')
.value('components', [
    {
        "name": "configs",
        "moduleName": "'encore.ui.configs'",
        "displayName": "Configs",
        "srcFiles": [
            "src/configs/configs.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/stable.svg\" alt=\"stable\" title=\"\" /></a></p>\n\n<p>Common configs used throughout Encore.</p>\n\n<p>Most of the configs are <code>.constant</code> or <code>.value</code>, but <code>routesCdnPath</code> is configured as a <code>.provider</code>. This is to allow users to override the URL used when in a local/staging environment.</p>\n\n<p>The main reason for that is to let people test local versions of <a href=\"https://github.com/rackerlabs/encore-ui-nav/blob/staging/src/encoreNav.json\">the encore-ui-nav JSON file</a> before submitting pull requests to that repository.</p>\n\n<p>For example, to point to a local <code>mynav.json</code> file, put the following into your <code>app.js</code>:</p>\n\n<pre><code>.config(function (otherdependencies, ..., routesCdnPathProvider) {\n\n    // Other config stuff you need to do\n\n    routesCdnPathProvider.customURL = 'mynav.json';\n});\n</code></pre>\n\n<p>The <code>mynav.json</code> file will likely have to live in your <code>app/</code> folder, depending on your configuration.</p>\n\n<p>If you do set <code>customURL</code> to a non <code>null</code> value, then <code>routesCdnPath.hasCustomURL</code> will automatically get set to <code>true</code>. <code>hasCustomURL</code> is intended only for the framework to use,\nbut we are documenting it in case you find your own use case for it.</p>",
            "js": "",
            "html": "",
            "less": "",
            "midway": ""
        }
    },
    {
        "name": "grid",
        "moduleName": "'encore.ui.grid'",
        "displayName": "Grid",
        "srcFiles": [],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\" title=\"\" /></a></p>\n\n<h1>Description</h1>\n\n<p>While Encore-UI was initially designed to be an AngularJS widget library, we recognize that teams will want to use a CSS layout framework. We have added the <a href=\"http://purecss.io/grids/\">Grids module from Yahoo!'s Pure CSS framework</a> for teams to easily build out a grid or column system as part of Encore-UI. We chose this lightweight framework for its emphasis on flex based layouts.</p>\n\n<h1>Usage</h1>\n\n<p>No additional installation is required. We have automatically included <code>grids-min.css</code> into the encore-ui CSS libraries.</p>\n\n<p>Note that most of the grid layouts you will use will be in the context of <code>rxPage</code> inside <code>rxApp</code>. For this reason we will be using the regular grids only, and not responsive grids.</p>\n\n<p>The code sample below will probably give the clearest context of how grids work. Note that the <code>.pure-g</code> also has a <code>clear</code> class attached because title containers on <code>rxPage</code> components are defaulted to float left.</p>\n\n<p>You'll find that the grid components will not have borders or padding within the grid units themselves. If you need white space between grid columns, adding a <code>columns</code> class to the <code>.pure-g</code> container will give padding of 1.5ems per each individual cell, or 3ems together.</p>",
            "js": "",
            "html": "<rx-page title=\"'Customized Page Title'\">\n\n    <h2 class=\"clear title\">Two u-1-2 modules</h2>\n    <div class=\"pure-g clear\">\n        <div class=\"pure-u-1-2\">\n            <table class=\"table\">\n                <thead>\n                    <th>Header 1</th>\n                </thead>\n                <tbody><tr><td>Cell 1</tr></tbody>\n            </table>\n        </div>\n        <div class=\"pure-u-1-2\">\n            <table class=\"table\">\n                <thead>\n                    <th>Header 1</th>\n                </thead>\n                <tbody><tr><td>Cell 1</tr></tbody>\n            </table>\n        </div>\n    </div>\n\n    <h2 class=\"title\">Three u-1-3 modules</h2>\n    <div class=\"pure-g clear\">\n        <div class=\"pure-u-1-3\">\n            <table class=\"table\">\n                <thead>\n                    <th>Header 1</th>\n                </thead>\n                <tbody><tr><td>Cell 1</tr></tbody>\n            </table>\n        </div>\n        <div class=\"pure-u-1-3\">\n            <table class=\"table\">\n                <thead>\n                    <th>Header 1</th>\n                </thead>\n                <tbody><tr><td>Cell 1</tr></tbody>\n            </table>\n        </div>\n        <div class=\"pure-u-1-3\">\n            <table class=\"table\">\n                <thead>\n                    <th>Header 1</th>\n                </thead>\n                <tbody><tr><td>Cell 1</tr></tbody>\n            </table>\n        </div>\n    </div>\n\n\n    <h2 class=\"title\">Two u-1-2 modules with a columns class</h2>\n    <div class=\"pure-g columns clear\">\n        <div class=\"pure-u-1-2\">\n            <table class=\"table\">\n                <thead>\n                    <th>Header 1</th>\n                </thead>\n                <tbody><tr><td>Cell 1</tr></tbody>\n            </table>\n        </div>\n        <div class=\"pure-u-1-2\">\n            <table class=\"table\">\n                <thead>\n                    <th>Header 1</th>\n                </thead>\n                <tbody><tr><td>Cell 1</tr></tbody>\n            </table>\n        </div>\n    </div>\n\n    <h2 class=\"title\">Three u-1-3 modules with a columns class</h2>\n    <div class=\"pure-g columns clear\">\n        <div class=\"pure-u-1-3\">\n            <table class=\"table\">\n                <thead>\n                    <th>Header 1</th>\n                </thead>\n                <tbody><tr><td>Cell 1</tr></tbody>\n            </table>\n        </div>\n        <div class=\"pure-u-1-3\">\n            <table class=\"table\">\n                <thead>\n                    <th>Header 1</th>\n                </thead>\n                <tbody><tr><td>Cell 1</tr></tbody>\n            </table>\n        </div>\n        <div class=\"pure-u-1-3\">\n            <table class=\"table\">\n                <thead>\n                    <th>Header 1</th>\n                </thead>\n                <tbody><tr><td>Cell 1</tr></tbody>\n            </table>\n        </div>\n    </div>\n\n</rx-page>\n",
            "less": ".pure-g.columns > div {\n    -webkit-box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    box-sizing: border-box;\n    padding-left: 1.25em;\n    padding-right: 1.25em;\n\n    &:first-child {\n        padding-left: 0;\n    }\n    &:last-child {\n        padding-right: 0;\n    }\n}",
            "midway": ""
        }
    },
    {
        "name": "hotkeys",
        "moduleName": "'encore.ui.hotkeys'",
        "displayName": "Hotkeys",
        "srcFiles": [],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\" title=\"\" /></a></p>\n\n<p>This component is simply a reference guide to using <a href=\"http://chieffancypants.github.io/angular-hotkeys/\">the angular-hotkeys plugin</a> from within Encore-UI.</p>\n\n<p>Angular-hotkeys was chosen as the solution for hotkeys from within Encore-UI apps, due to its integration into Angular, it's use of the very good 'mousetrap' library, and because it allows multiple ways to define hotkeys (through a directive, controller, route config, etc).</p>\n\n<h2>Global Shortcuts</h2>\n\n<p>Currently there is only one global shortcut key defined (<code>h</code>). This will collapse/expand the main menu on any page. More keys can be added as need for them is identified (suggestions welcome!).</p>\n\n<h2>Shortcut Keys</h2>\n\n<p>Because browsers and operating systems have a long list of defined shortcut keys, it can be difficult to find a keybinding that isn't already taken. When choosing a shortcut key for your app, you can avoid most conflicts by simple leaving off the modifier key (e.g. <code>ctrl</code>).</p>\n\n<p>For Encore, the best practice is to use a single letter for your keystroke. For example, the global key to show/hide the rxApp menu is simply <code>h</code>.</p>\n\n<p>If you'll be defining multiple shortcuts related to a specific set of actions, consider a combination of two letters, where the first letter is the same for all keystrokes. For example, an account menu might have the following shortcuts:</p>\n\n<ul>\n<li><code>a</code> <code>n</code> Creates a new account</li>\n<li><code>a</code> <code>v</code> Views the selected account</li>\n<li><code>a</code> <code>d</code> Deletes the selected account</li>\n</ul>\n\n<h2>Identifying shortcut keys</h2>\n\n<p>If you provide a description, the shortcut will be defined in a helper list provided when the user presses the <code>?</code> key. Currently there is no official guidance on a design pattern to identify to end-users what particular shortcuts are outside of the standard help window.</p>",
            "js": "/*jshint unused:false*/\nfunction hotkeysCtrl ($scope, hotkeys) {\n    $scope.volume = 5;\n\n    hotkeys.add({\n        combo: 'ctrl+up',\n        description: 'Turn up the volume!',\n        callback: function () {\n            $scope.volume += 1;\n        }\n    });\n\n    hotkeys.add({\n        combo: 'ctrl+down',\n        description: 'Turn it down!',\n        callback: function () {\n            $scope.volume -= 1;\n        }\n    });\n\n    var showHFSHE = function () {\n        var videoSrc = '//www.youtube.com/embed/Dach1nPbsY8?autoplay=1';\n\n        var iframe = document.createElement('iframe');\n        iframe.src = videoSrc;\n\n        var container = document.getElementById('hfshe');\n        container.appendChild(iframe);\n        container.style.display = 'block';\n    };\n\n    hotkeys.add({\n        combo: 'up+up+down+down+left+right+left+right+a+b',\n        callback: showHFSHE\n    });\n}",
            "html": "<style type=\"text/css\">\n    #hfshe {\n        display: none;\n        position: fixed;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        background: rgba(0, 0, 0, 0.9);\n    }\n    #hfshe iframe {\n        width: 560px;\n        height: 315px;\n        border: 0;\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        margin-top: -158px;\n        margin-left: -280px;\n    }\n</style>\n\n<div ng-controller=\"hotkeysCtrl\">\n    <p>Press `?` to see the shortcut cheat-sheet.</p>\n\n    <p>Current Volume: <span ng-bind=\"volume\"></span></p>\n\n    <div id=\"hfshe\"></div>\n</div>",
            "less": "",
            "midway": "describe('hotkeys', function () {\n    var volume, body;\n\n    before(function () {\n        demoPage.go('#/component/hotkeys');\n        volume = element(by.binding('volume'));\n        body = element(by.css('body'));\n    });\n\n    it('should turn volume up and down using hotkeys', function () {\n        expect(volume.getText()).to.eventually.equal('5');\n\n        // turn it up\n        var ctrlUp = protractor.Key.chord(protractor.Key.CONTROL, protractor.Key.ARROW_UP);\n        body.sendKeys(ctrlUp);\n\n        expect(volume.getText()).to.eventually.equal('6');\n\n        // turn it down\n        var ctrlDown = protractor.Key.chord(protractor.Key.CONTROL, protractor.Key.ARROW_DOWN);\n        body.sendKeys(ctrlDown);\n        body.sendKeys(ctrlDown);\n\n        expect(volume.getText()).to.eventually.equal('4');\n    });\n});\n"
        }
    },
    {
        "name": "metadata",
        "moduleName": "'encore.ui.metadata'",
        "displayName": "Metadata",
        "srcFiles": [],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\" title=\"\" /></a></p>\n\n<p>This component provides styles and a demo for displays of metadata.</p>",
            "js": "",
            "html": "<!-- Sample HTML goes here as a live example of how to the component can be used -->\n<div class=\"metadata\">\n     <dl>\n         <dt>Status:</dt>\n         <dd>Active</dd>\n         <dt>RCN:</dt>\n         <dd>RCN-555-555-555</dd>\n         <dt>Type:</dt>\n         <dd>Cloud</dd>\n         <dt>Service Level:</dt>\n         <dd>Mannaged &rarr; Mannaged</dd>\n         <dt>Service Type:</dt>\n         <dd>DevOps &rarr; SysOps</dd>\n         <dt>Plan Change Status:</dt>\n         <dd>Pending</dd>\n         <dt>Service Team:</dt>\n         <dd><a href=\"#\">Link</a></dd>\n     </dl>\n </div>\n",
            "less": "/*\n * metadata\n */\n.list-definition {\n    font-size: 16px;\n    dt {\n        line-height: 1.6em;\n        float: left;\n        min-width: 9em;\n        font-weight: 700;\n        text-align: right;\n        clear: left;\n    }\n    dd {\n        line-height: 1.6em;\n        float: left;\n        font-weight: 400;\n        text-align: left;\n        margin: 0;\n        padding-left: 1em;\n        clear: right;\n    }\n}\n\n.metadata {\n    &:extend(.list-definition all);\n    overflow: hidden;\n    font-size: 16px;\n    color: #727272;\n    dl {\n        margin: 0;\n        clear: both;\n    }\n    dt {\n        min-width: 10em;\n    }\n}\n",
            "midway": ""
        }
    },
    {
        "name": "rxAccountInfo",
        "moduleName": "'encore.ui.rxAccountInfo'",
        "displayName": "Rx Account Info",
        "srcFiles": [
            "src/rxAccountInfo/rxAccountInfo.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [
            "templates/rxAccountInfo/templates/rxAccountInfo.html"
        ],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/experimental.svg\" alt=\"experimental\" title=\"\" /></a></p>\n\n<p>Functionality for populating an <code>rxInfoPanel</code> with a user's account details.</p>\n\n<p>This component is very specific to internal Rackspace needs, but also lives as a demonstration on how to make\nuse of the <code>rxInfoBox</code>.</p>\n\n<p>This directive requires that <code>SupportAccount</code>, <code>Encore</code>, and <code>Teams</code> services are available. These are not provided by this project,\nbut are available in an internal Rackspace repository.</p>",
            "js": "// Note that these two factories are only present for the purposes of this demo. In a real application,\n// both SupportAccount and Encore will have to be provided from elsewhere, outside of encore-ui\n\nangular.module('encore.ui.rxAccountInfo')\n.value('Badges',\n    [\n        {\n            url: 'http://mirrors.creativecommons.org/presskit/icons/cc.large.png',\n            description: 'Enables the free distribution of an otherwise copyrighted work.',\n            name: 'Creative Commons'\n        }, {\n            url: 'http://mirrors.creativecommons.org/presskit/icons/by.large.png',\n            description: ['You must give appropriate credit, provide a link to the',\n                          'license, and indicate if changes were made.'].join(' '),\n            name: 'Attribution'\n        }, {\n            url: 'http://mirrors.creativecommons.org/presskit/icons/nc.large.png',\n            description: 'You may not use the material for commercial purposes.',\n            name: 'Non-Commercial'\n        }, {\n            url: 'http://mirrors.creativecommons.org/presskit/icons/zero.large.png',\n            description: 'Waives as many rights as legally possible, worldwide.',\n            name: 'Public Domain'\n        }\n    ]\n)\n.value('TeamBadges',\n    [\n        {\n            url: 'http://mirrors.creativecommons.org/presskit/icons/share.large.png',\n            description: ['Licensees may distribute derivative works only under a license',\n                          'identical to the license that governs the original work.'].join(' '),\n            name: 'ShareAlike'\n        }, {\n            url: 'http://mirrors.creativecommons.org/presskit/icons/nd.large.png',\n            description: ['Licensees may copy, distribute, display and perform only verbatim',\n                          'copies of the work, not derivative works based on it.'].join(' '),\n            name: 'No-Derivs'\n        }\n    ]\n)\n.factory('SupportAccount', function ($q, Badges) {\n    return {\n        getBadges: function (config, success, failure) {\n            var deferred = $q.defer();\n\n            if (config.accountNumber === '6789') {\n                deferred.reject();\n            } else {\n                deferred.resolve(Badges);\n            }\n\n            deferred.promise.then(success, failure);\n\n            return deferred.promise;\n        }\n    };\n})\n.factory('Teams', function ($q, TeamBadges) {\n    return {\n        badges: function (config) {\n            var deferred = $q.defer();\n\n            if (config.id === '9876') {\n                deferred.reject();\n            } else {\n                deferred.resolve(TeamBadges);\n            }\n\n            deferred.$promise = deferred.promise;\n\n            return deferred;\n        }\n    };\n})\n.factory('Encore', function ($q) {\n    return {\n        getAccount: function (config, success, failure) {\n            var deferred = $q.defer();\n\n            if (config.id === '9876') {\n                deferred.reject();\n            } else {\n                deferred.resolve({ name: 'Mosso' });\n            }\n\n            deferred.promise.then(success, failure);\n\n            return deferred.promise;\n        }\n    };\n});\n",
            "html": "<!-- Sample HTML goes here as a live example of how to the component can be used -->\n\n<h3>Working Account Info</h3>\n<div class=\"demo-working-account\">\n    <rx-account-info account-number=\"12345\"></rx-account-info>\n</div>\n\n<hr />\n\n<h3>Working Account Info with Team Badges</h3>\n<div class=\"demo-working-teams\">\n    <rx-account-info account-number=\"12345\" team-id=\"123\"></rx-account-info>\n</div>\n\n<hr />\n\n<h3>Account Info with Extra Data</h3>\n<div class=\"demo-working-teams\">\n    <rx-account-info account-number=\"12345\" team-id=\"123\">\n        <div class=\"demo-account-extra\">\n            <div class=\"account-info-label\">Special Instructions</div>\n            <ul>\n                <li>This customer is...difficult...</li>\n                <li>Don't anger them... You wouldn't like it when they're\n                    angry...</li>\n            </ul>\n        </div>\n    </rx-account-info>\n</div>\n\n<hr />\n\n<div>\n    <h3>Can't Load Badges</h3>\n    <rx-notifications stack=\"badgeError\"></rx-notifications>\n    <div class=\"demo-badge-error\">\n        <rx-account-info account-number=\"6789\" notify-stack=\"badgeError\"></rx-account-info>\n    </div>\n</div>\n\n<hr />\n\n<div>\n    <h3>Can't Load Team Badges</h3>\n    <rx-notifications stack=\"teamBadgeError\"></rx-notifications>\n    <div class=\"demo-team-badge-error\">\n        <rx-account-info account-number=\"12345\" team-id=\"9876\" notify-stack=\"teamBadgeError\"></rx-account-info>\n    </div>\n</div>\n\n<hr />\n\n<div>\n    <h3>Can't Load Account Name</h3>\n    <rx-notifications stack=\"nameError\"></rx-notifications>\n    <div class=\"demo-name-error\">\n        <rx-account-info account-number=\"9876\" notify-stack=\"nameError\"></rx-account-info>\n    </div>\n</div>\n",
            "less": "/*\n * rxAccountInfo\n */\n.rx-account-info {\n    .info-panel {\n        overflow: hidden;\n    }\n    .account-info-wrapper {\n        float: left;\n        margin-right: 5em;\n    }\n    .account-info-label {\n        color: #777;\n    }\n    .account-info-data {\n        color: #777;\n        font-size: 26px;\n        img {\n            height: 35px;\n            margin-right: 5px;\n        }\n    }\n\n}\n",
            "midway": "var rxAccountInfoPage = require('../rxAccountInfo.page.js').rxAccountInfo;\nvar notifications = require('../../rxNotify/rxNotify.page.js').rxNotify;\nvar expect = require('chai').use(require('chai-as-promised')).expect;\n\ndescribe('rxAccountInfo', function () {\n    var rxAccountInfo;\n\n    before(function () {\n        demoPage.go('#/component/rxAccountInfo');\n        rxAccountInfo = rxAccountInfoPage.initialize($('.demo-working-account rx-account-info'));\n    });\n\n    it('should show element', function () {\n        expect(rxAccountInfo.isDisplayed()).to.eventually.be.true;\n    });\n\n    it('should show the account name', function () {\n        expect(rxAccountInfo.name).to.eventually.equal('Mosso');\n    });\n\n    it('should show the account number', function () {\n        expect(rxAccountInfo.number).to.eventually.equal('12345');\n    });\n\n    describe('badges', function () {\n        var badgesArray;\n        before(function () {\n            rxAccountInfo.badges.all.then(function (badges) {\n                badgesArray = badges;\n            });\n        });\n\n        it('should have four badges on the first Account Info box', function () {\n            expect(rxAccountInfo.badge.count()).to.eventually.equal(4);\n        });\n\n        it('should have the correct first badge src via byIndex', function () {\n            var src = 'http://mirrors.creativecommons.org/presskit/icons/cc.large.png';\n            expect(rxAccountInfo.badge.byIndex(0).src).to.eventually.equal(src);\n        });\n\n        it('should have the correct first badge src via badges.all', function () {\n            var src = 'http://mirrors.creativecommons.org/presskit/icons/cc.large.png';\n            expect(badgesArray[0].src).to.eventually.equal(src);\n        });\n\n        it('should have the right name on the last badge', function () {\n            expect(rxAccountInfo.badge.byIndex(-1).name).to.eventually.equal('Public Domain');\n        });\n\n        it('should have the right description on the last badge', function () {\n            var description = 'Waives as many rights as legally possible, worldwide.';\n            expect(rxAccountInfo.badge.byIndex(-1).description).to.eventually.equal(description);\n        });\n\n        describe('searching', function () {\n\n            it('should search for just one badge by string for an exact match', function () {\n                expect(rxAccountInfo.badge.byName('Attribution').name).to.eventually.equal('Attribution');\n            });\n\n            it('should report that a badge exists', function () {\n                expect(rxAccountInfo.badge.exists('Non-Commercial')).to.eventually.be.true;\n            });\n\n            it('should report that a badge does not exist', function () {\n                expect(rxAccountInfo.badge.exists('Caveat Emptor')).to.eventually.be.false;\n            });\n\n            it('should search for many badges with a regular expression', function () {\n                rxAccountInfo.badges.matchingName(/\\w\\s\\w/).then(function (twoWordBadges) {\n                    expect(twoWordBadges[0].name).to.eventually.equal('Creative Commons');\n                    expect(twoWordBadges[1].name).to.eventually.equal('Public Domain');\n                });\n            });\n\n        });\n\n    });\n\n    describe('error messages', function () {\n        var badgeError, nameError;\n\n        before(function () {\n            notifications.byStack('badgeError').byType('error').then(function (errorMessages) {\n                badgeError = errorMessages[0];\n            });\n\n            notifications.byStack('nameError').byType('error').then(function (errorMessages) {\n                nameError = errorMessages[0];\n            });\n        });\n\n        it('should show an error notification when it cannot load badges', function () {\n            expect(badgeError.text).to.eventually.equal('Error retrieving badges for this account');\n        });\n\n        it('should show an error notification when it cannot load account name', function () {\n            expect(nameError.text).to.eventually.equal('Error retrieving account name');\n        });\n    });\n\n});\n"
        }
    },
    {
        "name": "rxActionMenu",
        "moduleName": "'encore.ui.rxActionMenu'",
        "displayName": "Rx Action Menu",
        "srcFiles": [
            "src/rxActionMenu/rxActionMenu.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [
            "templates/rxActionMenu/templates/rxActionMenu.html"
        ],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/stable.svg\" alt=\"stable\" title=\"\" /></a></p>\n\n<p>Directive to add a clickable cog which brings up a menu of configurable actions. </p>\n\n<p>Normally the menu is dismissable by clicking anywhere on the page, but this can be disabled by \npassing an optional <code>global-dismiss=\"false\"</code> attribute to the directive.</p>",
            "js": "/*jshint unused:false*/\nfunction rxActionMenuCtrl ($scope, rxNotify) {\n\n    $scope.add = function () {\n        rxNotify.add('Added!', {\n            type: 'success',\n            repeat: false,\n            timeout: 3\n        });\n    };\n\n    $scope.remove = function () {\n        rxNotify.add('Deleted!', {\n            type: 'error',\n            repeat: false,\n            timeout: 3\n        });\n    };\n\n}\n",
            "html": "<div>\n    <p>The cog in the first row is dismissable by clicking anywhere, but the second cog can only be dismissed\n    by clicking on the cog itself.\n    </p>\n\n    <h3 class=\"title\">Typical Usage</h3>\n    <table>\n        <thead>\n            <tr>\n                <th>\n                    Name\n                </th>\n                <th>\n                </th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>Globally dismissible</td>\n                <td>\n                    <rx-action-menu id=\"globalDismissal\">\n                        <ul class=\"actions-area\">\n                            <li>\n                                <rx-modal-action\n                                    template-url=\"addActionTemplate.html\"\n                                    classes=\"msg-action\">\n                                    <i class=\"fa fa-plus fa-lg\"></i> Add\n                                </rx-modal-action>\n                            </li>\n                            <li>\n                                <rx-modal-action\n                                    template-url=\"deleteActionTemplate.html\"\n                                    classes=\"msg-warn\">\n                                    <i class=\"fa fa-times fa-lg\"></i> Delete\n                                </rx-modal-action>\n                            </li>\n                        </ul>\n                    </rx-action-menu>\n                </td>\n            </tr>\n            <tr>\n                <td>Only dismissible by clicking on cog</td>\n                <td>\n                    <rx-action-menu global-dismiss=\"false\">\n                        <ul class=\"actions-area\">\n                            <li>\n                                <rx-modal-action\n                                    template-url=\"addActionTemplate.html\"\n                                    classes=\"msg-action\">\n                                    <i class=\"fa fa-plus fa-lg\"></i> Add\n                                </rx-modal-action>\n                            </li>\n                            <li>\n                                <rx-modal-action\n                                    template-url=\"deleteActionTemplate.html\"\n                                    classes=\"msg-warn\">\n                                    <i class=\"fa fa-times fa-lg\"></i> Delete\n                                </rx-modal-action>\n                            </li>\n                        </ul>\n                    </rx-action-menu>\n                </td>\n            </tr>\n                <td>Unorthodox Behaviors (no modals, hidden item)</td>\n                <td ng-controller=\"rxActionMenuCtrl\">\n                    <rx-action-menu id=\"custom\">\n                        <ul class=\"actions-area\">\n                            <li>\n                              <button class=\"btn-link trigger\" ng-click=\"add()\">\n                                  <span class=\"msg-action\"><i class=\"fa fa-plus fa-lg\"></i> Add</span>\n                              </button>\n                            </li>\n                            <li>\n                              <button class=\"btn-link trigger\" ng-click=\"remove()\">\n                                  <span class=\"msg-warn\"><i class=\"fa fa-times fa-lg\"></i> Delete</span>\n                              </button>\n                            </li>\n                            <li ng-show=\"false\">\n                              <button class=\"btn-link trigger\">\n                                  <span class=\"msg-warn\"><i class=\"fa fa-times fa-lg\"></i> Visually Hidden</span>\n                              </button>\n                            </li>\n                        </ul>\n                    </rx-action-menu>\n                </td>\n        </tbody>\n    </table>\n\n    <script type=\"text/ng-template\" id=\"deleteActionTemplate.html\">\n        <rx-modal-form title=\"Delete Action\" submit-text=\"Delete\">\n            <span>Do you want to delete something?</span>\n        </rx-modal-form>\n    </script>\n    <script type=\"text/ng-template\" id=\"addActionTemplate.html\">\n        <rx-modal-form title=\"Add Action\" submit-text=\"Add\">\n            <span>Do you want to add something?</span>\n        </rx-modal-form>\n    </script>\n</div>\n",
            "less": "@import 'vars';\n\n// containers for actionmenus that spawn modals\n.action-menu-container {\n    position: relative;\n    width: 5px;\n    & > i {\n        cursor: pointer;\n        color: @subduedText;\n        &:hover {\n            color: @subduedTextHover;\n        }\n    }\n}\n\n.actions-area {\n    font-size: 115%;\n    line-height: 2em;\n}\n\n.action-list-hideable {\n    float: left;\n    z-index: 99;\n    position: absolute;\n    top: -10px;\n    right: 15px;\n    min-width: 20em;\n    font-size: .9em;\n    border: 4px solid @white;\n    border-radius: 4px;\n    background: @white;\n    text-shadow: rgba(0, 0, 0, 0.09) 1px 1px 1px;\n    box-shadow: rgba(0, 0, 0, 0.35) 1px 1px 4px 0px;\n    padding: 6px;\n\n    &:before {\n        content:  \"\\f0da\";\n        text-shadow: rgba(0, 0, 0, 0.35) 1px 1px 1px;\n        font-family: FontAwesome;\n        text-decoration: inherit;\n        color: @white;\n        font-size: 24px;\n        display: block;\n        left: 249px;\n        position: absolute;\n        top: 0;\n        width: 0;\n        z-index: 1;\n    }\n\n    i {\n        margin-right: 5px;\n    }\n}\n\n.action-list {\n    float: right;\n}\n",
            "midway": "var Page = require('astrolabe').Page;\n\nvar actionMenu = require('../rxActionMenu.page').rxActionMenu;\nvar notifications = require('../../rxNotify/rxNotify.page').rxNotify;\n\ndescribe('rxActionMenu', function () {\n    var globalDismiss, localDismiss, customActions;\n    var customActionMenuItem = function (actionElement) {\n        return Page.create({\n\n            triggerNotification: {\n                value: function () {\n                    actionElement.$('.trigger').click();\n                }\n            }\n\n        });\n    };\n\n    var clickSomewhereElse = function () {\n        $('.component-demo .title').click();\n    };\n\n    before(function () {\n        demoPage.go('#/component/rxActionMenu');\n        globalDismiss = actionMenu.initialize($('rx-action-menu#globalDismissal'));\n        localDismiss = actionMenu.initialize($('rx-action-menu[global-dismiss=\"false\"]'));\n        customActions = actionMenu.initialize($('rx-action-menu#custom'), customActionMenuItem);\n    });\n\n    it('should be collapsed by default', function () {\n        expect(globalDismiss.isExpanded()).to.eventually.be.false;\n    });\n\n    it('should expand', function () {\n        globalDismiss.expand();\n        expect(globalDismiss.isExpanded()).to.eventually.be.true;\n    });\n\n    it('should also collapse', function () {\n        globalDismiss.collapse();\n        expect(globalDismiss.isExpanded()).to.eventually.be.false;\n    });\n\n    it('should support global dismiss', function () {\n        globalDismiss.expand();\n        clickSomewhereElse();\n        expect(globalDismiss.isExpanded()).to.eventually.be.false;\n    });\n\n    it('should not globally dismiss if unsupported', function () {\n        localDismiss.expand();\n        clickSomewhereElse();\n        expect(localDismiss.isExpanded()).to.eventually.be.true;\n    });\n\n    it('should only dismiss exactly if supported', function () {\n        localDismiss.collapse();\n        expect(localDismiss.isExpanded()).to.eventually.be.false;\n    });\n\n    it('should find an action that is present and displayed', function () {\n        expect(localDismiss.hasAction('Delete')).to.eventually.be.true;\n    });\n\n    it('should not find an action that is present but not displayed', function () {\n        expect(customActions.hasAction('Visually Hidden')).to.eventually.be.false;\n    });\n\n    it('should not find an action that is neither present nor displayed', function () {\n        expect(localDismiss.hasAction('Non-Existent')).to.eventually.be.false;\n    });\n\n    describe('default action menu items', function () {\n        var actionItem;\n\n        before(function () {\n            actionItem = globalDismiss.action('Add');\n        });\n\n        it('should have two items', function () {\n            expect(globalDismiss.actionCount()).to.eventually.equal(2);\n        });\n\n        it('should have a root element', function () {\n            expect(actionItem.rootElement).to.exist;\n        });\n\n        it('should have text', function () {\n            expect(actionItem.text).to.eventually.equal('Add');\n        });\n\n        it('should include custom functionality for a modal', function () {\n            var modal = actionItem.openModal({});\n            expect(modal.title).to.eventually.equal('Add Action');\n            modal.cancel();\n        });\n\n    });\n\n    describe('custom action menu items', function () {\n        var actionItem;\n\n        before(function () {\n            actionItem = customActions.action('Delete');\n        });\n\n        it('should not have any text', function () {\n            expect(actionItem.text).to.not.exist;\n        });\n\n        it('should not have a root element', function () {\n            expect(actionItem.rootElement).to.not.exist;\n        });\n\n        it('should offer custom functionality', function () {\n            actionItem.triggerNotification();\n            expect(notifications.all.count()).to.eventually.equal(1);\n        });\n\n    });\n\n});\n"
        }
    },
    {
        "name": "rxActiveUrl",
        "moduleName": "'encore.ui.rxActiveUrl'",
        "displayName": "Rx Active Url",
        "srcFiles": [
            "src/rxActiveUrl/rxActiveUrl.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [
            "templates/rxActiveUrl/templates/rxActiveUrl.html"
        ],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/hughsk/stability-badges\"><img src=\"http://hughsk.github.io/stability-badges/dist/deprecated.svg\" alt=\"deprecated\" title=\"\" /></a></p>\n\n<p>Adds a class name of 'selected' to an LI if the current url matches a pre-defined value</p>\n\n<p><strong>THIS COMPONENT IS MARKED TO BE REMOVED IN A FUTURE RELEASE.</strong></p>",
            "js": "",
            "html": "<ul>\n    <rx-active-url url=\"/servers\">\n        <a href=\"/servers\">Servers</a>\n    </rx-active-url>\n    <rx-active-url url=\"/cbs\">\n        <a href=\"/cbs\">Storage</a>\n        <ul>\n            <rx-active-url url=\"/cbs/volumes\">\n                <a href=\"/cbs/volumes/\">Volumes</a>\n            </rx-active-url>\n            <rx-active-url url=\"/cbs/snapshots\">\n                <a href=\"/cbs/snapshots/\">Snapshots</a>\n            </rx-active-url>\n        </ul>\n    </rx-active-url>\n</ul>",
            "less": "",
            "midway": "// Midway tests for the example/demo component page go here\n"
        }
    },
    {
        "name": "rxAge",
        "moduleName": "'encore.ui.rxAge'",
        "displayName": "Rx Age",
        "srcFiles": [
            "src/rxAge/rxAge.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/stable.svg\" alt=\"stable\" title=\"\" /></a></p>\n\n<p>Filter to parse an age based on a date in the past.</p>\n\n<p><strong>Note: This component requires <a href=\"http://momentjs.com/\">moment.js</a> be loaded.</strong></p>\n\n<p>This function has several different ways you can use it:</p>\n\n<ol>\n<li>You can just have it use the default abbreviated method and it truncates it\nto the two largest units.</li>\n<li>You can also pass in a second value of <code>true</code> and have it expand the units\nfrom the first letter to their full word representation.</li>\n<li>Or you can pass in a number from <code>1</code> to <code>3</code> as the second value to allow for\ndifferent amounts of units.</li>\n<li><strong>OR</strong> you can pass in a number as the second argument and <code>true</code> as the\nthird argument to combine these two effects.</li>\n</ol>",
            "js": "/*jshint unused:false*/\n\n// This file is used to help build the 'demo' documentation page and should be updated with example code\nfunction rxAgeCtrl ($scope) {\n    var day = 1000 * 60 * 60 * 24;\n    $scope.ageHours = new Date((Date.now() - (day / 2.3))).toString();\n    $scope.ageDays = new Date((Date.now() - (day * 1.5))).toString();\n    $scope.ageMonths = new Date((Date.now() - (day * 40.2))).toString();\n    $scope.ageYears = new Date((Date.now() - (day * 380.1))).toString();\n}\n",
            "html": "<div ng-controller=\"rxAgeCtrl\">\n    <ul>\n        <li>{{ageHours}} &rarr; {{ageHours | rxAge}}</li>\n        <li>{{ageDays}} &rarr; {{ageDays | rxAge}}</li>\n        <li>{{ageMonths}} &rarr; {{ageMonths | rxAge}}</li>\n        <li>{{ageYears}} &rarr; {{ageYears | rxAge}}</li>\n        <li>{{ageHours}} &rarr; {{ageHours | rxAge:true}}</li>\n        <li>{{ageDays}} &rarr; {{ageDays | rxAge:true}}</li>\n        <li>{{ageMonths}} &rarr; {{ageMonths | rxAge:true}}</li>\n        <li>{{ageYears}} &rarr; {{ageYears | rxAge:true}}</li>\n        <li>{{ageHours}} &rarr; {{ageHours | rxAge:1:true}}</li>\n        <li>{{ageDays}} &rarr; {{ageDays | rxAge:2:true}}</li>\n        <li>{{ageMonths}} &rarr; {{ageMonths | rxAge:3:true}}</li>\n        <li>{{ageYears}} &rarr; {{ageYears | rxAge:3}}</li>\n    </ul>\n</div>\n",
            "less": "",
            "midway": "var _ = require('lodash');\nvar moment = require('moment');\n\nvar age = require('../rxAge.page.js').rxAge;\n\ndescribe('rxAge', function () {\n    var momentsTable, isoString;\n    var oneHour = 1000 * 60 * 60;\n    var ageStrings = [\n        '10h 26m',\n        '1d 12h',\n        '40d 4h',\n        '380d 2h',\n        '10 hours, 26 minutes',\n        '1 day, 12 hours',\n        '40 days, 4 hours',\n        '380 days, 2 hours',\n        '10 hours',\n        '1 day, 12 hours',\n        '40 days, 4 hours, 48 minutes',\n        '380d 2h 24m'\n    ];\n\n    before(function () {\n        demoPage.go('#/component/rxAge');\n        momentsTable = $$('.component-demo ul li');\n    });\n\n    _.forEach(ageStrings, function (testData, index) {\n        it('should still have ' + testData + ' as test data on the page', function () {\n            momentsTable.get(index).getText().then(function (text) {\n                var onPage = text.split('→')[1].trim();\n                expect(onPage).to.equal(testData);\n            });\n        });\n\n        it('should convert ' + testData + ' accurate within the hour', function () {\n            momentsTable.get(index).getText().then(function (text) {\n                isoString = new Date(text.split('→')[0].trim());\n                expect(age.toMoment(testData).valueOf()).to.be.closeTo(moment(isoString).valueOf(), oneHour);\n            });\n        });\n    });\n});\n"
        }
    },
    {
        "name": "rxApp",
        "moduleName": "'encore.ui.rxApp'",
        "displayName": "Rx App",
        "srcFiles": [
            "src/rxApp/rxApp.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [
            "templates/rxApp/templates/rxAccountSearch.html",
            "templates/rxApp/templates/rxAccountUsers.html",
            "templates/rxApp/templates/rxApp.html",
            "templates/rxApp/templates/rxAppNav.html",
            "templates/rxApp/templates/rxAppNavItem.html",
            "templates/rxApp/templates/rxAppSearch.html",
            "templates/rxApp/templates/rxPage.html"
        ],
        "dependencies": [
            "rxAppRoutes",
            "rxEnvironment"
        ],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\" title=\"\" /></a></p>\n\n<h1>Description</h1>\n\n<p>This component is responsible for creating the HTML necessary for a common Encore layout. It builds out the main navigation, plus breadcrumbs and page titles.</p>\n\n<h1>Usage</h1>\n\n<p>For apps that want to use the default Encore navigation, usage is pretty simple. In your index.html file, add the <code>rx-app</code> directive inside your app:</p>\n\n<pre><code>&lt;body ng-app=\"myApp\"&gt;\n    &lt;rx-app&gt;\n        &lt;ng-view&gt;&lt;/ng-view&gt;\n    &lt;/rx-app&gt;\n&lt;/body&gt;\n</code></pre>\n\n<p>By including <code>ng-view</code>, your view content will be added inside the directive. This makes setting up views for each page much simpler, since you don't have to include <code>rx-app</code> in each view.</p>\n\n<p>Inside your view, you'll likely want to use <code>rx-page</code> to wrap your content. See the <code>rx-page</code> docs for more information on this.</p>\n\n<h1>rxApp Navigation</h1>\n\n<p>Left-hand navigation is included as part of the app template. There are many options to control the navigation from an app level, as outlined with the following.</p>\n\n<p>Note: With the current set up, some app-specific menu items are defined in Encore-UI. While it's preferred to keep app-specific details outside of Encore-UI, because some top-level navigation is accessible from any app, it's important to store that information in a common location inside Encore-UI.</p>\n\n<h2>Accessing route information</h2>\n\n<p>Sometimes it's helpful to have the current route information available for menu items. For example, re-using the current params for path building.</p>\n\n<p>To help with this, $route is exposed on the scope of all menu items. <a href=\"http://devdocs.io/angular/ngroute.$route\"><code>$route</code> provides many details on the current view</a>, including the ability to access the current controller and scope for the view.</p>\n\n<p>To see this in action, check out the 'childVisibility' property for Account-level Tool in <code>encoreNav</code>.</p>\n\n<h2>Accessing properties on $rootScope</h2>\n\n<p>If you have a property available on the <code>$rootScope</code> of your app that the menu data needs to access, <a href=\"http://stackoverflow.com/questions/22216441/what-is-the-difference-between-scope-root-and-rootscope-angular-js\">you can reference <code>$rootScope</code> via <code>$root</code></a>. See the demo for an example of this.</p>\n\n<h2>Dynamically updating the menu</h2>\n\n<p>By default, rxApp will create the navigation menu based on the routes defined in the 'encoreNav' value. This menu is built using the rxAppRoutes service.</p>\n\n<p>To update a route, use the <code>setRouteByKey</code> function on the rxAppRoutes service:</p>\n\n<pre><code>rxAppRoutes.setRouteByKey('myKey', {\n    linkText: 'myUpdatedRoute'\n})\n</code></pre>\n\n<p>You would normally either set this in your app's <code>.run</code> function, or in a specific controller.</p>\n\n<h2>Custom Menus</h2>\n\n<p>If you'd like to create an entirely custom menu, you can pass that data in to the <code>rx-app</code> directive via the <code>menu</code> attribute. View the demo for an example of this.</p>\n\n<h1>Sub-directives</h1>\n\n<h2>rx-page</h2>\n\n<p>You'll likely want to use <code>rx-page</code> inside your template view. For example, inside a 'myView.html' file:</p>\n\n<pre><code>&lt;rx-page title=\"'Example Page'\"&gt;\n    Here is my content\n&lt;/rx-page&gt;\n</code></pre>\n\n<p><code>rx-page</code> is used to create a common wrapper for specific page views. It automatically adds the breadcrumbs and page title/subtitle (if specified), along with the correct styling.</p>\n\n<p>Both the <code>title</code> and <code>subtitle</code> attributes accept an Angular expression, which can be a string (shown in the previous example) or a scope property. This string/property can accept other expressions, enabling you to build custom titles. The demo has an example of this usage.</p>\n\n<h3>.page-actions</h3>\n\n<p>A <code>page-actions</code> class is provided by rx-app to easily add custom page actions to the top right of a page. For example:</p>\n\n<pre><code>&lt;rx-page title=\"'Servers Overview'\"&gt;\n    &lt;div class=\"page-actions\"&gt;\n        &lt;a href=\"/create\" class=\"link-action msg-action\"&gt;Create New Server&lt;/a&gt;\n    &lt;/div&gt;\n    &lt;img src=\"http://cdn.memegenerator.net/instances/500x/48669250.jpg\" alt=\"Look at all these servers there are so many\"\n&lt;/rx-page&gt;\n</code></pre>\n\n<h2>rx-app-nav and rx-app-nav-item</h2>\n\n<p>These two directives are responsible for creating the menu in the left sidebar. They're not intended for use outside of the rx-app template code.</p>\n\n<h1>Common Styling</h1>\n\n<p>The rxApp common.less file defines many base CSS rules and classes for app use. Included in this is <a href=\"http://necolas.github.io/normalize.css/\">normalize.css</a>. This helps create a consistent starting point for styles across all browsers.</p>\n\n<h2>Fonts</h2>\n\n<p>The Encore-UI default font is Roboto. This is used for all text on the page and is loaded via Google Fonts. Be sure your app includes the following line:</p>\n\n<p><code>\n&lt;link href=\"https://fonts.googleapis.com/css?family=Roboto:400,100,100italic,300,300italic,400italic,700,700italic\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n</code></p>",
            "js": "/*jshint unused:false*/\nfunction rxAppCtrl ($scope, $location, $rootScope, $window, encoreRoutes, rxVisibility) {\n    $scope.subtitle = 'With a subtitle';\n\n    $scope.changeSubtitle = function () {\n        $scope.subtitle = 'With a new subtitle at ' + Date.now();\n    };\n\n    rxVisibility.addMethod(\n        'isUserDefined',\n        function (scope, locals) {\n            return !_.isEmpty($rootScope.user);\n        }\n    );\n\n    $scope.changeRoutes = function () {\n        var newRoute = {\n            linkText: 'Updated Route',\n            childVisibility: 'true',\n            children: [\n                {\n                    linkText: 'New child route'\n                }\n            ]\n        };\n\n        encoreRoutes.setRouteByKey('accountLvlTools', newRoute);\n    };\n\n    // Fake navigation\n    var customApp = document.getElementById('custom-rxApp');\n    customApp.addEventListener('click', function (ev) {\n        var target = ev.target;\n\n        if (target.className.indexOf('item-link') > -1) {\n            // prevent the default jump to top\n            ev.preventDefault();\n\n            var href = target.getAttribute('href');\n\n            // update angular location (if href has a value)\n            if (!_.isEmpty(href)) {\n                // we need to prevent the window from scrolling (the demo does this)\n                // so we get the current scrollTop position\n                // and set it after the demo page has run '$routeChangeSuccess'\n                var currentScollTop = document.body.scrollTop;\n\n                $location.hash(href);\n\n                $rootScope.$apply();\n\n                $window.scrollTo(0, currentScollTop);\n            }\n        }\n    });\n\n    var searchDirective = 'rx-app-search placeholder=\"Enter User\" model=\"$root.user\" pattern=\"/^([0-9a-zA-Z._ -]{2,})$/\"';\n\n    $scope.customMenu = [{\n        title: 'Example Menu',\n        children: [\n            {\n                href: 'Lvl1-1',\n                linkText: '1st Order Item'\n            },\n            {\n                linkText: '1st Order Item (w/o href) w/ Children',\n                childVisibility: [ 'isUserDefined' ],\n                childHeader: '<strong class=\"current-search\">Current User:</strong>' +\n                             '<span class=\"current-result\">{{$root.user}}</span>',\n                directive: searchDirective,\n                children: [\n                    {\n                        href: 'Lvl1-2-Lvl2-1',\n                        linkText: '2nd Order Item w/ Children',\n                        children: [{\n                            href: 'Lvl1-2-Lvl2-1-Lvl3-1',\n                            linkText: '3rd Order Item'\n                        }]\n                    },\n                    {\n                        href: 'Lvl1-2-Lvl2-2',\n                        linkText: '2nd Order Item w/ Children',\n                        children: [\n                            {\n                                href: 'Lvl1-2-Lvl2-2-Lvl3-1',\n                                linkText: '3rd Order Item'\n                            },\n                            {\n                                href: 'Lvl1-2-Lvl2-2-Lvl3-2',\n                                linkText: '3rd Order Item'\n                            },\n                            {\n                                href: 'Lvl1-2-Lvl2-2-Lvl3-3',\n                                linkText: '3rd Order Item'\n                            },\n                            {\n                                href: 'Lvl1-2-Lvl2-2-Lvl3-4',\n                                linkText: '3rd Order Item'\n                            }\n                        ]\n                    },\n                    {\n                        href: 'Lvl1-2-Lvl2-3',\n                        linkText: '2nd Order Item'\n                    }\n                ]\n            },\n            {\n                href: 'Lvl1-3',\n                linkText: '1st Order Item w/ Children',\n                children: [\n                    {\n                        href: 'Lvl1-3-Lvl2-1',\n                        linkText: '2nd Order Item'\n                    }\n                ]\n            }\n        ]\n    }];\n}\n",
            "html": "<div ng-controller=\"rxAppCtrl\">\n    <h1 class=\"title\">Standard rxApp</h1>\n    <rx-app id=\"standard-rxApp\">\n        <rx-page title=\"'Standard Page Title'\">\n            <p class=\"clear\">This is my page content</p>\n            <button ng-click=\"changeRoutes()\" class=\"button\">Change Routes</button>\n        </rx-page>\n    </rx-app>\n\n    <h1 class=\"title\">Customized rxApp (collapsible)</h1>\n    <rx-app collapsible-nav=\"true\" site-title=\"My App\" id=\"custom-rxApp\" menu=\"customMenu\" new-instance=\"true\" hide-feedback=\"true\">\n        <rx-page title=\"'Customized Page Title'\" subtitle=\"subtitle\">\n            <p class=\"clear\">Click a link in the menu to see the active state change</p>\n            <p>Click the toggle to hide the menu</p>\n            <button ng-click=\"changeSubtitle()\" class=\"changeSubtitle button\">Change Subtitle</button>\n        </rx-page>\n    </rx-app>\n</div>\n\n<!--\nYou'll likely want to implement your HTML in your index.html file as:\n<div ng-app=\"sampleApp\">\n    <rx-app ng-view></rx-app>\n</div>\n\nAnd the template for each view/page will be something like:\n<rx-page title=\"'Example Page'\">\n    Example content\n</rx-page>\n-->\n",
            "less": "@import (less) 'demo/bower_components/font-awesome/less/font-awesome.less';\n@fa-font-path: 'font';\n@import 'vars';\n@import (inline) 'normalize.css';\n\n/*\n# Resets for HTML elements\n*/\nhtml, body {\n    height: 100%;\n    font-size: @appFontSize;\n    color: @appTextColor;\n    font-family: @appFont;\n}\n\n// Set default font\nbutton, input, select,\n.pure-g [class *= \"pure-u\"],\n.pure-g-r [class *= \"pure-u\"] {\n    font-family: @appFont;\n}\n\n// Remove default margin/padding/etc\nheader, nav,\nol, ul, li,\nh1, h2, h3, h4, h5, h6,\nfieldset {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    font: inherit;\n    font-size: 100%;\n    vertical-align: baseline;\n}\n\n// No list styles for lists\nol, ul, li {\n    list-style: none;\n}\n\n// We want a little bit more line-spacing in paragraphs\np {\n    line-height: @appLineHeight;\n}\n\n/*\n# Link Styles\n\n```\n<a href=\"#\">My Link</a>\n<a href=\"#\" class=\":visited\">Visited Link</a>\n<a href=\"#\" class=\":hover\">Hovered Link</a>\n<a href=\"#\" class=\":focus\">Focused Link</a>\n<a href=\"#\" class=\":active\">Active Link</a>\n```\n*/\na {\n    text-decoration: none;\n    color: @linkColor;\n}\na:hover,\na:focus {\n    text-decoration: underline;\n    color: @linkColorHover;\n}\n\n/*\n# Table Styles\n\n```\n<table class=\"table-striped\">\n    <thead>\n        <tr>\n            <th>Name</th>\n            <th>Occupation</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Patrick Deuley</td>\n            <td>Design Chaplain</td>\n        </tr>\n        <tr>\n            <td>Hussam Dawood</td>\n            <td>Evangelist of Roger Enriquez</td>\n        </tr>\n    </tbody>\n</table>\n```\n*/\ntable {\n    clear: both;\n    width: 100%;\n    padding: 0;\n    margin: 0;\n    border-collapse: collapse;\n    td,\n    th {\n        border: 1px solid @tableBorder;\n        padding: @tableCellPadding;\n        color: @tableCellText;\n    }\n    thead th {\n        text-align: left;\n        background: @tableHeaderBg;\n        color: @tableHeaderText;\n        border: 1px solid @tableHeaderBorder;\n    }\n\n    &.table-striped tr:nth-child(even) {\n        background: @tableBgAlt;\n    }\n}\n\n/*\n\n# Heading/Title Styles\n\nHeadings are sized using 'xl', 'lg', 'sm' and 'xs'\n\nThe size of the heading is not impacted by the heading level used (e.g. `<h1>`, `<h2>`).\nThis is done to ensure that the heading levels are sequential.\n\nSee https://github.com/rackerlabs/encore-ui/blob/master/guides/css-styleguide.md#basic-rules for further reasoning\n\n```\n<h1 class=\"xl title\">Huge Header</h1>\n\n<h1 class=\"lg title\">Large Header</h1>\n<h2 class=\"lg title subdued\">Large Gray Header</h2>\n\n<h1 class=\"title\">Regular Header</h1>\n\n<h2 class=\"sm title\">Small Header</h2>\n<h3 class=\"sm title subdued\">Small Gray Header</h3>\n\n<div class=\"xs title\">Tiny Header</div>\n```\n */\n.title {\n    font-size: 18px;\n    margin: 1em 0;\n\n    & + & {\n        // remove the top margin if two titles are placed right next to each other\n        margin-top: 0;\n    }\n\n    // Sizing\n    &.xl {\n        font-size: 28px;\n    }\n\n    &.lg {\n        font-size: 22px;\n    }\n\n    &.sm {\n        font-size: 16px;\n    }\n\n    &.xs {\n        font-size: 13px;\n    }\n\n    // Colors\n    &.subdued {\n        color: @subduedTitle;\n    }\n}\n\n/*\n\n# Statuses\n\nStyles text to provide a clearer status regarding a simple message.\n\n```\n<h1 class=\"title\">Action Links (Horizontal)</h1>\n<p>\n    <a href=\"#\" class=\"msg-action link-action\">Create</a>\n    <span class=\"action-separator\">\\</span>\n    <a href=\"#\" class=\"msg-warn link-warn\">Delete</a>\n</p>\n\n<h1 class=\"title\">Messages</h1>\n<p class=\"msg-action\">Something was created</p>\n<p class=\"msg-warn\">Something was deleted</p>\n<p class=\"msg-info\">Informational Message</p>\n<p class=\"msg-info-blue\">Blue Informational Message</p>\n```\n*/\n.link-action,\n.link-action a,\n.link-warn,\n.link-warn a {\n    font-size: 1.2em;\n    cursor: pointer;\n}\n\n.link-action:before,\n.link-action a:before {\n    content: '+ ';\n}\n\n.link-warn:before,\n.link-warn a:before {\n    content: '- ';\n}\n\n.action-separator {\n    font-size: 1.1em;\n    color: @subduedText;\n}\n\n.msg-action,\n.msg-action a {\n    color: @actionGreen;\n    &:hover,\n    &:focus {\n        color: @actionGreen;\n    }\n}\n\n.msg-warn,\n.msg-warn a {\n    color: @warnRed;\n    &:hover,\n    &:focus {\n        color: @warnRedHover;\n    }\n}\n\n.msg-info,\n.msg-info a {\n    color: @infoOrange;\n    &:hover,\n    &:focus {\n        color: @infoOrangeHover;\n    }\n}\n\n.msg-info-blue,\n.msg-info-blue a {\n    color: @infoBlue;\n    &:hover,\n    &:focus {\n        color: @infoBlueHover;\n    }\n}\n\n/*\n# Lists\n\nAdd bullets/decimals to lists with the 'list' class\n\n### Decimals\n```\n<ol class=\"list\">\n    <li>Item 1</li>\n    <li>Item 2</li>\n    <li>Item 3</li>\n</ol>\n```\n\n### Bullets\n```\n<ul class=\"list\">\n    <li>Item 1</li>\n    <li>Item 2</li>\n    <li>Item 3</li>\n</ul>\n```\n\n### Non-semantic lists\n```\n<div class=\"list bulleted\">\n    <p class=\"item\">Item 1</p>\n    <p class=\"item\">Item 2</p>\n    <p class=\"item\">Item 3</p>\n</div>\n\n<div class=\"list decimal\">\n    <p class=\"item\">Item 1</p>\n    <p class=\"item\">Item 2</p>\n    <p class=\"item\">Item 3</p>\n</div>\n```\n */\n.list {\n    li,\n    .item {\n        display: list-item;\n        margin: 5px 0 0 30px;\n    }\n\n    ul&,\n    &.bulleted {\n        li,\n        .item {\n            list-style: disc;\n        }\n    }\n\n    ol&,\n    &.decimal {\n        li,\n        .item {\n            list-style: decimal;\n        }\n    }\n}\n\n/*\n# Wells\n\nCreates a 'well' effect (box with light gray background)\n```\n<div class=\"well\">\n    <p>Well, here you go.</p>\n</div>\n```\n*/\n.well {\n    background: #eee;\n    padding: 40px 50px;\n\n    p {\n        line-height: 1.5em;\n        color: @wellText;\n    }\n}\n\n// # Other Stuff\n\n/*\n## Subdued Text\nBasic color change to make text less prominant\n\n```\n<h1>My Items <span class=\"subdued\">(10)</span></h1>\n<h1><a href=\"#\">My Items <span class=\"subdued\">(10)</span></a></h1>\n```\n */\n.subdued {\n    color: @subduedText;\n}\n\n// Add hover style if a link or inside a link\na.subdued:hover,\na.subdued:focus,\na:hover .subdued,\na:focus .subdued {\n    color: @subduedTextHover;\n}\n\n/*\n## Hidden content\n\n### .hidden\nAdd to hide an element but not remove it from the spacing of the page\n*/\n.hidden {\n    visibility: hidden;\n}\n\n/*\n### .visually-hidden\nUsed to hide content visually but let them still be read by screen readers (removed from the page spacing)\nSee http://developer.yahoo.com/blogs/ydn/clip-hidden-content-better-accessibility-53456.html\n*/\n.visually-hidden {\n    position: absolute !important;\n    clip: rect(1px, 1px, 1px, 1px);\n    padding: 0 !important;\n    border: 0 !important;\n    height: 1px !important;\n    width: 1px !important;\n    overflow: hidden;\n}\nbody:hover .visually-hidden a,\nbody:hover .visually-hidden input,\nbody:hover .visually-hidden button {\n    display: none;\n}\n\n/*\n## Clearing Floats\n\n### Clearfix\nProvide clearfix functionality\nSee http://nicolasgallagher.com/micro-clearfix-hack/\n\n```\n<h1 class=\"title lg\">No Clearfix</h1>\n<div style=\"background: #ddd; padding: 1em;\">\n    <div style=\"float: left; background: #eee; padding: 1em;\">Floated Content</div>\n</div>\n\n<h1 class=\"title lg clear\">With Clearfix</h1>\n<div class=\"clearfix\" style=\"background: #ddd; padding: 1em;\">\n    <div style=\"float: left; background: #eee; padding: 1em;\">Floated Content</div>\n</div>\n```\n*/\n.clearfix:before,\n.clearfix:after {\n    content: \" \"; /* 1 */\n    display: table; /* 2 */\n}\n\n.clearfix:after {\n    clear: both;\n}\n\n/*\n### Clearing siblings\n\nSimple classes to help with clearing previous sibling floats\n\n```\n\n<div class=\"clearfix padding: 1em;\">\n    <div style=\"float: left;\">Floated</div>\n    <div class=\"clear-right\">Uncleared (wrong side)</div>\n    <div class=\"clear-left\">Cleared</div>\n\n    <hr>\n\n    <div style=\"float: right;\">Floated</div>\n    <div class=\"clear-left\">Uncleared (wrong side)</div>\n    <div class=\"clear-right\">Cleared</div>\n\n    <hr>\n\n    <div style=\"float: right;\">Floated</div>\n    <div style=\"float: left;\">Floated</div>\n    <div class=\"clear\">Both cleared</div>\n</div>\n```\n*/\n.clear {\n    clear: both;\n}\n.clear-left {\n    clear: left;\n}\n.clear-right {\n    clear: right;\n}\n\n/*\n### Full Width\n\nClass that marks content as full width (e.g. to give a button full width).\n\nRequires 'display' to be defined as `inline-block` or `block`\n\n```\n<button class=\"button sm negative\">I'm just a sad regular button</button>\n<button class=\"button xl positive full-width\">Not me, I'm a happy wide button</button>\n```\n\n*/\n.full-width {\n    width: 100%;\n}\n\n@import 'vars';\n@import 'flexbox';\n@import 'mixins';\n\n/*\n\n # rxApp\n\nThis component is responsible for creating the HTML necessary for a common Encore layout. It builds out the main navigation, plus breadcrumbs and page titles.\n\n## Usage\n\nFor apps that want to use the default Encore navigation, use the following HTML class structures placed inside your index.html file:\n\n```\n    <body>\n        <div class=\"rx-app\">\n            <nav class=\"rx-app-menu\">\n                <header class=\"site-branding\">\n                    <h1 class=\"site-title\">Encore</h1>\n                    <button class=\"collapsible-toggle btn-link\">\n                        <div class=\"double-chevron\"></div>\n                    </button>\n                    <div class=\"site-options\">\n                        <a href=\"#\" class=\"site-option\">Logout</a>\n                    </div>\n                </header>\n                <nav class=\"rx-app-nav\">\n                    <div class=\"nav-section nav-section-1\">\n                        <h2 class=\"nav-section-title\">Section One</h2>\n                        <div class=\"rx-app-nav rx-app-nav-level-1\">\n                            <ul class=\"rx-app-nav-group\">\n                                <li class=\"rx-app-nav-item active\">\n                                    <a href=\"#\" class=\"item-link\">Link one</a>\n                                </li>\n                                <li class=\"rx-app-nav-item\">\n                                    <a href=\"#\" class=\"item-link\">Link two</a>\n                                </li>\n                                <li class=\"rx-app-nav-item has-children\">\n                                    <a href=\"#\" class=\"item-link\">Link three</a>\n                                    <div class=\"item-content\">\n                                        <div class=\"item-directive\">[Things like a search go here]</div>\n                                        <div class=\"item-children\">\n                                            <div class=\"child-header\">Subgroup Header</div>\n                                            <div class=\"rx-app-nav rx-app-nav-level-2\">\n                                                <ul class=\"rx-app-nav-group\">\n                                                    <li class=\"rx-app-nav-item active\">\n                                                        <a href=\"#\" class=\"item-link\">Sub link 1</a>\n                                                    </li>\n                                                    <li class=\"rx-app-nav-item\">\n                                                        <a href=\"#\" class=\"item-link\">Sub link 2</a>\n                                                    </li>\n                                                </ul>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </li>\n                            </ul>\n                        </div>\n                        <h2 class=\"nav-section-title\">Section Two</h2>\n                        <div class=\"rx-app-nav rx-app-nav-level-2\">\n                            <ul class=\"rx-app-nav-group\">\n                                <rx-app-nav-item ng-repeat=\"item in items\" item=\"item\"></rx-app-nav-item>\n                            </ul>\n                        </div>\n                    </div>\n                </nav>\n            </nav>\n            <div class=\"rx-app-content\">\n                <div class=\"rx-page\">\n                    <header class=\"page-header clearfix\">\n                        <!--\n                            This uses the rxBreadcrumbs angular.js directive. For non-angular\n                            implementations, please see the rxBreadcrumbs template section in\n                            the CSS documentation.\n                        -->\n                        <rx-breadcrumbs></rx-breadcrumbs>\n                    </header>\n                    <div class=\"page-body\">\n                        <!--\n                            This uses the rxNotifications angular.js directive. For non-angular\n                            implementations, please see the rxNotifications template section in\n                            the CSS documentation.\n                        -->\n                        <rx-notifications></rx-notifications>\n                        <div class=\"page-titles\">\n                            <h2 class=\"page-title\">Lorem Ipsum</h2>\n                            <h3 class=\"page-subtitle\">Dolor Sit Amet</h3>\n                        </div>\n                        <div class=\"page-content clear\">\n                            <p>Lorem ipsum dolor sit amet.</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </body>\n```\n\n */\n.rx-app {\n    @navTransitionDuration: .2s;\n    @appMenuWidth: 300px;\n\n    min-height: 100%;\n    .flexbox-display();\n    .flexbox-direction(row);\n    background: @appBg;\n\n    .rx-app-content {\n        .flexbox(1 1 0);\n    }\n\n    .rx-app-menu {\n        .flexbox(0 0 @appMenuWidth);\n        color: #fff;\n        font-size: 15px;\n        font-weight: 300;\n        background: @appMenuBg;\n        line-height: @appLineHeight;\n        padding-bottom: 10em;\n        position: relative;\n    }\n\n    .site-branding {\n        border-top: 1px solid #074285;\n        border-bottom: 1px solid #052953;\n        padding: 5px 20px;\n        overflow: hidden;\n        background: @siteBrandingBg;\n        position: relative;\n\n        .site-title {\n            float: left;\n        }\n        .site-options {\n            float: right;\n            font-size: .8em;\n            margin-top: 1px;\n\n            .site-option {\n                color: @menuLinkLightBlue;\n                display: inline-block;\n                margin-left: 1em;\n                &:hover,\n                &:focus {\n                    color: @white;\n                }\n            }\n        }\n\n        .collapsible-toggle {\n            position: absolute;\n            text-align: center;\n            top: 0;\n            bottom: 0;\n            right: 0;\n            width: 2em;\n            border-left: 1px solid #052953;\n            &:hover {\n                background: lighten(@siteBrandingBg, 10%);\n            }\n        }\n\n        .double-chevron {\n            font-size: 20px;\n            position: absolute;\n            top: 0;\n            bottom: 0;\n            right: 0;\n            left: 0;\n\n            &::before {\n                color: @menuLinkLightBlue;\n                content: \"\\00bb\";\n            }\n\n            &.double-chevron-left::before {\n                content: \"\\00ab\";\n            }\n\n            &:hover &::before {\n                color: @white;\n            }\n        }\n    }\n\n    &.collapsible {\n        .site-branding {\n            padding-right: calc(~\"2em + 20px\");\n        }\n    }\n\n    &.collapsed {\n        .rx-app-menu {\n            .flexbox(0 0 25px);\n            padding-bottom: 0;\n            position: relative;\n        }\n\n        .site-branding,\n        .collapsible-toggle {\n            position: absolute;\n            top: 0;\n            bottom: 0;\n            left: 0;\n            padding: 0;\n            width: 100%;\n        }\n\n        .site-title,\n        .site-options,\n        .rx-app-nav,\n        .rx-app-help {\n            display: none;\n        }\n    }\n\n    &.warning-bar {\n        position: absolute;\n        margin-top: 3em;\n        width: 100%;\n    }\n\n    &.warning-bar.preprod {\n        .rx-app-menu {\n            background: @preprodBackground;\n        }\n        .rx-app-nav-item {\n            &.active:not(.has-children) > .item-link {\n                border-top-color: @preprodBorderTop;\n            }\n            .item-link {\n                background: @preprodBackground;\n                border-top: 1px solid @preprodBorderTop;\n                border-bottom: 1px solid @preprodBorderBottom;\n                &:hover,\n                &:focus {\n                    background: @preprodBackgroundFocus;\n                    border-top: 1px solid @preprodBorderBottom;\n                    border-bottom: 1px solid @preprodBorderBottom;\n                }\n            }\n\n            // active nav, w/children (double arrow up, gray bg)\n            &.active.has-children > .item-link {\n                border-top-color: @preprodBorderTop;\n                // used to show BG of arrow (because :after is rotated)\n                &:before {\n                    background: @preprodActiveBackground;\n                }\n                .item-content {\n                    border-bottom: 1px solid #000000;\n                }\n            }\n\n            .item-content {\n                background: @preprodActiveBackground;\n            }\n        }\n    }\n\n    .rx-app-nav {\n        clear: both;\n\n        .nav-section {\n            padding-left: 5px;\n        }\n\n        .nav-section-title {\n            padding: 5px 15px;\n            font-size: 13px;\n        }\n\n        .nav-section-all {\n            background: #407610;\n            border-top: 1px solid #568c26;\n        }\n\n        .nav-section-highlight {\n            background: #0951a3;\n            border-top: 1px solid #00408f;\n        }\n    }\n\n    .rx-app-nav-item {\n        clear: both;\n\n        // common nav styles (inactive nav, no children)\n        .item-link {\n            background: #1a1a1a;\n            border-top: 1px solid #333333;\n            border-bottom: 1px solid #000000;\n            padding: 10px 4em 10px 15px;\n            display: block;\n            color: #fff;\n            text-decoration: none;\n            -webkit-transition: background @navTransitionDuration;\n            transition: background @navTransitionDuration;\n            position: relative;\n            &:hover,\n            &:focus {\n                background: #262626;\n                border-top: 1px solid #404040;\n                border-bottom: 1px solid #0d0d0d;\n            }\n            &:before,\n            &:after {\n                content: '';\n                position: absolute;\n            }\n            &:after {\n                -webkit-transition: all @navTransitionDuration;\n                transition: all @navTransitionDuration;\n            }\n        }\n\n        &:not(.has-children) > .item-link:after {\n            right: 0;\n            top: 0;\n            border: transparent solid;\n            border-width: calc(~\"5px + 1em\") 6px;\n            border-right: 0;\n        }\n\n        // active nav, no children (blue bg, arrow right)\n        &.active:not(.has-children) > .item-link {\n            border-color: transparent;\n            background: #0E7FFF;\n            &:after {\n                right: -6px;\n                border-left-color: #0E7FFF;\n            }\n        }\n\n        // inactive nav, w/children (double arrow down)\n        &.has-children > .item-link:after {\n            font-size: 2em;\n            content: \"\\00bb\"; // angle quotation mark, right (&raquo;)\n            -webkit-transform: rotate(90deg) scaleX(1);\n            transform: rotate(90deg) scaleX(1);\n            top: 50%;\n            line-height: 0;\n            right: .45em;\n        }\n\n        // active nav, w/children (double arrow up, gray bg)\n        &.active.has-children > .item-link {\n            border-top-color: #404040;\n            border-bottom-width: 0;\n            // used to show BG of arrow (because :after is rotated)\n            &:before {\n                width: 3em;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background: #333;\n            }\n            &:after {\n                // flip arrow around\n                -webkit-transform: rotate(90deg) scaleX(-1);\n                transform: rotate(90deg) scaleX(-1);\n            }\n            .item-content {\n                border-bottom: 1px solid #000000;\n            }\n        }\n\n        .item-content {\n            background: #333;\n            padding: 10px;\n        }\n\n        .item-directive:not(.ng-hide) + .item-children {\n            margin-top: 10px;\n        }\n\n        .item-children {\n            padding: 10px;\n            background: #4d4d4c;\n        }\n\n        .child-header {\n            margin-bottom: 1em;\n        }\n\n        .current-search {\n            text-transform: uppercase;\n            font-weight: bold;\n            color: #9c9c9c;\n            font-size: 10px;\n            display: block;\n        }\n        .current-result {\n            color: #d5d5d3;\n            font-size: 18px;\n        }\n\n    }\n\n    .rx-app-nav-level-2 {\n        .item-link {\n            background: #666766;\n            border-top-color: #787878;\n            border-bottom-color: #595959;\n            font-size: 13px;\n\n            &:hover,\n            &:focus {\n                background: #595959;\n                border-top: 1px solid #737373;\n                border-bottom: 1px solid #404040;\n            }\n        }\n        .active:not(.has-children) > .item-link {\n            margin-right: -10px;\n        }\n        .active.has-children > .item-link {\n            background: #1a1a1a;\n            border-color: transparent;\n        }\n\n        .item-content {\n            background: #1a1a1a;\n            padding: 0 0 4px 4px;\n        }\n\n        .item-children {\n            padding: 0;\n        }\n    }\n\n    .rx-app-nav-level-3 .item-link {\n        background: #333333;\n        border-color: transparent;\n        padding: 5px 15px;\n\n        &:hover,\n        &:focus {\n            background: #404040;\n            border-color: transparent;\n        }\n    }\n    .rx-app-nav-level-3 .rx-app-nav-item {\n        &:first-child {\n            border-top: 3px solid #333;\n        }\n        .item-link:after {\n            border-top-width: 1em;\n            border-bottom-width: 1em;\n        }\n    }\n\n    .rx-app-search {\n        position: relative;\n        font-size: 14px;\n        color: #babab9;\n\n        // NOTE: We have to have this duplication because CSS doesn't like combining the placholder selectors\n        .placeholder() {\n           font-style: italic;\n           text-overflow: ellipsis;\n        }\n\n        ::-webkit-input-placeholder {\n            .placeholder();\n        }\n        ::-moz-placeholder {\n           .placeholder();\n        }\n        :-ms-input-placeholder {\n           .placeholder();\n        }\n\n        .search-input {\n            .box-sizing(border-box);\n            background: #4d4d4c;\n            border: 0;\n            width: 100%;\n            padding: 9px;\n            padding-right: 30px;\n            margin: 0;\n        }\n\n        .search-input.ng-invalid:focus {\n            outline-color: @menuRed;\n        }\n\n        .search-action {\n            position: absolute;\n            top: 0;\n            right: 0;\n            width: 30px;\n            height: 100%;\n            background: url(images/magnifying-glass.png) no-repeat 50% 50%;\n            border: 0;\n            opacity: 0.2;\n        }\n    }\n\n    .rx-app-help {\n        position: fixed;\n        bottom: 0;\n        left: 0;\n        width: @appMenuWidth;\n        background: @appHelpBg;\n        border-top: 1px solid @appHelpBorder;\n        line-height: 3em;\n        padding-bottom: 1px;\n        font-size: .8em;\n        text-shadow: 1px 1px 0px rgba(26, 26, 26, 0.2);\n\n        .rx-feedback .modal-link {\n            background: url(images/icon-feedback.png) no-repeat 20px calc(~\"50% + 1px\");\n            vertical-align: middle;\n            color: @menuLinkOrange;\n            padding: 0 21px 0 41px;\n            float: right;\n        }\n    }\n\n\n    // Page Styles\n\n    .page-header {\n        background: linear-gradient(to bottom, #e7e7e7 0%, #d6d6d6 100%);\n        border-bottom: 1px solid #bbb;\n    }\n\n    .page-body {\n        padding: 20px 30px 50px;\n        clear: both;\n\n        .page-titles {\n            float: left;\n\n            .page-title {\n                margin: 0;\n                position: relative;\n            }\n\n            .page-subtitle {\n                margin-top: 0;\n            }\n        }\n\n        & > .rx-notifications {\n            position:fixed;\n            z-index: 5;\n            top: 0px;\n            left: 300px;\n            right: 100px;\n            opacity: 0.95;\n            .rx-notification {\n                width: 100%;\n            }\n        }\n\n        .page-actions {\n            float: right;\n            margin: 0 0 2em 2em;\n        }\n    }\n}\n\n.warning-bar.rx-notifications {\n    position: fixed;\n    z-index: 3;\n    width: 100%;\n    margin-bottom: 0;\n}\n",
            "midway": "var rxAppPage = require('../rxApp.page.js').rxApp;\nvar rxPage = require('../rxApp.page.js').rxPage;\n\ndescribe('rxApp', function () {\n    var rxAppCustom, rxAppStandard;\n\n    before(function () {\n        demoPage.go('#/component/rxApp');\n        rxAppCustom = rxAppPage.initialize($('#custom-rxApp'));\n        rxAppStandard = rxAppPage.initialize($('#standard-rxApp'));\n    });\n\n    it('should show element', function () {\n        expect(rxAppCustom.rootElement.isDisplayed()).to.eventually.be.true;\n    });\n\n    it('should have a title', function () {\n        expect(rxAppCustom.title).to.eventually.equal('My App');\n    });\n\n    it('should have a section title', function () {\n        expect(rxAppCustom.sectionTitle).to.eventually.equal('Example Menu');\n    });\n\n    it('should have a logout link', function () {\n        expect(rxAppCustom.lnkLogout.isDisplayed()).to.eventually.be.true;\n    });\n\n    it('should logout', function () {\n        rxAppCustom.logout();\n        expect(demoPage.currentUrl).to.eventually.contain('login');\n        demoPage.go('#/component/rxApp');\n    });\n\n    describe('with collapsible navigation', function () {\n        it('should have a collapsible navigation menu', function () {\n            expect(rxAppCustom.isCollapsible()).to.eventually.be.true;\n        });\n\n        it('should be expanded by default', function () {\n            expect(rxAppCustom.isExpanded()).to.eventually.be.true;\n        });\n\n        it('should collapse the navigation', function () {\n            rxAppCustom.collapse();\n            expect(rxAppCustom.isCollapsed()).to.eventually.be.true;\n        });\n\n        it.skip('should expand the navigation', function () {\n            rxAppCustom.expand();\n            expect(rxAppCustom.isExpanded()).to.eventually.be.true;\n        });\n    });\n\n    describe('without collapsible navigation', function () {\n        it('should not support a toggle show/hide button', function () {\n            expect(rxAppStandard.isCollapsible()).to.eventually.be.false;\n        });\n\n        it('should throw an error if you attempt to expand and unsupported', function () {\n            expect(rxAppStandard.expand()).to.be.rejectedWith('Encore');\n        });\n    });\n});\n\ndescribe('rxPage', function () {\n    var standardPage, customPage;\n\n    before(function () {\n        demoPage.go('#/component/rxApp');\n        standardPage = rxPage.initialize($('#standard-rxApp .rx-page'));\n        customPage = rxPage.initialize($('#custom-rxApp .rx-page'));\n    });\n\n    it('should show element', function () {\n        expect(customPage.rootElement.isDisplayed()).to.eventually.eq.true;\n    });\n\n    it('should have a title', function () {\n        expect(standardPage.title).to.eventually.equal('Standard Page Title');\n    });\n\n    it('should return a blank string if no subtitle is found', function () {\n        expect(standardPage.subtitle).to.eventually.equal('');\n    });\n\n    it('should have a subtitle', function () {\n        expect(customPage.subtitle).to.eventually.equal('With a subtitle');\n    });\n\n    it('should update page subtitle dynamically', function () {\n        $('button.changeSubtitle').click();\n        expect(customPage.subtitle).to.eventually.contain('With a new subtitle at 1');\n    });\n\n    describe('main title', function () {\n\n        before(function () {\n            demoPage.go('#/component/configs');\n        });\n\n        it('should grab the main title', function () {\n            expect(rxPage.main.title).to.eventually.equal('configs');\n        });\n\n    });\n});\n"
        }
    },
    {
        "name": "rxAppRoutes",
        "moduleName": "'encore.ui.rxAppRoutes'",
        "displayName": "Rx App Routes",
        "srcFiles": [
            "src/rxAppRoutes/rxAppRoutes.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [
            "rxEnvironment"
        ],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\" title=\"\" /></a></p>\n\n<p>Service to manage app routes and states of routes</p>",
            "js": "",
            "html": "",
            "less": "",
            "midway": ""
        }
    },
    {
        "name": "rxAttributes",
        "moduleName": "'encore.ui.rxAttributes'",
        "displayName": "Rx Attributes",
        "srcFiles": [
            "src/rxAttributes/rxAttributes.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\" title=\"\" /></a></p>\n\n<p>This component allows you to add attributes based on a value in scope being defined or not.</p>\n\n<h2>Example</h2>\n\n<pre><code>&lt;div rx-attributes=\"{'my-custom-attr': customAttrVal, 'ng-click': noFunc}\" ng-controller=\"myCtrl\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\nfunction myCtrl (scope) {\n    scope.customAttrVal = 'some value';\n}\n&lt;/script&gt;\n</code></pre>\n\n<p>Given this code, if the scope only had <code>scope.customAttrVal</code> set, only <code>my-custom-attr</code> would be added to the component. Since noFunc was never defined, <code>ng-click</code> isn't added.</p>\n\n<p>The output of the above code is:</p>\n\n<pre><code>&lt;div my-custom-attr=\"some value\" ng-controller=\"myCtrl\"&gt;&lt;/div&gt;\n</code></pre>\n\n<h2>Value Format</h2>\n\n<p>The value of <code>rx-attributes</code> follows the same object convention as <code>ng-class</code>, in that it takes in an object to parse through. The object follows this pattern:</p>\n\n<pre><code>{\n    'attribute-name': scopeValue,\n    'another-attribute-name': anotherScopeValue,\n}\n</code></pre>",
            "js": "/*jshint unused:false*/\nfunction rxAttributesCtrl ($scope) {\n    $scope.customStyles = 'color: red; font-weight: bold;';\n    $scope.customContent = '\"Custom Content\"';\n}",
            "html": "<!-- Sample HTML goes here as a live example of how to the component can be used -->\n<div ng-controller=\"rxAttributesCtrl\">\n    <p><strong>The following content gets replaced by the value of ng-bind. It also gets some styles applied to it:</strong></p>\n    <p rx-attributes=\"{'ng-bind': customContent, 'style': customStyles}\">Content that's replaced</p>\n\n    <p><strong>The following content doesn't get replaced, since 'nothing' isn't a property on the scope:</strong></p>\n    <p rx-attributes=\"{'ng-bind': nothing}\">Non-replaced content</p>\n\n    <p><strong>The following content (you can't see it) does get replaced, but by nothing, since 'nothing' isn't a property on the scope. This is what rx-attributes avoids</strong></p>\n    <p ng-bind=\"nothing\">Content that's unintentionally replaced</p>\n</div>",
            "less": "",
            "midway": ""
        }
    },
    {
        "name": "rxAuth",
        "moduleName": "'encore.ui.rxAuth'",
        "displayName": "Rx Auth",
        "srcFiles": [
            "src/rxAuth/rxAuth.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [
            "rxIdentity",
            "rxSession",
            "rxLocalStorage",
            "rxPermission",
            "rxSession",
            "rxLocalStorage"
        ],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\" title=\"\" /></a></p>\n\n<p>Auth service which provides a common mechanism authenticating, validating permissions and managing sessions.</p>",
            "js": "function rxAuthCtrl ($scope, Auth) {\n    $scope.hasRole = function () {\n        alert('Has \"superhero\" Role? : ' + Auth.hasRole('superhero'));\n    };\n\n    $scope.isAuthenticated = function () {\n        alert('Is Authenticated? : ' + Auth.isAuthenticated());\n    };\n}\n",
            "html": "<div ng-controller=\"rxAuthCtrl\">\n    <button ng-click=\"hasRole()\" class=\"button\">Is a Superhero?</button>\n    <button ng-click=\"isAuthenticated()\" class=\"button\">Is Authenticated?</button>\n</div>\n",
            "less": "",
            "midway": ""
        }
    },
    {
        "name": "rxBreadcrumbs",
        "moduleName": "'encore.ui.rxBreadcrumbs'",
        "displayName": "Rx Breadcrumbs",
        "srcFiles": [
            "src/rxBreadcrumbs/rxBreadcrumbs.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [
            "templates/rxBreadcrumbs/templates/rxBreadcrumbs.html"
        ],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\" title=\"\" /></a></p>\n\n<p>Service/Directive to add/update breadcrumbs on a page</p>\n\n<p>By default, the first breadcrumb will always have an URL of <code>'/'</code> and a name of <code>'Home'</code>. This can be changed\nwith the <code>rxBreadcrumbsSvc.setHome()</code> method. It takes the new path as the first argument, and an optional name as the\nsecond argument. If you don't pass the second argument, it will reuse whatever name is already there (i.e. <code>'Home'</code>).\nThe breadcrumb name can contain HTML (ie. <code>'&lt;strong&gt;Home&lt;/strong&gt;'</code>).</p>",
            "js": "/*jshint unused:false*/\nfunction rxBreadcrumbsCtrl ($scope, rxBreadcrumbsSvc) {\n    rxBreadcrumbsSvc.set([{\n        path: '/',\n        name: 'Components'\n    }, {\n        name: '<strong>All Components</strong>'\n    }]);\n}",
            "html": "<!-- Sample HTML goes here as a live example of how to the component can be used -->\n<div ng-controller=\"rxBreadcrumbsCtrl\">\n    <nav class=\"site-breadcrumbs\">\n        <rx-breadcrumbs></rx-breadcrumbs>\n    </nav>\n</div>",
            "less": "/*\n# rxBreadcrumbs\n\nThey show your position within the site heirarchy.\n\n```\n<ol class=\"rx-breadcrumbs\">\n    <li class=\"breadcrumb\">\n        <span>\n            <a href=\"#\" class=\"breadcrumb-name first\">First Breadcrumb</a>\n        </span>\n    </li>\n    <li class=\"breadcrumb\">\n        <span>\n            <a href=\"#\" class=\"breadcrumb-name\">Middle Breadcrumb</a>\n        </span>\n    </li>\n    <li class=\"breadcrumb\">\n        <span>\n            <a href=\"#\" class=\"breadcrumb-name :hover\">Hovered Breadcrumb</a>\n        </span>\n    </li>\n    <li class=\"breadcrumb\">\n        <span class=\"breadcrumb-name last\">Last Breadcrumb</span>\n    </li>\n</ol>\n```\n*/\n\n.rx-breadcrumbs {\n    overflow: hidden;\n    border-style: solid;\n    border-color: #ccc;\n    float: left;\n\n    .breadcrumb {\n        float: left;\n\n        @breadcrumbHeight: 1.2em;\n        @breadcrumbArrowWidth: 9px;\n\n        .breadcrumb-name {\n            padding: @breadcrumbHeight/2 1em @breadcrumbHeight/2 2em;\n            font-size: 0.9em;\n            display: block;\n            color: #555;\n            position: relative;\n            text-decoration: none;\n            text-shadow: 0 1px 0 rgba(255,255,255,.5);\n            background: #ddd;\n        }\n        .breadcrumb-name.last {\n            background: transparent;\n        }\n\n        a::after,\n        a::before{\n            content: \"\";\n            position: absolute;\n            top: 50%;\n            margin-top: -@breadcrumbHeight;\n            border: 0 solid transparent;\n            border-width: @breadcrumbHeight 0 @breadcrumbHeight @breadcrumbArrowWidth;\n            right: -@breadcrumbArrowWidth;\n        }\n\n        a::after{\n            /* TODO add in border gradient to match nav background */\n            border-left-color: #ddd;\n            z-index: 2;\n        }\n        a::before{\n            border-left-color: #ccc;\n            right: -(@breadcrumbArrowWidth + 1);\n            z-index: 1;\n        }\n\n        .first {\n            padding-left: 1em;\n            background: #c8c8c8;\n        }\n        .first::after {\n            border-left-color: #c8c8c8;\n        }\n\n        a:hover {\n            background: #fff;\n        }\n        a:hover::after {\n            border-left-color: #fff;\n        }\n    }\n}",
            "midway": "var rxBreadcrumbs = require('../rxBreadcrumbs.page.js').rxBreadcrumbs;\n\ndescribe('rxBreadcrumbs', function () {\n    var breadcrumbs;\n\n    before(function () {\n        demoPage.go('#/component/rxBreadcrumbs');\n        breadcrumbs = rxBreadcrumbs.initialize($('.component-demo rx-breadcrumbs'));\n    });\n\n    it('should show the element', function () {\n        expect(breadcrumbs.rootElement.isDisplayed()).to.eventually.be.true;\n    });\n\n    describe('first breadcrumb', function () {\n        var first;\n\n        before(function () {\n            first = breadcrumbs.byPosition(0);\n        });\n\n        it('should fetch a single breadcrumb by position', function () {\n            expect(first).to.not.be.empty;\n        });\n\n        it('should be the first breadcrumb', function () {\n            expect(first.isFirst()).to.eventually.be.true;\n        });\n\n        it('should not be the last breadcrumb', function () {\n            expect(first.isLast()).to.eventually.be.false;\n        });\n\n        it('should have the name \"Home\"', function () {\n            expect(first.name).to.eventually.equal('Home');\n        });\n\n        it('should have the href \"/\"', function () {\n            expect(first.href).to.eventually.equal(browser.baseUrl + '/');\n        });\n\n    });\n\n    describe('last breadcrumb', function () {\n        var last;\n\n        before(function () {\n            last = breadcrumbs.byPosition(-1);\n        });\n\n        it('should fetch a single breadcrumb by position', function () {\n            expect(last).to.not.be.empty;\n        });\n\n        it('should not be the first breadcrumb', function () {\n            expect(last.isFirst()).to.eventually.be.false;\n        });\n\n        it('should be the last breadcrumb', function () {\n            expect(last.isLast()).to.eventually.be.true;\n        });\n\n        it('should have the name \"All Components\"', function () {\n            expect(last.name).to.eventually.equal('All Components');\n        });\n\n        it('should have no href property', function () {\n            expect(last.isLink()).to.eventually.be.false;\n            expect(last.href).to.eventually.be.null;\n        });\n\n    });\n\n    describe('all breadcrumbs', function () {\n        var all;\n\n        before(function () {\n            breadcrumbs.toArray().then(function (allBreadcrumbs) {\n                all = allBreadcrumbs;\n            });\n        });\n\n        it('should have the first breadcrumb first', function () {\n            expect(all[0].isFirst()).to.eventually.be.true;\n        });\n\n        it('should have the last breadcrumb last', function () {\n            expect(all[2].isLast()).to.eventually.be.true;\n        });\n\n    });\n\n    describe('by name', function () {\n        var middle;\n\n        before(function () {\n            breadcrumbs.byName('Components').then(function (breadcrumb) {\n                middle = breadcrumb;\n            });\n        });\n\n        it('should fetch a single breadcrumb by position', function () {\n            expect(middle).to.not.be.empty;\n        });\n\n        it('should not be the first breadcrumb', function () {\n            expect(middle.isFirst()).to.eventually.be.false;\n        });\n\n        it('should not be the last breadcrumb', function () {\n            expect(middle.isLast()).to.eventually.be.false;\n        });\n\n        it('should have the name \"Components\"', function () {\n            expect(middle.name).to.eventually.equal('Components');\n        });\n\n        it('should have an href property', function () {\n            expect(middle.isLink()).to.eventually.be.true;\n            expect(middle.href).to.eventually.equal(browser.baseUrl + '/');\n        });\n\n    });\n\n    describe('default breadcrumbs', function () {\n        var defaultBreadcrumbs;\n\n        before(function () {\n            demoPage.go('#/component/configs');\n            defaultBreadcrumbs = rxBreadcrumbs.main;\n        });\n\n        it('should find the default breadcrumbs', function () {\n            expect(defaultBreadcrumbs.count()).to.eventually.equal(2);\n        });\n\n        it('should have the correct names', function () {\n            expect(defaultBreadcrumbs.names).to.eventually.eql(['Home', 'configs']);\n        });\n\n    });\n\n});\n"
        }
    },
    {
        "name": "rxButton",
        "moduleName": "'encore.ui.rxButton'",
        "displayName": "Rx Button",
        "srcFiles": [
            "src/rxButton/rxButton.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [
            "templates/rxButton/templates/rxButton.html"
        ],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\" title=\"\" /></a></p>\n\n<p>Provides styling for various types of buttons. See the .less file for examples.</p>\n\n<h2>rxButton directive</h2>\n\n<p>This directive is used to allow dynamic showing/hiding of a spinner/loading indicator.</p>",
            "js": "/*jshint unused:false*/\nfunction rxButtonCtrl ($scope, $timeout) {\n    $scope.status = {\n        loading: false,\n        disable: true\n    };\n\n    $scope.login = function () {\n        $scope.status.loading = true;\n\n        $timeout(function () {\n            $scope.status.loading = false;\n        }, 4000);\n    };\n}\n",
            "html": "<!-- Sample HTML goes here as a live example of how to the component can be used -->\n<h3 class=\"title\">Typical Usage</h3>\n<div ng-controller=\"rxButtonCtrl\">\n    <rx-button toggle-msg=\"Authenticating\" default-msg=\"Login\"\n        toggle=\"status.loading\" ng-click=\"login()\">\n    </rx-button>\n</div>\n\n<h3 class=\"title\">Using the <code>disable</code> attribute<h3>\n<p>\nNormally the <code>ng-disabled</code> property of an <code>rxButton</code> is controlled by <code>toggle</code>. You can use the optional <code>disable</code> attribute to pass an expression that <code>rxButton</code> should use for <code>ng-disabled</code>. Note that we set <code>classes=\"positive\"</code> on the \"Login\" button to provide it with some styling.\n</p>\n<div ng-controller=\"rxButtonCtrl\">\n    <rx-button default-msg=\"Toggle enabled/disabled of 'Login'\"\n        rx-toggle=\"status.disable\">\n    </rx-button>\n    <rx-button classes=\"positive\" toggle-msg=\"Authenticating\" default-msg=\"Login\"\n        toggle=\"status.loading\" disable=\"status.disable\" ng-click=\"login()\">\n    </rx-button>\n</div>\n",
            "less": "@import 'vars';\n\n/*\n# Common button styles\n\nButtons are sized using 'xl', 'lg', 'sm' and 'xs'\n\n ```\n <button class=\"button xl\">Extra-large Button</button>\n <button class=\"button lg\">Large Button</button>\n <button class=\"button\">Default Button</button>\n <button class=\"button sm\">Small Button</button>\n <button class=\"button xs\">Tiny Button</button>\n <button class=\"button positive\">\"Positive\" Button</button>\n <button class=\"button negative\">\"Negative\" Button</button>\n <button class=\"button submit\">\"Submit\" Button</button>\n <button class=\"button cancel\">\"Cancel\" Button</button>\n <button class=\"button\" disabled>Disabled Button</button>\n <a href=\"#\" class=\"button\">My Link Button</a>\n ```\n\nWhen is a submit button blue and when is the submit button green?  If the form you are submitting results in CREATING or ADDING something, use green. If the form you are submitting results in editing something or something auxiliary (like getting metadata from a different sources) keep it blue. Ping an Encore-UI member if you have questions!\n\n */\n .button {\n    display: inline-block;\n    background: @buttonDefaultBg;\n    color: @buttonText;\n    border: 0;\n    font-size: 1.1em;\n    padding: 7px 13px;\n    margin-bottom: 10px;\n    transition: all 0.3s cubic-bezier(0.175, 0.885, 0.320, 1.275);\n\n    &:hover,\n    &:focus {\n        background: @buttonDefaultBgHover;\n        cursor: pointer;\n        // in case the buttons are created using the <a> tag\n        color: @buttonText;\n        text-decoration: none;\n    }\n\n    // Size Variations\n    &.xl {\n        font-size: 1.25em;\n        padding: 20px 30px;\n    }\n\n    &.lg {\n        font-size: 1.15em;\n        padding: 15px 26px;\n    }\n\n    &.sm {\n        padding: 5px 10px;\n        font-size: 1em;\n    }\n\n    &.xs {\n        padding: 3px 7px;\n        margin-bottom: 5px;\n        font-size: .9em;\n    }\n\n    // Color Variations\n    &.positive, &.submit {\n        background: @buttonPositiveBg;\n        &:hover,\n        &:focus {\n            background: @buttonPositiveBgHover;\n        }\n    }\n\n    &.negative {\n        background: @buttonNegativeBg;\n        &:hover,\n        &:focus {\n            background: @buttonNegativeBgHover;\n        }\n    }\n\n    &[disabled] {\n        cursor: not-allowed;\n        color: @buttonDisabledText;\n        background: @buttonDisabledBg;\n    }\n\n    &.cancel {\n        background: @buttonCancelBg;\n        &:hover,\n        &:focus {\n            background: @buttonCancelBgHover;\n        }\n    }\n\n\n/*\n# Spinner styles\n\n```\n<button class=\"button\">\n    I have a spinner\n    <div class=\"spinner\">\n        <i class=\"pos1\"></i>\n        <i class=\"pos2\"></i>\n        <i class=\"pos3\"></i>\n    </div>\n</button>\n```\n*/\n    .spinner {\n        display: inline-block;\n        position: relative;\n        left: 3px;\n\n        i {\n            width: 5px;\n            height: 5px;\n            background: @buttonSpinnerBg;\n\n            border-radius: 100%;\n            display: inline-block;\n            -webkit-animation: bouncedelay 1.4s infinite ease-in-out;\n            animation: bouncedelay 1.4s infinite ease-in-out;\n            /* Prevent first frame from flickering when animation starts */\n            -webkit-animation-fill-mode: both;\n            animation-fill-mode: both;\n\n            &.pos1 {\n                -webkit-animation-delay: -0.32s;\n                animation-delay: -0.32s;\n            }\n\n            &.pos2 {\n                -webkit-animation-delay: -0.16s;\n                animation-delay: -0.16s;\n            }\n        }\n    }\n\n    @-webkit-keyframes bouncedelay {\n        0%, 80%, 100% { -webkit-transform: scale(0.0) }\n        40% { -webkit-transform: scale(1.0) }\n    }\n\n    @keyframes bouncedelay {\n        0%, 80%, 100% {\n            transform: scale(0.0);\n            -webkit-transform: scale(0.0);\n        } 40% {\n            transform: scale(1.0);\n            -webkit-transform: scale(1.0);\n        }\n    }\n}\n\n/*\n# Make buttons look like plain links\n\n```\n<button class=\"btn-link\">Link</button>\n```\n*/\n.btn-link {\n    color: @linkColor;\n    background: none;\n    border: none;\n    padding: 0;\n    cursor: pointer;\n    font-size: inherit;\n    &:hover,\n    &:focus {\n        text-decoration: underline;\n    }\n}\nthead th .btn-link {\n    color: @tableHeaderText;\n    &:hover,\n    &:focus {\n        color: @tableHeaderText;\n    }\n}",
            "midway": "var rxButtonPage = require('../rxButton.page.js').rxButton;\n\ndescribe('rxButton', function () {\n    var rxButton;\n\n    before(function () {\n        demoPage.go('#/component/rxButton');\n        rxButton = rxButtonPage.initialize($('rx-button'));\n    });\n\n    it('should show element', function () {\n        expect(rxButton.rootElement.isDisplayed()).to.eventually.be.true;\n    });\n});\n"
        }
    },
    {
        "name": "rxCapitalize",
        "moduleName": "'encore.ui.rxCapitalize'",
        "displayName": "Rx Capitalize",
        "srcFiles": [
            "src/rxCapitalize/rxCapitalize.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/stable.svg\" alt=\"stable\" title=\"\" /></a></p>\n\n<p>Capitalizes the first word in a string.</p>",
            "js": "/*jshint unused:false*/\n\nfunction rxCapitalizeCtrl ($scope) {\n    $scope.hello = 'hello world. this is my text';\n}",
            "html": "<!-- Sample HTML goes here as a live example of how to the component can be used -->\n<div ng-controller=\"rxCapitalizeCtrl\">\n    {{hello | rxCapitalize}}\n</div>",
            "less": "",
            "midway": ""
        }
    },
    {
        "name": "rxCompile",
        "moduleName": "'encore.ui.rxCompile'",
        "displayName": "Rx Compile",
        "srcFiles": [
            "src/rxCompile/rxCompile.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/stable.svg\" alt=\"stable\" title=\"\" /></a></p>\n\n<p>Allows compilation of expressions inside of other expressions.</p>",
            "js": "/*jshint unused:false*/\n\n// This file is used to help build the 'demo' documentation page and should be updated with example code\nfunction rxCompileCtrl ($scope) {\n    $scope.world = 'wrrrld';\n    $scope.myExpression = 'Hello {{world}}';\n}",
            "html": "<!-- Sample HTML goes here as a live example of how to the component can be used -->\n<div ng-controller=\"rxCompileCtrl\">\n    <input type=\"text\" ng-model=\"world\">\n    <div rx-compile=\"myExpression\"></div>\n    <div>{{myExpression}}</div>\n</div>",
            "less": "",
            "midway": ""
        }
    },
    {
        "name": "rxDiskSize",
        "moduleName": "'encore.ui.rxDiskSize'",
        "displayName": "Rx Disk Size",
        "srcFiles": [
            "src/rxDiskSize/rxDiskSize.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/stable.svg\" alt=\"stable\" title=\"\" /></a></p>\n\n<p>Converts GB disk size into a more readable format (e.g. GBs, TBs)</p>",
            "js": "/*jshint unused:false*/\n\n// This file is used to help build the 'demo' documentation page and should be updated with example code\nfunction rxDiskSizeCtrl ($scope) {\n    $scope.sizeGB = 420;\n    $scope.sizeTB = 125000;\n    $scope.sizePB = 171337000;\n}",
            "html": "<!-- Sample HTML goes here as a live example of how to the component can be used -->\n<div ng-controller=\"rxDiskSizeCtrl\">\n    <ul>\n        <li>{{sizeGB}} &rarr; {{sizeGB | rxDiskSize}}</li>\n        <li>{{sizeTB}} &rarr; {{sizeTB | rxDiskSize}}</li>\n        <li>{{sizePB}} &rarr; {{sizePB | rxDiskSize}}</li>\n    </ul>\n    <ul>\n        <li>{{sizeGB}} GB &rarr; {{sizeGB | rxDiskSize:'GB'}}</li>\n        <li>{{sizeTB}} GB &rarr; {{sizeTB | rxDiskSize:'TB'}}</li>\n        <li>{{sizePB}} GB &rarr; {{sizePB | rxDiskSize:'PB'}}</li>\n    </ul>\n</div>\n",
            "less": "",
            "midway": "var _ = require('lodash');\n\nvar diskSize = require('../rxDiskSize.page.js').rxDiskSize;\n\ndescribe('rxDiskSize', function () {\n    var diskSizesTable;\n    var diskSizeStrings = [\n        '420 GB',\n        '125 TB',\n        '171.337 PB',\n        '420 GB',\n        '125 TB',\n        '171.337 PB'\n    ];\n\n    before(function () {\n        demoPage.go('#/component/rxDiskSize');\n        diskSizesTable = $$('.component-demo ul li');\n    });\n\n    _.forEach(diskSizeStrings, function (testData, index) {\n        it('should still have ' + testData + ' as test data on the page', function () {\n            diskSizesTable.get(index).getText().then(function (text) {\n                var onPage = text.split('→')[1].trim();\n                expect(onPage).to.equal(testData);\n            });\n        });\n\n        it('should convert ' + testData + ' back to gigabytes', function () {\n            diskSizesTable.get(index).getText().then(function (text) {\n                var gigabytes = parseInt(text.split(' ')[0], 10);\n                expect(diskSize.toGigabytes(testData)).to.equal(gigabytes);\n            });\n        });\n    });\n\n});\n"
        }
    },
    {
        "name": "rxEnvironment",
        "moduleName": "'encore.ui.rxEnvironment'",
        "displayName": "Rx Environment",
        "srcFiles": [
            "src/rxEnvironment/rxEnvironment.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\" title=\"\" /></a></p>\n\n<p>Component built to detect and provide the current environment (e.g. dev, staging, prod)</p>",
            "js": "/*jshint unused:false*/\nfunction rxEnvironmentCtrl ($scope, Environment) {\n    $scope.Environment = Environment;\n}",
            "html": "<div ng-controller=\"rxEnvironmentCtrl\">\n    <p>Current Environment: {{Environment.get().name}}</p>\n\n    <p>Url built from Environment data: {{ { tld: 'cloudatlas', path: 'some/path' } | rxEnvironmentUrl }}</p>\n\n    <p>Content shows if on GitHub demo page:\n        <span rx-if-environment=\"ghPages\">\n            You're on the GitHub demo page\n        </span>\n    </p>\n\n    <p>Content shows if not on GitHub demo page:\n        <span rx-if-environment=\"!ghPages\">\n            You're not on the GitHub demo page\n        </span>\n    </p>\n</div>",
            "less": "",
            "midway": "var environment = require('../rxEnvironment.page').rxEnvironment;\n\ndescribe('rxEnvironment', function () {\n\n    before(function () {\n        demoPage.go('#/component/rxEnvironment');\n    });\n\n    it('should be on localhost', function () {\n        expect(environment.isLocalhost()).to.eventually.be.true;\n    });\n\n    it('should get the original environment', function () {\n        expect(environment.original()).to.eventually.equal('localhost');\n    });\n\n    it('should match the current environment', function () {\n        expect(environment.current()).to.eventually.equal('localhost');\n    });\n\n    it('should not change the original environment', function () {\n        browser.get('http://rackerlabs.github.io/encore-ui/#/overview');\n        expect(environment.original()).to.eventually.equal('localhost');\n    });\n\n    it('should change the current environment', function () {\n        expect(environment.current()).to.eventually.equal('staging');\n    });\n\n    it('should be on staging', function () {\n        expect(environment.isStaging()).to.eventually.be.true;\n    });\n\n    it('should still say the original location is localhost', function () {\n        expect(environment.isStaging({ useBaseUrl: true })).to.eventually.be.false;\n    });\n\n});\n"
        }
    },
    {
        "name": "rxFavicon",
        "moduleName": "'encore.ui.rxFavicon'",
        "displayName": "Rx Favicon",
        "srcFiles": [
            "src/rxFavicon/rxFavicon.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [
            "rxEnvironment"
        ],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\" title=\"\" /></a></p>\n\n<p>Allows custom favicons between local, staging and production environments.</p>\n\n<h2>Usage</h2>\n\n<p>rxFavicon is an attribute based directive. It accepts an object with the following optional parameters defined:</p>\n\n<ul>\n<li><strong>staging</strong>: Path to favicon to use for staging environments (falls back to 'production' icon)</li>\n<li><strong>local</strong>: Path to favicon to use for staging environments (falls back to 'staging' icon)</li>\n</ul>\n\n<p>See the demo examples for code examples.</p>",
            "js": "/*jshint unused:false*/\nfunction rxFaviconCtrl ($scope, Environment) {\n    $scope.setEnvironment = function (environment) {\n        // TODO allow overriding the current environment to show how the favicon changes\n    };\n}",
            "html": "<div ng-controller=\"rxFaviconCtrl\">\n    <p>See favicon of this site for an example of this. On <a href=\"http://rackerlabs.github.io/encore-ui/\">the live site</a>, the favicon will be a dark blue book. On <a href=\"http://localhost:9001\">the local site</a>, it will be a light blue book.</p>\n\n    <link rel=\"icon\" type=\"image/png\" href=\"favicon.png\" rx-favicon=\"{ staging: 'staging-favicon.png', local: 'local-favicon.png' }\" />\n    <link rel=\"icon\" type=\"image/png\" href=\"favicon.png\" rx-favicon=\"{ local: 'local-favicon.png' }\" />\n    <link rel=\"icon\" type=\"image/png\" href=\"favicon.png\" rx-favicon=\"{ staging: 'staging-favicon.png' }\" />\n</div>",
            "less": "",
            "midway": ""
        }
    },
    {
        "name": "rxFeedback",
        "moduleName": "'encore.ui.rxFeedback'",
        "displayName": "Rx Feedback",
        "srcFiles": [
            "src/rxFeedback/rxFeedback.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [
            "templates/rxFeedback/templates/feedbackForm.html",
            "templates/rxFeedback/templates/rxFeedback.html"
        ],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\" title=\"\" /></a></p>\n\n<p>Component built to gather and send user feedback</p>",
            "js": "/*jshint unused:false*/\nfunction rxFeedbackCtrl ($scope, rxNotify) {\n    $scope.alwaysSucceed = function () {\n        rxNotify.add('Thanks for your feedback!', {\n            type: 'success',\n            timeout: 3\n        });\n    };\n\n    $scope.alwaysFail = function () {\n        rxNotify.add('Feedback not received!', {\n            type: 'error',\n            timeout: 3\n        });\n    };\n}\n",
            "html": "<!-- Sample HTML goes here as a live example of how to the component can be used -->\n<div ng-controller=\"rxFeedbackCtrl\">\n\n    <rx-feedback id=\"rxFeedback\"></rx-feedback>\n    <span class=\"subdued\">(Will fallback to default email client)</span>\n\n    <hr/>\n\n    <rx-feedback on-submit=\"alwaysSucceed\" id=\"rxFeedbackSucceeds\"></rx-feedback>\n    <span class=\"subdued\">(Will Succeed)</span>\n\n    <rx-feedback on-submit=\"alwaysFail\" id=\"rxFeedbackFails\"></rx-feedback>\n    <span class=\"subdued\">(Will Fail)</span>\n\n</div>\n",
            "less": "/*\n * rxFeedback\n */\n.rx-feedback-form .feedback-description {\n    .field-label,\n    .field-input,\n    .feedback-textarea {\n        display: block;\n        width: 100%;\n        float: none;\n    }\n\n    .field-input {\n        top: 0;\n        margin-top: 5px;\n    }\n\n    .feedback-textarea {\n        height: 10em;\n    }\n}",
            "midway": "var _ = require('lodash');\n\nvar feedback = require('../rxFeedback.page.js').rxFeedback;\n\ndescribe('rxFeedback', function () {\n    var successfulFeedback, unsuccessfulFeedback;\n    var defaultFeedback = 'Software Bug';\n\n    before(function () {\n        demoPage.go('#/component/rxFeedback');\n        successfulFeedback = feedback.initialize($('#rxFeedbackSucceeds'));\n        unsuccessfulFeedback = feedback.initialize($('#rxFeedbackFails'));\n    });\n\n    it('should select the \"' + defaultFeedback + '\" feedback type by default', function () {\n        successfulFeedback.open();\n        expect(successfulFeedback.type).to.eventually.equal(defaultFeedback);\n    });\n\n    it('should have the default feedback description label for \"' + defaultFeedback + '\"', function () {\n        expect(successfulFeedback.descriptionLabel).to.eventually.equal('Bug Description:');\n    });\n\n    it('should have the default feedback placeholder text for \"' + defaultFeedback + '\"', function () {\n        var placeholder = 'Please be as descriptive as possible so we can track it down for you.';\n        expect(successfulFeedback.descriptionPlaceholder).to.eventually.equal(placeholder);\n    });\n\n    it('should include the url in the subtitle', function () {\n        browser.getCurrentUrl().then(function (url) {\n            var feedbackUrl = url.split('#')[1];\n            expect(successfulFeedback.subtitle).to.eventually.equal('for page: ' + feedbackUrl);\n        });\n    });\n\n    describe('feedback types and labels', function () {\n        var typesAndLabels = {\n            'Incorrect Data': {\n                descriptionLabel: 'Problem Description:',\n                descriptionPlaceholder: ['Please be as descriptive as possible ',\n                                         'so we can figure it out for you.'].join('')\n            },\n            'Feature Request': {\n                descriptionLabel: 'Feature Description:',\n                descriptionPlaceholder: ['Please be as descriptive as possible ',\n                                         'so we can make your feature awesome.'].join('')\n            },\n            'Kudos': {\n                descriptionLabel: 'What made you happy?:',\n                descriptionPlaceholder: ['We love to hear that you\\'re enjoying Encore! ',\n                                         'Tell us what you like, and what we can do to ',\n                                         'make it even better'].join('')\n            }\n        };\n\n        it('should have all feedback types', function () {\n            var types = [defaultFeedback].concat(_.keys(typesAndLabels));\n            expect(successfulFeedback.types).to.eventually.eql(types);\n        });\n\n        _.forEach(typesAndLabels, function (typeData, type) {\n            it('should switch feedback types', function () {\n                successfulFeedback.type = type;\n                expect(successfulFeedback.type).to.eventually.equal(type);\n            });\n\n            _.forEach(typeData, function (text, property) {\n                it('should have the correct label set for ' + property, function () {\n                    expect(successfulFeedback[property]).to.eventually.equal(text);\n                });\n            });\n\n        });\n\n    });\n\n    describe('submitting feedback', function () {\n\n        it('should successfully submit feedback', function () {\n            var send = function () {\n                var deferred = protractor.promise.defer();\n                deferred.fulfill(successfulFeedback.send('Software Bug', 'test', 3000));\n                return deferred.promise;\n            };\n            expect(send()).to.not.be.rejectedWith(Error);\n        });\n\n        it('should catch errors on unsuccessful feedback', function () {\n            var send = function () {\n                var deferred = protractor.promise.defer();\n                deferred.fulfill(unsuccessfulFeedback.send('Software Bug', 'test', 3000));\n                return deferred.promise;\n            };\n            browser.sleep(2000);\n            expect(send()).to.be.rejectedWith(Error);\n        });\n\n    });\n\n});\n"
        }
    },
    {
        "name": "rxForm",
        "moduleName": "'encore.ui.rxForm'",
        "displayName": "Rx Form",
        "srcFiles": [
            "src/rxForm/rxForm.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [
            "templates/rxForm/templates/rxFormFieldset.html",
            "templates/rxForm/templates/rxFormItem.html",
            "templates/rxForm/templates/rxFormOptionTable.html"
        ],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\" title=\"\" /></a></p>\n\n<p>The rxForm component is a set of directives used to create forms throughout Encore. These directives provide a common HTML layout and style for all form elements, which helps ensure form accessibility and makes creating new forms easier.</p>\n\n<h1>Directives</h1>\n\n<h2>rxFormItem</h2>\n\n<p>Creates a field row wrapped in a label. Used for fields which include a single input/field.</p>\n\n<h2>rxFormFieldset</h2>\n\n<p>Creates a field row wrapped in a fieldset. Used for fields which include multiple inputs (e.g. rxFormOptionTable).</p>\n\n<h2>rxFormOptionTable</h2>\n\n<p>Given an data object and an additional optional object for column labels, rxFormOptionTable creates a series of radio or checkbox buttons. </p>\n\n<h3>Attributes</h3>\n\n<ul>\n<li><code>type</code>: Values <code>radio</code> or <code>checkbox</code> are required.</li>\n<li><code>required</code>: For checkboxes, a <code>true</code> value means there must be at least one checkbox checked.</li>\n<li><code>columns</code>: A data object listing column copy, include labels and keys. Expressions are allowed; see the samples.</li>\n<li><code>data</code>: A data object to prefill the radio/checkbox collection. For checkboxes, checked values default to true unless <code>value</code> and <code>falseValue</code> attributes are given. See the samples.</li>\n<li><code>model</code>: The AngularJS model to tie all radios/checkboxes together.</li>\n<li><code>field-id</code>: The ID of the elements.</li>\n<li><code>empty-message</code>: (string) A default message if the data attribute is empty. </li>\n</ul>",
            "js": "function rxFormDemoCtrl ($scope) {\n    $scope.types = [\n        {\n            'value': 'SATA',\n            'label': 'SATA'\n        },\n        {\n            'value': 'SSD',\n            'label': 'SSD'\n        },\n        {\n            'value': 'CD',\n            'label': 'CD'\n        },\n        {\n            'value': 'DVD',\n            'label': 'DVD'\n        },\n        {\n            'value': 'BLURAY',\n            'label': 'BLURAY'\n        },\n        {\n            'value': 'TAPE',\n            'label': 'TAPE'\n        },\n        {\n            'value': 'FLOPPY',\n            'label': 'FLOPPY'\n        },\n        {\n            'value': 'LASERDISC',\n            'label': 'LASERDISC'\n        },\n        {\n            'value': 'JAZDRIVE',\n            'label': 'JAZDRIVE'\n        },\n        {\n            'value': 'PUNCHCARDS',\n            'label': 'PUNCHCARDS'\n        },\n        {\n            'value': 'RNA',\n            'label': 'RNA'\n        }\n    ];\n\n    $scope.volume = {\n        isNameRequired: true,\n        type: _.first($scope.types).value, // select the first type by default\n        checked: [true, 'unchecked'] //example with first checkbox automatically checked\n    };\n\n    $scope.yesOptionDescription = '<b>This</b> is HTML that included in the JS';\n\n    $scope.optionTableData = [\n        {\n            'name': 'Option #1',\n            'value': 0,\n            'obj': {\n                'name': 'Nested Name 1'\n            }\n        }, {\n            'name': 'Option #2',\n            'value': 1,\n            'obj': {\n                'name': 'Nested Name 2'\n            }\n        }, {\n            'name': 'Option #3',\n            'value': 2,\n            'obj': {\n                'name': 'Nested Name 3'\n            }\n        }\n    ];\n\n    $scope.optionTableColumns = [{\n        'label': 'Name',\n        'key': 'name',\n        'selectedLabel': '(Already saved data)'\n    }, {\n        'label': 'Static Content',\n        'key': 'Some <strong>Text &</strong> HTML'\n    }, {\n        'label': 'Expression 2',\n        'key': '{{ value * 100 | number:2 }}'\n    }, {\n        'label': 'Expression 3',\n        'key': '{{ obj.name | uppercase }}'\n    }, {\n        'label': 'Expression 4',\n        'key': '{{ value | currency }}'\n    }];\n\n    $scope.optionTableCheckboxData = [{\n        'name': 'Item 1'\n    }, {\n        'name': 'Item 2',\n        'value': 'checked',\n        'falseValue': 'unchecked'\n    }];\n\n    $scope.optionTableEmptyData = [];\n\n    $scope.compressedLayout = { value: false };\n}\n",
            "html": "<div class=\"forms rx-form\" ng-controller=\"rxFormDemoCtrl\" ng-class=\"{'layout-compressed': compressedLayout.value}\">\n    <rx-form-item label=\"Switch to Compressed Layout\">\n        <input type=\"checkbox\" ng-model=\"compressedLayout.value\" />\n    </rx-form-item>\n    <h3 class=\"title\">Text inputs</h3>\n\n    <rx-form-item label=\"Plain textbox\">\n        <input type=\"text\" />\n    </rx-form-item>\n\n    <rx-form-item label=\"Text area\">\n        <textarea rows=\"10\" cols=\"50\"></textarea>\n    </rx-form-item>\n\n    <h4 class=\"title sm\">Example of required text input w/ validation pattern</h4>\n    <rx-form-item label=\"Volume Name\" description=\"Must be 2-5 letter palindrome (e.g. 'dewed')\">\n        <input type=\"text\" ng-model=\"volume.name\" ng-required=\"volume.isNameRequired\" ng-pattern=\"/^\\b(\\w)?(\\w)\\w?\\2\\1$/\" />\n    </rx-form-item>\n\n    <rx-form-item label=\"Require Name?\" description=\"Check and uncheck with empty volume name to see border\">\n        <input type=\"checkbox\" ng-model=\"volume.isNameRequired\" />\n    </rx-form-item>\n\n    <p class=\"clear\">Bound Value: {{volume.name}}</p>\n\n    <h4 class=\"title sm\">Example with prefix/suffix</h4>\n    <rx-form-item label=\"Monthly Cost\" prefix=\"$\" suffix=\"million\">\n        <input type=\"number\" ng-model=\"volume.cost\" />\n    </rx-form-item>\n\n    <hr>\n\n    <h3 class=\"title\">Select Boxes</h3>\n    <rx-form-item label=\"Type\" description=\"Bound Value: {{volume.type}}\">\n        <span class=\"field-select\">\n            <select ng-model=\"volume.type\" ng-required=\"true\">\n                <option\n                    ng-repeat=\"type in types\"\n                    value=\"{{type.value}}\"\n                    ng-selected=\"{{type.value == model}}\"\n                    >{{type.label}}</option>\n            </select>\n        </span>\n    </rx-form-item>\n\n    <hr>\n\n    <h3 class=\"title\">rxFormOptionTable</h3>\n\n    <rx-form-fieldset legend=\"Option Table (radio w/full-width class)\">\n        <rx-form-option-table\n            data=\"optionTableData\"\n            columns=\"optionTableColumns\"\n            type=\"radio\"\n            model=\"volume.data\"\n            field-id=\"optionTable\"\n            selected=\"0\"\n            class=\"full-width\"\n            ></rx-form-option-table>\n    </rx-form-fieldset>\n\n    <p>Bound Value: {{volume.data}}</p>\n\n    <rx-form-fieldset legend=\"Option Table (checkboxes)\">\n        <rx-form-option-table\n            columns=\"optionTableColumns\"\n            type=\"checkbox\"\n            model=\"volume.checked\"\n            field-id=\"optionCheckboxTable\"\n            data=\"optionTableCheckboxData\"\n            required=\"true\"\n            ></rx-form-option-table>\n    </rx-form-fieldset>\n\n    <p>Item 1 Value: {{volume.checked[0]}}</p>\n    <p>Item 2 Value: {{volume.checked[1]}}</p>\n\n    <rx-form-fieldset legend=\"Option Table (empty)\">\n        <rx-form-option-table\n            columns=\"optionTableColumns\"\n            type=\"checkbox\"\n            model=\"volume.checked\"\n            field-id=\"optionCheckboxTable\"\n            data=\"optionTableEmptyData\"\n            empty-message=\"You don't have any data!\"\n            ></rx-form-option-table>\n    </rx-form-fieldset>\n\n    <div class=\"form-actions\">\n        <button class=\"button submit\" type=\"submit\">\n            Submit Form\n        </button>\n\n        <button class=\"button cancel\" type=\"submit\">\n            Cancel\n        </button>\n    </div>\n\n</div>\n",
            "less": "@import 'vars';\n\n.inputBorderPadding() {\n    border: 1px solid @inputBorder;\n    padding: 3px 5px;\n}\n\n\n/*\n## Form Fields\n\nfield-prefix, field-suffix and field-description are all optional.\n\n```\n<div class=\"form-item\">\n    <label class=\"field-label\">\n        Monthly Cost:\n    </label>\n\n    <div class=\"field-content\">\n        <span class=\"field-prefix\">$</span>\n\n        <span class=\"field-input\">\n            <!-- Replace with desired form field -->\n            <input type=\"text\">\n        </span>\n\n        <span class=\"field-suffix\">Million</span>\n\n        <span class=\"field-description\">Any description goes here</span>\n    </label>\n</div>\n```\n\n### Fieldsets\n\n```\n<div class=\"form-item rx-form-fieldset\">\n    <fieldset>\n        <legend class=\"field-legend\">\n            Field Legend:\n        </legend>\n\n        <div class=\"field-input\">\n            <!-- Add form inputs here -->\n        </div>\n\n        <span class=\"field-description\">Description of Fields</span>\n    </fieldset>\n</div>\n```\n\n */\n.rx-form {\n    margin: 15px 0 0;\n}\n\n.form-item {\n    margin-top: 5px;\n    display: flex;\n    flex-wrap: nowrap;\n    align-items: baseline;\n}\n\n.text-area-label {\n    &.form-item {\n        align-items: flex-start;\n        -webkit-align-items: flex-start;\n        -moz-align-items: flex-start;\n    }\n}\n\n.rx-form-fieldset > fieldset {\n    width: 100%;\n    .full-width .option-table {\n        width: 100%;\n    }\n}\n\n.form-description,\n.form-item {\n    margin-bottom: 15px;\n}\n\n.field-label,\n.field-legend, {\n    color: @subduedTitle;\n    font-size: 1.1em;\n    flex: 0 0 @fieldLabelWidth;\n}\n\n.field-content {\n    display: flex;\n    flex: 1 auto;\n\n    -webkit-flex-flow: row wrap;\n    flex-flow: row wrap;\n    justify-content: flex-start;\n    align-items: center;\n\n    .field-prefix,\n    .field-suffix {\n        font-size: 1.2em;\n    }\n    .field-prefix {\n        margin-right: 5px;\n    }\n    .field-suffix {\n        margin-left: 5px;\n    }\n\n    .field-description {\n        flex: 1 100%;\n        font-size: 0.8em;\n        font-style: italic;\n        margin-top: 5px;\n    }\n}\n\n/*\n## Input fields\n\nAny input field can be placed inside an element with a class of 'field-input'.\n\n```\n<span class=\"field-input\">\n    <input type=\"text\">\n</span>\n```\n\n```\n<span class=\"field-input\">\n    <input type=\"checkbox\">\n</span>\n```\n */\n.field-input {\n    input,\n    select {\n        color: @inputColor;\n        font-size: 1.2em;\n\n        &.ng-valid.ng-dirty {\n            border-color: @inputBorderValid;\n        }\n\n        &.ng-invalid.ng-dirty {\n            border-color: @inputBorderInvalid;\n        }\n    }\n\n    input,\n    .field-select {\n        background: @white;\n        max-width: 100%;\n        box-sizing: border-box;\n    }\n\n    textarea {\n        .inputBorderPadding;\n        background-color: transparent;\n        width: 100%;\n        position: relative;\n        z-index: 2;\n    }\n\n    input {\n        width: @fieldInputWidth;\n        .inputBorderPadding;\n\n        &[type=\"number\"] {\n            width: @fieldInputNumberWidth;\n        }\n\n        &[type=\"radio\"],\n        &[type=\"checkbox\"] {\n            width: auto;\n            max-width: none;\n            font-size: 1em;\n            vertical-align: middle;\n        }\n    }\n}\n\n/*\n * @bugfix Input field is marked as invalid before a user has done anything on form\n * @browsers FF\n * @see http://stackoverflow.com/questions/17209057/firefox-draws-red-border-on-required-select-box\n */\n.ng-pristine .field-input .ng-invalid-required {\n    box-shadow: none;\n}\n\n/*\n## Dropdowns\nReplace default UI of select fields and adds custom border/arrow\n\n```\n<span class=\"field-select\">\n    <select>\n        <option value=\"1\">Option #1</option>\n        <option value=\"2\">Option #2</option>\n        <option value=\"3\">Option #3</option>\n        <option value=\"4\">Option #4</option>\n    </select>\n</span>\n```\n*/\n\n.field-select {\n    display: inline-block;\n    position: relative;\n    width: @fieldSelectWidth;\n\n    select {\n        width: 100%;\n        margin: 0;\n        border-radius: 0;\n        background: #fff;\n        border: none;\n        outline: none;\n        display: inline-block;\n        -webkit-appearance: none;\n        -moz-appearance: none;\n        appearance: none;\n        cursor: pointer;\n        .inputBorderPadding;\n    }\n\n    &:before {\n        // background so long text doesn't show behind caret\n        content: '';\n        right: 1px;\n        top: 1px;\n        width: 20px;\n        height: 90%;\n        background: #fff;\n        position: absolute;\n        pointer-events: none;\n        display: block;\n    }\n\n    &:after {\n        // down caret from font awesome\n        content: '\\f0d7';\n        font-family: FontAwesome;\n        font-size: 15px;\n        color: #aaa;\n        right: 10px;\n        top: 6px;\n        padding: 0;\n        position: absolute;\n        pointer-events: none;\n    }\n}\n\n// User select element in Account section of nav\n\n.rx-app-nav-item .field-select {\n    select {\n        background: #404140;\n        border: 1px solid #3a3a3a;\n    }\n    &:before {\n        background: #404140;\n    }\n    &:after {\n        right: 6px;\n        top: 4px;\n    }\n}\n\n.account-users {\n    float: right;\n    box-sizing: border-box;\n    width: 50%;\n    select {\n        border-radius: 0;\n    }\n}\n\n/*\n * @bugfix Because of '-moz-appearance: window', the border/padding is removed from the select box.\n * This adds it back\n * @see http://stackoverflow.com/questions/5912791/how-to-remove-the-arrow-from-a-select-tag-in-firefox\n */\n @-moz-document url-prefix() {\n    .field-select {\n        .inputBorderPadding;\n    }\n}\n\n.option-table {\n    // we want the table to not look ugly when stretched across the screen\n    width: auto;\n    // we also want a semi-consistent width\n    min-width: 40em;\n\n    td:not(.empty-data) {\n        // remove default padding from td's so that we can make the label take up the full room\n        padding: 0;\n    }\n    label {\n        // add padding to labels so they take up the entire cell's space\n        display: block;\n        padding: @tableCellPadding;\n        cursor: pointer;\n    }\n    .option-table-input {\n        text-align: center;\n        line-height: 0;\n    }\n    .current td {\n        color: #3AB661;\n    }\n    // @note KL: I'd like to stick with just adding the background to the <tr>, but\n    // we need to make the selector more specific to override the table-stripe styles.\n    .selected td {\n        background: @tableRowSelected;\n        border-color: #bad4bb;\n        // this 'double' makes it so that the border-color applies to the top border as well\n        // @see http://stackoverflow.com/questions/7942212/css-table-row-border-color-with-border-collapse\n        border-style: double;\n    }\n}\n\n/*\n## Submit buttons\n\n```\n<div class=\"form-actions\">\n    <button class=\"button submit\" type=\"submit\" disabled=\"disabled\">\n        Submit Form (Disabled)\n    </button>\n\n    <button class=\"button submit\" type=\"submit\">\n        Submit Form\n    </button>\n\n    <button class=\"button cancel\" type=\"submit\">\n        Cancel Form\n    </button>\n\n</div>\n\n```\n*/\n\n.form-actions {\n    padding: 20px 0;\n}\n\n.form-action {\n    // override default button styles\n    background: transparent;\n    margin: 0;\n    padding: 0;\n    border: 0;\n    cursor: pointer;\n    font-size: 1.2em;\n\n    &.submit {\n        color: @actionGreen;\n        margin-right: 1em;\n        &:hover,\n        &:focus {\n            color: @actionGreenHover;\n        }\n        &[disabled=\"disabled\"] {\n            color: @subduedText;\n            cursor: not-allowed;\n        }\n    }\n    &.cancel {\n        color: @subduedText;\n        &:hover,\n        &:focus {\n            color: @subduedTextHover;\n        }\n    }\n}\n\n\n/*\n## Compressed Layout\n\n```\n<div class=\"rx-form layout-compressed\">\n    <label class=\"field-label\">\n        Monthly Cost:\n    </label>\n</div>\n```\n*/\n\n.rx-form.layout-compressed {\n    .rx-form-row {\n        display: flex;\n        flex-wrap: nowrap;\n        flex: 1 auto;\n\n        .form-item {\n            padding: 0px 3px;\n            flex: 1;\n        }\n    }\n\n    .form-item {\n        display: block;\n\n        .field-input {\n            width: 100%;\n            display: block;\n\n            select,\n            textarea {\n                width: 100%;\n            }\n\n            input {\n                &:not([type=\"checkbox\"]),\n                &:not([type=\"radio\"]) {\n                    width: 100%;\n                }\n            }\n        }\n\n        .field-label,\n        .field-legend, {\n            font-size: 0.8em;\n            display: block;\n        }\n\n    }\n\n    // This is selecting based off of the element so that we can be sure to set\n    // this if there is a prefix OR a suffix set. We can't assume they'll both\n    // always be there.\n    rx-form-item[suffix],\n    rx-form-item[prefix] {\n        .field-input {\n            display: inline-block;\n            width: auto;\n        }\n    }\n}\n",
            "midway": "var Page = require('astrolabe').Page;\n\nvar rxFormPage = require('../rxForm.page.js').rxForm;\n\n// shortens the process of selecting form elements on the page object below\nvar elementByLabel = function (label) {\n    return $('rx-form-item[label=\"' + label + '\"]');\n};\n\n// an anonymous page object to prove that form filling works\nvar formPageObject = Page.create({\n\n    form: {\n        set: function (formData) {\n            rxFormPage.form.fill(this, formData);\n        }\n    },\n\n    txtPlainTextbox: {\n        get: function () {\n            return elementByLabel('Plain textbox').$('input');\n        }\n    },\n\n    plainTextbox: {\n        get: function () {\n            return this.txtPlainTextbox.getAttribute('value');\n        },\n        set: function (input) {\n            this.txtPlainTextbox.clear();\n            this.txtPlainTextbox.sendKeys(input);\n        }\n    },\n\n    chkRequireName: {\n        get: function () {\n            return elementByLabel('Require Name?').$('input');\n        }\n    },\n\n    requireName: {\n        get: function () {\n            return this.chkRequireName.isSelected();\n        },\n        set: function (enable) {\n            var checkbox = rxFormPage.checkbox.initialize(this.chkRequireName);\n            enable ? checkbox.check() : checkbox.uncheck();\n        }\n    },\n\n    selectBoxes: {\n        get: function () {\n            return Page.create({\n                selVolumes: {\n                    get: function () {\n                        return element(by.model('volume.type'));\n                    }\n                },\n\n                type: {\n                    get: function () {\n                        return rxFormPage.dropdown.initialize(this.selVolumes).selectedOption;\n                    },\n                    set: function (optionText) {\n                        rxFormPage.dropdown.initialize(this.selVolumes).select(optionText);\n                    }\n                }\n            });\n        }\n    }\n\n});\n\ndescribe('rxForm', function () {\n\n    before(function () {\n        demoPage.go('#/component/rxForm');\n    });\n\n    describe('form filling', function () {\n        var formData = {\n            plainTextbox: 'This is a plain textbox',\n            requireName: false,\n            selectBoxes: {\n                type: 'PUNCHCARDS'\n            }\n        };\n\n        before(function () {\n            formPageObject.form = formData;\n        });\n\n        it('should have filled the plainTextbox value', function () {\n            expect(formPageObject.plainTextbox).to.eventually.equal('This is a plain textbox');\n        });\n\n        it('should have unchecked the requireName checkbox', function () {\n            expect(formPageObject.requireName).to.eventually.be.false;\n        });\n\n        it('should have selected the volume type', function () {\n            expect(formPageObject.selectBoxes.type.text).to.eventually.equal('PUNCHCARDS');\n        });\n\n    });\n\n    describe('dropdown', function () {\n        var dropdown;\n\n        before(function () {\n            dropdown = rxFormPage.dropdown.initialize(element(by.model('volume.type')));\n        });\n\n        it('should have the right number of options', function () {\n            expect(dropdown.optionCount()).to.eventually.equal(11);\n        });\n\n        it('should have every option listed', function () {\n            var options = ['SATA', 'SSD', 'CD', 'DVD', 'BLURAY', 'TAPE', 'FLOPPY',\n                           'LASERDISC', 'JAZDRIVE', 'PUNCHCARDS', 'RNA'];\n            dropdown.allOptions.then(function (allOptions) {\n                expect(Object.keys(allOptions)).to.eql(options);\n            });\n        });\n\n        it('should have a selected option by default', function () {\n            expect(dropdown.selectedOption.isSelected()).to.eventually.be.true;\n        });\n\n        it('should not report a different option as selected', function () {\n            expect(dropdown.option('CD').isSelected()).to.eventually.be.false;\n        });\n\n        it('should report non-existing options', function () {\n            expect(dropdown.optionExists('DDR4')).to.eventually.be.false;\n        });\n\n        it('should report existing options', function () {\n            expect(dropdown.optionExists('PUNCHCARD')).to.eventually.be.true;\n        });\n\n        it('should select a new option', function () {\n            dropdown.select('DVD');\n            expect(dropdown.selectedOption.text).to.eventually.equal('DVD');\n        });\n\n        it('should have a value', function () {\n            expect(dropdown.selectedOption.value).to.eventually.equal('DVD');\n        });\n\n    });\n\n});\n"
        }
    },
    {
        "name": "rxIdentity",
        "moduleName": "'encore.ui.rxIdentity'",
        "displayName": "Rx Identity",
        "srcFiles": [
            "src/rxIdentity/rxIdentity.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\" title=\"\" /></a></p>\n\n<p>Service for authenticating with Rackspaces' Identity service</p>",
            "js": "/*jshint unused:false*/\nfunction rxIdentityCtrl ($scope, Identity) {\n    $scope.user = {};\n    $scope.login = function () {\n        $scope.toggle = true;\n        Identity.login($scope.user,\n            function (authToken) {\n                $scope.toggle = false;\n                alert('Congrats! Logged In');\n            },\n            function (error) {\n                $scope.toggle = false;\n                alert('Login attempt failed.');\n            });\n    };\n}\n",
            "html": "<!-- Example only works when running locally since rxIdentity requires a proxy -->\n<div ng-controller=\"rxIdentityCtrl\">\n    <form>\n        <label>Username:</label>\n        <input type=\"text\" name=\"username\" ng-model=\"user.username\" />\n        <label>Password:</label>\n        <input type=\"password\" name=\"password\" ng-model=\"user.password\" />\n        <rx-button toggle-msg=\"Authenticating\" default-msg=\"Login\"\n            toggle=\"toggle\" ng-click=\"login()\"></rx-button>\n    </form>\n</div>\n",
            "less": "",
            "midway": ""
        }
    },
    {
        "name": "rxInfoPanel",
        "moduleName": "'encore.ui.rxInfoPanel'",
        "displayName": "Rx Info Panel",
        "srcFiles": [
            "src/rxInfoPanel/rxInfoPanel.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [
            "templates/rxInfoPanel/templates/rxInfoPanel.html"
        ],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/experimental.svg\" alt=\"experimental\" title=\"\" /></a></p>\n\n<p>A generic info panel intended for use at the top of pages. For example:</p>\n\n<pre><code>&lt;rx-info-panel panel-title=\"My title!\"&gt;\n    You can put whatever you like in here.\n&lt;/rx-info-panel&gt;\n</code></pre>",
            "js": "",
            "html": "<!-- Sample HTML goes here as a live example of how to the component can be used -->\n<rx-info-panel panel-title=\"A Custom Title\">\n    You can put whatever content you want to inside here\n</rx-info-panel>\n",
            "less": "/*\n * rxInfoPanel\n */\n.info-panel {\n    clear: both;\n    background: #fff;\n    border-color: @tabBorder;\n    border-width: 0 5px 5px 5px;\n    border-style: solid;\n    padding: 0 10px 10px 10px;\n    overflow: hidden;\n\n    .info-title {\n        background: @tabBorder;\n        color: #fff;\n        width: 100%;\n        padding: 8px 10px;\n        margin: 0 0 10px -10px;\n    }\n}\n",
            "midway": "var rxInfoPanelPage = require('../rxInfoPanel.page.js').rxInfoPanel;\nvar expect = require('chai').use(require('chai-as-promised')).expect;\n\ndescribe('rxInfoPanel', function () {\n    var rxInfoPanel;\n\n    before(function () {\n        demoPage.go('#/component/rxInfoPanel');\n        rxInfoPanel = rxInfoPanelPage.initialize($('.info-panel'));\n    });\n\n    it('should show element', function () {\n        expect(rxInfoPanel.isDisplayed()).to.eventually.be.true;\n    });\n\n    it('should populate the title', function () {\n        expect(rxInfoPanel.title).to.eventually.equal('A Custom Title');\n    });\n});\n"
        }
    },
    {
        "name": "rxLocalStorage",
        "moduleName": "'encore.ui.rxLocalStorage'",
        "displayName": "Rx Local Storage",
        "srcFiles": [
            "src/rxLocalStorage/rxLocalStorage.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\" title=\"\" /></a></p>\n\n<p>Simple wrapper of the global session localStorage object for interacting with local storage.</p>",
            "js": "function rxLocalStorageCtrl ($scope, LocalStorage) {\n    $scope.setSideKick = function () {\n        LocalStorage.setObject('joker', { name: 'Harley Quinn' });\n    };\n\n    $scope.getSideKick = function () {\n        var sidekick = LocalStorage.getObject('joker');\n        alert(sidekick.name);\n    };\n}\n",
            "html": "<div ng-controller=\"rxLocalStorageCtrl\">\n    <label>Who is the Joker's side kick?</label>\n    <button ng-click=\"setSideKick()\" class=\"button button-positive\">Store Answer</button>\n    <button ng-click=\"getSideKick()\" class=\"button\">Answer?</button>\n</div>\n",
            "less": "",
            "midway": ""
        }
    },
    {
        "name": "rxLogout",
        "moduleName": "'encore.ui.rxLogout'",
        "displayName": "Rx Logout",
        "srcFiles": [
            "src/rxLogout/rxLogout.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [
            "rxAuth",
            "rxIdentity",
            "rxSession",
            "rxLocalStorage",
            "rxPermission",
            "rxSession",
            "rxLocalStorage"
        ],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/stable.svg\" alt=\"stable\" title=\"\" /></a></p>\n\n<p>Allows adding logout functionality to an element</p>",
            "js": "",
            "html": "<div>\n    <button rx-logout id=\"rxLogout\">Logout</button>\n    <button rx-logout=\"/overview\">Logout (with custom redirect)</button>\n</div>",
            "less": "",
            "midway": "var rxLogoutPage = require('../rxLogout.page.js').rxLogout;\n\ndescribe('rxLogout', function () {\n    var rxLogout;\n\n    before(function () {\n        demoPage.go('#/component/rxLogout');\n        rxLogout = rxLogoutPage.initialize($('#rxLogout'));\n    });\n\n    it('should show element', function () {\n        expect(rxLogout.isDisplayed()).to.eventually.be.true;\n    });\n\n    it('should redirect to logout/login page on click', function () {\n        rxLogout.logout();\n        expect(demoPage.currentUrl).to.eventually.contain('login');\n    });\n});\n"
        }
    },
    {
        "name": "rxModalAction",
        "moduleName": "'encore.ui.rxModalAction'",
        "displayName": "Rx Modal Action",
        "srcFiles": [
            "src/rxModalAction/rxModalAction.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [
            "templates/rxModalAction/templates/rxModalAction.html",
            "templates/rxModalAction/templates/rxModalActionForm.html"
        ],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/stable.svg\" alt=\"stable\" title=\"\" /></a></p>\n\n<p>This provides a hook into Angular-UI Bootstrap's modal directive. It's used as a link to open a modal window.The content inside the window is blank, however you can tie this with <code>&lt;rx-modal-form&gt;</code> to build a modal form window (including the modal title and submit/cancel buttons).</p>\n\n<p>This module has a dependency on <a href=\"http://angular-ui.github.io/bootstrap/\">Angular-UI Bootstrap</a>, so if it's going to be used, Bootstrap needs to be included in your webpage.</p>\n\n<h2>Template URL</h2>\n\n<p>Due to the complex nature of the information passed into modal windows, HTML is handled via a template (versus transcluding the content).</p>\n\n<p>One benefit is that this allows for multiple actions to re-use the same template. It also allows modal content to live in a separate file, which can be helpful for maintainability if the modal HTML is complex. While this can be done via <code>ng-include</code>, it would be a little extra work for a common scenario.</p>\n\n<h2>Pre/Post Hooks</h2>\n\n<p><code>rxModalAction</code> allows you to take actions before and after the modal window is shown. They are optional, and the modal window is fully functional without either being defined. Both are passed in as functions that are called on open and close of the modal window.</p>\n\n<h3>Pre-hook</h3>\n\n<p>Use a <code>pre-hook</code> to populate field information inside of the modal. This is useful when you have information you don't want loaded when the page is first opened, but do need for the modal. It's also useful for dynamic information that's based on actions taken</p>\n\n<h3>Post-hook</h3>\n\n<p>A <code>post-hook</code> is useful to take actions based upon input in the modal. For example, you can use the user input that gets entered to send API requests with specific JSON data. Or you can simply run a pre-defined API call (assuming the modal is a simple confirmation dialog).</p>\n\n<h2>rxModalForm</h2>\n\n<p>The <code>&lt;rx-modal-form&gt;</code> directive is helpful for providing a common format to forms inside modals (hence the name). It allows the following configurations:</p>\n\n<ul>\n<li>Title</li>\n<li>Subtitle</li>\n<li>isLoading\n<ul><li>whether the modal form should have a 'loading' message by default. This is usually tied in with a <code>pre-hook</code> to load data</li></ul></li>\n<li>submitText\n<ul><li>Override of the 'submit' button text</li></ul></li>\n<li><p>cancelText</p>\n\n<ul><li>Override of the 'cancel' button text</li></ul>\n\n<p>This directive also provides an 'autofocus' mechanism, which will move the keyboard focus cursor to the first 'tabbable' input available in the form.</p></li>\n</ul>",
            "js": "/*jshint unused:false*/\nfunction rxModalActionCtrl ($scope) {\n    $scope.password = 'guest';\n\n    $scope.populate = function (modalScope) {\n        modalScope.user = 'hey_dude';\n    };\n\n    $scope.changePass = function (fields) {\n        $scope.password = fields.password;\n    };\n}",
            "html": "<!-- Sample HTML goes here as a live example of how to the component can be used -->\n<div ng-controller=\"rxModalActionCtrl\">\n    <p>Password: {{password}}</p>\n    <rx-modal-action\n        pre-hook=\"populate(this)\"\n        post-hook=\"changePass(fields)\"\n        template-url=\"changePassword.html\">\n        Change Password\n    </rx-modal-action>\n\n    <p>\n        <rx-modal-action\n            pre-hook=\"populate(this)\"\n            post-hook=\"changePass(fields)\"\n            classes=\"button\"\n            template-url=\"changePassword.html\">\n            Change Password\n        </rx-modal-action>\n    </p>\n\n    <script type=\"text/ng-template\" id=\"changePassword.html\">\n        <rx-modal-form title=\"Change {{user}} Admin Password\" \n        submit-text=\"Submit Password\" \n        cancel-text=\"Cancel Request\"\n        subtitle=\"Please read instructions below\">\n            <h1>Password must:</h1>\n            <ul class=\"list\">\n                <li>have at least one uppercase letter</li>\n                <li>have at least one number</li>\n                <li>be inspirational</li>\n                <li>be in haiku form</li>\n                <li>reference Star Wars</li>\n            </ul>\n\n            <rx-form-item label=\"New Password\">\n                <input type=\"text\" name=\"password\" ng-model=\"fields.password\" required=\"true\">\n                <div class=\"error-message\" ng-show=\"modalActionForm.password.$error.required\">This field is required.</div>\n            </rx-form-item>\n        </rx-modal-form>\n    </script>\n</div>\n",
            "less": "@import 'mixins';\n@import 'vars';\n\n/**\n * rxModalAction.less\n *\n * Stylesheet for modals, repurposed from the modal component of http://angular-ui.github.io/bootstrap\n *\n * @version 1.0\n * @author Ernie Hsiung\n */\n\n.modal,\n.modal-backdrop {\n    .transition();\n    .opacity(0);\n    &.fade.in {\n        .opacity(1);\n    }\n}\n\n.modal-backdrop {\n    position: fixed;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    z-index: 1040;\n    background: #000;\n    &.fade.in {\n        .opacity(0.4);\n    }\n}\n\n.modal {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    z-index: 1050;\n    width: 560px;\n    padding-right: @modalPadding;\n    background: @white;\n    border: 1px solid rgba(0, 0, 0, 0.3);\n    transform: translate(-50%, -50%);\n    -webkit-transform: translate(-50%, -50%);\n    -moz-transform: translate(-50%, -50%);\n    .box-shadow(0 3px 7px rgba(0, 0, 0, 0.3));\n    .background-clip();\n    outline: none;\n}\n\n.modal-header {\n    padding: @modalPadding;\n    padding-right: 0;\n    border-bottom: 1px solid @pageDivider;\n    position: relative;\n\n    .modal-title {\n        line-height: 1;\n        font-size: 1.75em;\n        margin: 0;\n    }\n    .modal-subtitle {\n        line-height: 1.5;\n        font-size: 1em;\n        font-wieght: bold;\n        color: @subduedTitle;\n        margin: 0;\n    }\n    .modal-close {\n        position: absolute;\n        top: @modalPadding;\n        right: 0;\n        font-size: 2em;\n        width: 1em;\n        height: 1em;\n        text-align: center;\n        color: @closeText;\n        &:hover,\n        &:focus {\n            color: @closeTextHover;\n        }\n\n        &:before {\n            content: '\\00D7';\n            position: absolute;\n            line-height: 0;\n            right: 0;\n            width: 1em;\n        }\n    }\n}\n.modal-body {\n    position: relative;\n    overflow-y: auto;\n    max-height: 400px;\n    padding: @modalBodyPadding @modalPadding;\n\n    .loading {\n        margin: 0 auto;\n        width: 1em;\n    }\n\n    .form-radio {\n        border: 0;\n    }\n\n    .rx-form.modal-form {\n        margin: 0;\n    }\n}\n\n.modal-footer {\n    padding: @modalPadding;\n    border-top: 1px solid @pageDivider;\n}\n\n@media (max-width:480px) {\n    @padding: 10px;\n    .modal {\n        position: absolute;\n        top: @padding;\n        left: @padding;\n        right: @padding;\n    }\n    .modal-header .close{\n        padding: @padding;\n        margin: -@padding;\n    }\n}",
            "midway": "var modal = require('../rxModalAction.page.js').rxModalAction;\n\ndescribe('rxModalAction', function () {\n    var changePasswordModal, triggerModal;\n\n    before(function () {\n        demoPage.go('#/component/rxModalAction');\n        triggerModal = function () {\n            $('.component-demo .modal-link').click();\n        };\n\n        var customFunctionalty = {\n            txtNewPassword: {\n                get: function () {\n                    return this.rootElement.element(by.model('fields.password'));\n                }\n            },\n\n            txtErrorMessage: {\n                get: function () {\n                    return this.rootElement.$('.error-message');\n                }\n            },\n\n            newPassword: {\n                get: function () {\n                    return this.txtNewPassword.getAttribute('value');\n                },\n                set: function (password) {\n                    this.txtNewPassword.clear();\n                    this.txtNewPassword.sendKeys(password);\n                }\n            }\n        };\n\n        changePasswordModal = modal.initialize(customFunctionalty);\n    });\n\n    it('should not display the modal unless triggered', function () {\n        expect(changePasswordModal.isDisplayed()).to.eventually.be.false;\n    });\n\n    it('should display the modal when triggered', function () {\n        triggerModal();\n        expect(changePasswordModal.isDisplayed()).to.eventually.be.true;\n    });\n\n    it('should close the modal using the little X in the corner', function () {\n        changePasswordModal.close();\n        expect(changePasswordModal.isDisplayed()).to.eventually.be.false;\n    });\n\n    it('should close the modal when clicking the \"cancel\" button', function () {\n        triggerModal();\n        changePasswordModal.cancel();\n        expect(changePasswordModal.isDisplayed()).to.eventually.be.false;\n    });\n\n    it('should have a title', function () {\n        triggerModal();\n        expect(changePasswordModal.title).to.eventually.equal('Change hey_dude Admin Password');\n    });\n\n    it('should have a subtitle', function () {\n        expect(changePasswordModal.subtitle).to.eventually.equal('Please read instructions below');\n    });\n\n    it('should have a custom submit button', function () {\n        expect(changePasswordModal.btnSubmit.getText()).to.eventually.equal('Submit Password');\n    });\n\n    it('should have a custom cancel button', function () {\n        expect(changePasswordModal.btnCancel.getText()).to.eventually.equal('Cancel Request');\n    });\n\n    it('should not let me submit the modal by default', function () {\n        expect(changePasswordModal.canSubmit()).to.eventually.be.false;\n    });\n\n    it('should show a validation error message by default', function () {\n        expect(changePasswordModal.txtErrorMessage.isDisplayed()).to.eventually.be.true;\n    });\n\n    it('should let me submit the modal when a new password is entered', function () {\n        changePasswordModal.newPassword = 'hunter2';\n        expect(changePasswordModal.canSubmit()).to.eventually.be.true;\n    });\n\n    it('should hide the validation error message when a new password is entered', function () {\n        expect(changePasswordModal.txtErrorMessage.isDisplayed()).to.eventually.be.false;\n    });\n\n    it('should submit', function () {\n        changePasswordModal.submit();\n        expect(changePasswordModal.isDisplayed()).to.eventually.be.false;\n    });\n\n    describe('default modal behavior', function () {\n        var defaultModal;\n\n        before(function () {\n            defaultModal = modal.initialize();\n        });\n\n        it('should support basic functionality without supplying any arguments', function () {\n            triggerModal();\n            expect(defaultModal.title).to.eventually.equal('Change hey_dude Admin Password');\n            defaultModal.cancel();\n        });\n\n    });\n\n});\n"
        }
    },
    {
        "name": "rxNotify",
        "moduleName": "'encore.ui.rxNotify'",
        "displayName": "Rx Notify",
        "srcFiles": [
            "src/rxNotify/rxNotify.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [
            "templates/rxNotify/templates/rxNotification.html",
            "templates/rxNotify/templates/rxNotifications.html"
        ],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/stable.svg\" alt=\"stable\" title=\"\" /></a></p>\n\n<p>Service (rxNotify) and Directives (rxNotification and rxNotifications) for displaying status messages on a page.</p>\n\n<h2>Using rxNotification as a State Message</h2>\n\n<p>There may be situations where you will need to use the styling/markup of rxNotify's messaging queue in status messages of your own - for example, a modal window which asks if you want to delete an object, with the appropriate warning or error flags. If this is the case, we recommend using the <code>rx-notification</code> directive in your views (note difference of <code>rx-notifications</code>.</p>\n\n<blockquote>\n  <p><code>&lt;rx-notification type=\"warn\"&gt;This is warning message!&lt;/rx-notification&gt;</code></p>\n</blockquote>\n\n<p>For all values of warn, please look below under Message options, under <code>type</code>.</p>\n\n<h2>Adding a New Message Queue via rxNotify</h2>\n\n<p>To add a new message to a stack, inject 'rxNotify' into your function and run:</p>\n\n<blockquote>\n  <p><code>rxNotify.add('My Message Text');</code></p>\n</blockquote>\n\n<p>This will add a new message to the default stack ('page') with all default options set. To customize options, pass in an object as the second argument with you specific options set:</p>\n\n<blockquote>\n  <p><code>rxNotify.add('My Message Text', {</code></p>\n  \n  <blockquote>\n    <p><code>stack: 'custom',</code></p>\n    \n    <p><code>type: 'warning'</code></p>\n  </blockquote>\n  \n  <p><code>});</code></p>\n</blockquote>\n\n<h2>Message options</h2>\n\n<hr />\n\n<ul>\n<li><p><strong><code>type</code></strong>: <em>Message type.</em></p>\n\n<blockquote>\n  <p>Default: <code>'info'</code></p>\n</blockquote>\n\n<p><em>Other values</em>: <code>'warn'</code>, <code>'error'</code>, <code>'success'</code></p></li>\n</ul>\n\n<hr />\n\n<ul>\n<li><p><strong><code>timeout</code></strong>: <em>Time (in seconds) for message to appear.</em></p>\n\n<blockquote>\n  <p>Default: <code>-1</code> (Message displays indefinitely)</p>\n</blockquote>\n\n<p><em>Other values</em>: Any positive integer</p></li>\n</ul>\n\n<hr />\n\n<ul>\n<li><p><strong><code>dismissable</code></strong>: <em>Whether a user can dismiss the message via an 'x' icon.</em></p>\n\n<blockquote>\n  <p>Default: <code>true</code></p>\n</blockquote>\n\n<p><em>Other values</em>: <code>false</code></p></li>\n</ul>\n\n<hr />\n\n<ul>\n<li><p><strong><code>repeat</code></strong>: <em>Whether the message should be allowed to appear more than once in the stack.</em></p>\n\n<blockquote>\n  <p>Default: <code>true</code></p>\n</blockquote>\n\n<p><em>Other values</em>: <code>false</code></p></li>\n</ul>\n\n<hr />\n\n<ul>\n<li><p><strong><code>loading</code></strong> <em>Replaces type icon with spinner. Removes option for use to dismiss message.</em></p>\n\n<blockquote>\n  <p>Default: <code>false</code></p>\n</blockquote>\n\n<p><em>Other values</em>: <code>true</code></p>\n\n<p>You usually want to associate this with a 'dismiss' property.</p>\n\n<p><strong>Example</strong>:</p>\n\n<blockquote>\n  <p><code>rxNotify.add('Loading', {</code></p>\n  \n  <blockquote>\n    <p><code>loading: true,</code></p>\n    \n    <p><code>dismiss: [$scope, 'loaded']</code></p>\n  </blockquote>\n  \n  <p><code>});</code></p>\n  \n  <p><code>var apiCallback = function (data) {</code></p>\n  \n  <blockquote>\n    <p><code>$scope.loaded = true;</code></p>\n    \n    <p><code>// do something with the data</code></p>\n  </blockquote>\n  \n  <p><code>}</code></p>\n  \n  <p><code>myApiCall(apiCallback);</code></p>\n</blockquote></li>\n</ul>\n\n<hr />\n\n<ul>\n<li><p><strong><code>show</code></strong>: <em>When to have the message appear.</em></p>\n\n<blockquote>\n  <p>Default: <code>'immediate'</code></p>\n</blockquote>\n\n<p><em>Other values:</em></p>\n\n<blockquote>\n  <p><code>'next'</code>: Show message after the next route change</p>\n  \n  <p><code>[scope, 'property']</code>:</p>\n  \n  <blockquote>\n    <p>Pass in a property on a scope to watch for a change. When the property value equals true, the message is shown.</p>\n  </blockquote>\n</blockquote>\n\n<p><strong>Example</strong>:</p>\n\n<blockquote>\n  <p><code>$scope.loaded = false;</code></p>\n  \n  <p><code>rxNotify.add('Content loaded!', {</code></p>\n  \n  <blockquote>\n    <p><code>show: [$scope, 'loaded']</code></p>\n  </blockquote>\n  \n  <p><code>});</code></p>\n  \n  <p><code>$timeout(function () {</code></p>\n  \n  <blockquote>\n    <p><code>$scope.loaded = true;</code></p>\n  </blockquote>\n  \n  <p><code>}, 1500);</code></p>\n</blockquote></li>\n</ul>\n\n<hr />\n\n<ul>\n<li><p><strong><code>dismiss</code></strong>: <em>When to have the message disappear.</em></p>\n\n<blockquote>\n  <p>Default: <code>'next'</code> (Dismiss message after the next route change)</p>\n</blockquote>\n\n<p><em>Other values:</em></p>\n\n<blockquote>\n  <p><code>[scope, 'property']</code>:</p>\n  \n  <blockquote>\n    <p>Pass in a property on a scope to watch for a change. When the property value equals true, the message is dismissed.</p>\n  </blockquote>\n</blockquote>\n\n<p><strong>Example</strong>:</p>\n\n<blockquote>\n  <p><code>$scope.loaded = false;</code></p>\n  \n  <p><code>rxNotify.add('Loading Content', {</code></p>\n  \n  <blockquote>\n    <p><code>dismiss: [$scope, 'loaded']</code></p>\n  </blockquote>\n  \n  <p><code>});</code></p>\n  \n  <p><code>$timeout(function () {</code></p>\n  \n  <blockquote>\n    <p><code>$scope.loaded = true;</code></p>\n  </blockquote>\n  \n  <p><code>}, 1500);</code></p>\n</blockquote></li>\n</ul>\n\n<hr />\n\n<ul>\n<li><p><strong><code>stack</code></strong>: <em>Which message stack the message gets added to.</em></p>\n\n<blockquote>\n  <p>Default: <code>'page'</code></p>\n  \n  <p><em>Other values:</em> Any string</p>\n</blockquote>\n\n<p><strong>Example</strong>:</p>\n\n<blockquote>\n  <p><code>rxNotify.add('Username required', {</code></p>\n  \n  <blockquote>\n    <p><code>type: 'error',</code></p>\n    \n    <p><code>stack: 'loginForm'</code></p>\n  </blockquote>\n  \n  <p><code>});</code></p>\n  \n  <p><code>&lt;rx-notifications stack=\"loginForm\"&gt;&lt;/rx-notifications&gt;</code></p>\n</blockquote></li>\n</ul>\n\n<hr />\n\n<h2>Dismissing a message programatically</h2>\n\n<p>Most messages are dismissed either by the user, a route change or using the custom 'dismiss' property.</p>\n\n<p>If you need to dismiss a message programmaticaly, you can run <strong><code>rxNotify.dismiss(message)</code></strong>, where message is the message object to dismiss.</p>\n\n<p>If you don't have the full message object, passing in the Message ID (which is returned from <strong><code>rxNotify.add</code></strong>) and the stack the message is in: <strong><code>rxNotify.dismiss('42', 'page')</code></strong>.</p>\n\n<h2>Stacks</h2>\n\n<p>Stacks are just separate notification areas. Normally, all messages created will go to the 'page' stack, which should be displayed at the top of the page. It's used for page-level messages.</p>\n\n<p>You can also create custom stacks for speficic notification areas. Say you have a form on your page that you want to add error messages to. You can create a custom stack for this form and send form-specific messages to it.</p>\n\n<h2>Using the Page Stack</h2>\n\n<p>The default notification stack is added by default to the page template, so it should be ready to use without any work (unless the app uses a custom template). The HTML to add the default stack to the page is:</p>\n\n<blockquote>\n  <p><code>&lt;rx-notifications&gt;&lt;/rx-notifications&gt;</code></p>\n</blockquote>\n\n<p>Note that a 'stack' attribute does not need to be defined.</p>\n\n<h2>Creating a Custom Stack</h2>\n\n<p>See 'stack' under 'Message options'</p>\n\n<h2>Clearing all messages in a stack</h2>\n\n<p>You can clear all messages in a specific stack programmatically via the <strong><code>rxNotify.clear</code></strong> function. Simply pass in the name of the stack to clear: <strong><code>rxNotify.clear('page')</code></strong>.</p>\n\n<h2>rxPromiseNotifications</h2>\n\n<p>It's a common pattern with API requests that you'll show a loading message, followed by either a success or failure message depending on the result of the call. rxPromiseNotifications is the service created for this pattern. See the API docs for more information on how to call/use rxPromiseNotifications.</p>",
            "js": "/*jshint unused:false*/\n\nfunction rxNotifyCtrl ($rootScope, $scope, rxNotify, rxPromiseNotifications, $q) {\n    $scope.message = 'My message';\n\n    $scope.options = {\n        type: 'info',\n        timeout: -1,\n        dismissable: true,\n        show: 'immediate',\n        repeat: true\n    };\n\n    $scope.routeChange = function (stack) {\n        $rootScope.$broadcast('$routeChangeStart', {});\n        $rootScope.$broadcast('$routeChangeSuccess', {});\n    };\n\n    $scope.add = function (stack) {\n        var messageOptions = _.clone($scope.options);\n        messageOptions.stack = stack;\n\n        rxNotify.add($scope.message, messageOptions);\n    };\n\n    // add a default messages (to custom stack so they don't show on the main page)\n    rxNotify.add('Helpful Information', {\n        stack: 'demo'\n    });\n    rxNotify.add('Loading', {\n        loading: true,\n        stack: 'demo'\n    });\n    rxNotify.add('You did it!', {\n        type: 'success',\n        stack: 'demo'\n    });\n    rxNotify.add('Careful now...', {\n        type: 'warning',\n        stack: 'demo'\n    });\n    rxNotify.add('Under Attack by Aliens', {\n        type: 'error',\n        stack: 'custom'\n    });\n\n    // stuff for rxPromiseNotifications\n    $scope.addPromise = function () {\n        $scope.deferred = $q.defer();\n\n        var promiseScope = rxPromiseNotifications.add($scope.deferred.promise, {\n            loading: 'Loading Message',\n            success: 'Success Message',\n            error: 'Error Message'\n        }, 'demo');\n    };\n}\n",
            "html": "<!-- Sample HTML goes here as a live example of how to the component can be used -->\n<div ng-controller=\"rxNotifyCtrl\">\n    <div class=\"form-item\">\n        <label>Message text: <input type=\"text\" ng-model=\"message\" /></label>\n    </div>\n\n    <div class=\"form-item\">\n        <label>Timeout (in seconds): <input type=\"text\" ng-model=\"options.timeout\" /></label>\n    </div>\n\n    <div class=\"form-item\">\n        <fieldset>\n            <legend>Type:</legend>\n            <label><input type=\"radio\" name=\"notify-type\" ng-model=\"options.type\" value=\"info\" /> Info</label>\n            <label><input type=\"radio\" name=\"notify-type\" ng-model=\"options.type\" value=\"success\" /> Success</label>\n            <label><input type=\"radio\" name=\"notify-type\" ng-model=\"options.type\" value=\"warning\" /> Warning</label>\n            <label><input type=\"radio\" name=\"notify-type\" ng-model=\"options.type\" value=\"error\" /> Error</label>\n        </fieldset>\n    </div>\n\n    <div class=\"form-item\">\n        <fieldset>\n            <legend>Show:</legend>\n            <label><input type=\"radio\" name=\"notify-show\" ng-model=\"options.show\" value=\"immediate\" /> Immediately</label>\n            <label><input type=\"radio\" name=\"notify-show\" ng-model=\"options.show\" value=\"next\" /> Next</label>\n        </fieldset>\n    </div>\n\n    <div class=\"form-item\">\n        <label>Repeat: <input type=\"checkbox\" ng-model=\"options.repeat\" /></label>\n    </div>\n\n    <div class=\"form-item\">\n        <label>Dismissable (by user): <input type=\"checkbox\" ng-model=\"options.dismissable\" /></label>\n    </div>\n\n    <div class=\"form-item\">\n        <label>Loading? (shows spinner): <input type=\"checkbox\" ng-model=\"options.loading\" /></label>\n    </div>\n\n    <div>\n        <button class=\"button\" ng-click=\"add('demo')\">Add to Demo Stack</button>\n        <button class=\"button\" ng-click=\"add('custom')\">Add to Custom Stack</button>\n    </div>\n\n    <div>\n        <h3>rxPromiseNotifications</h3>\n        <button class=\"button\" ng-click=\"addPromise()\">Create messages</button>\n        <button class=\"button button-positive\" ng-click=\"deferred.resolve();\">Resolve Promise</button>\n        <button class=\"button button-negative\" ng-click=\"deferred.reject();\">Reject Promise</button>\n    </div>\n\n    <div>\n        <button class=\"button\" ng-click=\"routeChange()\">Simulate Route Change</button>\n    </div>\n\n    <div class=\"pure-g\">\n        <div class=\"pure-u-1-2\">\n            <h2>Demo Stack</h2>\n            <rx-notifications stack=\"demo\"></rx-notifications>\n        </div>\n\n        <div class=\"pure-u-1-2\">\n            <h2>Custom Stack</h2>\n            <rx-notifications stack=\"custom\"></rx-notifications>\n        </div>\n    </div>\n\n    <p>Using rx-notification</p>\n\n    <rx-notification type=\"error\">Hello, world!</rx-notification>\n    <rx-notification type=\"warning\">Hello, world!</rx-notification>\n    <rx-notification type=\"info\">Hello, world!</rx-notification>\n</div>\n",
            "less": "@import 'mixins';\n\n/*\n# rxNotify\n\nNote: **Styledocco will not display the images associated with the notification bars.** Please reference the main Encore demo to view this. The class `rx-notifications` is a container div, and is required.\n\nIn the second example we added `<button class=\"notification-dismiss btn-link\">&times;</button>` to add a dismiss marker. If you are not using Encore UI's angular.js directives, it's up to you to flesh out this functionality.\n\nNote that `<rx-app></rx-app>` uses the `<rx-notifications>` directive, where each individual status message has the class `animate-fade`. This class uses CSS3 animations and requires the `ngAnimate` module which adds `ng-enter` and `ng-leave` classes as the element appears and dissapears. The `<rx-notification>` directive does not include the animation class.\n\n```\n<div class=\"rx-notifications\">\n    <div class=\"rx-notification animate-fade notification-error\">\n        Error Message\n    </div>\n\n    <div class=\"rx-notification animate-fade notification-error\">\n        Error Message\n        <button class=\"notification-dismiss btn-link\">&times;</button>\n    </div>\n\n    <div class=\"rx-notification animate-fade notification-info\">\n        Informational Message\n    </div>    \n\n    <div class=\"rx-notification animate-fade notification-info notification-loading\">\n        <div class=\"rx-spinner\"></div>\n        Loading\n    </div>\n\n    <div class=\"rx-notification animate-fade notification-success\">\n        Success Message\n    </div>\n\n    <div class=\"rx-notification animate-fade notification-warning\">\n        Warning Message\n    </div>\n</div>\n```\n*/\n\n.rx-notifications {\n    margin-bottom: 1.5em;\n\n    .rx-notification {\n        clear: both;\n        font-weight: 800;\n        font-size: 1.2em;\n        padding: 10px 50px;\n        margin-bottom: 2px;\n        position: relative;\n        background: no-repeat 18px 50%;\n\n        &.notification-success {\n            background-color: #ddffd3;\n            background-image: url('images/green-checkmark-circled.png');\n            color: #45ad26;\n        }\n        &.notification-info {\n            background-color: #83c9fe;\n            background-image: url('images/info-circled.png');\n            color: #1672b9;\n        }\n        &.notification-warning {\n            background-color: #ffa61b;\n            background-image: url('images/warning-triangle.png');\n            color: #fff;\n        }\n        &.notification-error {\n            background-color: #f21a1a;\n            background-image: url('images/error-stop.png');\n            color: #fff;\n        }\n        &.notification-loading {\n            // Hide icon since it's replaced by spinner\n            background-image: none;\n            .rx-spinner {\n                position: absolute;\n                left: 19px;\n                top: 50%;\n                margin-top: -9px;\n            }\n        }\n    }\n\n    .notification-dismiss {\n        position: absolute;\n        right: 0;\n        top: 0;\n        height: 100%;\n        padding: 0 15px;\n        content: '\\00D7';\n        .opacity(.2);\n        color: #000;\n        &:hover,\n        &:focus {\n            .opacity(.5);\n            text-decoration: none;\n        }\n    }\n}\n\n.animate-fade.ng-enter,\n.animate-fade.ng-leave {\n    -webkit-transition: 0.25s cubic-bezier(0.250, 0.250, 0.750, 0.750) all;\n    -moz-transition: 0.25s cubic-bezier(0.250, 0.250, 0.750, 0.750) all;\n    -ms-transition: 0.25s cubic-bezier(0.250, 0.250, 0.750, 0.750) all;\n    -o-transition: 0.25s cubic-bezier(0.250, 0.250, 0.750, 0.750) all;\n    transition: 0.25s cubic-bezier(0.250, 0.250, 0.750, 0.750) all;\n    -webkit-animation-fill-mode: both;\n    animation-fill-mode: both;\n}\n\n.animate-fade.ng-leave.ng-leave-active,\n.animate-fade.ng-enter {\n    opacity:0;\n}\n\n.animate-fade.ng-leave,\n.animate-fade.ng-enter.ng-enter-active {\n    opacity:1;\n}\n",
            "midway": "var _ = require('lodash');\n\nvar notifications = require('../rxNotify.page.js').rxNotify;\n\ndescribe('rxNotify', function () {\n\n    before(function () {\n        demoPage.go('#/component/rxNotify');\n    });\n\n    describe('auto dismissal', function () {\n        var addToCustomStack;\n\n        before(function () {\n            addToCustomStack = function (type, timeout) {\n                var input = $('input[ng-model=\"options.timeout\"]');\n                input.clear();\n                input.sendKeys(timeout);\n                $('input[value=\"' + type + '\"]').click();\n                element(by.buttonText('Add to Custom Stack')).click();\n            };\n\n        });\n\n        it('should add a new success message that dismisses itself', function () {\n            addToCustomStack('success', '.5');\n            notifications.byStack('custom').byType('success').then(function (successes) {\n                expect(successes.length).to.equal(1);\n            });\n        });\n\n        it('should remove itself after a little while', function () {\n            browser.sleep(1000);\n            notifications.byStack('custom').byType('success').then(function (successes) {\n                expect(successes.length).to.equal(0);\n            });\n        });\n\n        it('should add a new success message indefinitely', function () {\n            addToCustomStack('success', -1);\n            notifications.byStack('custom').byType('success').then(function (successes) {\n                expect(successes.length).to.equal(1);\n            });\n        });\n\n    });\n\n    describe('by stack -- demo', function () {\n\n        it('should have 4 notifications in it', function () {\n            expect(notifications.byStack('demo').count()).to.eventually.equal(4);\n        });\n\n        describe('by type', function () {\n            var info;\n\n            before(function () {\n                notifications.byStack('demo').byType('info').then(function (infoMessages) {\n                    info = infoMessages;\n                });\n            });\n\n            it('should have two notifications', function () {\n                expect(info.length).to.equal(2);\n            });\n\n            it('should all be type \"info\"', function () {\n                _.forEach(info, function (infoMessage) {\n                    expect(infoMessage.type).to.eventually.equal('info');\n                });\n            });\n\n            describe('first notification', function () {\n                var notification;\n\n                before(function () {\n                    notification = info[0];\n                });\n\n                it('should have helpful information', function () {\n                    expect(notification.text).to.eventually.equal('Helpful Information');\n                });\n\n                it('should be dismissable', function () {\n                    expect(notification.isDismissable()).to.eventually.be.true;\n                });\n\n                it('should not have a spinner', function () {\n                    expect(notification.hasSpinner()).to.eventually.be.false;\n                });\n\n            });\n\n            describe('second notification', function () {\n                var notification;\n\n                before(function () {\n                    notification = info[1];\n                });\n\n                it('should say it is loading', function () {\n                    expect(notification.text).to.eventually.equal('Loading');\n                });\n\n                it('should not be dismissable', function () {\n                    expect(notification.isDismissable()).to.eventually.be.false;\n                });\n\n                it('should have a spinner', function () {\n                    expect(notification.hasSpinner()).to.eventually.be.true;\n                });\n\n            });\n\n        });\n\n    });\n\n    describe('all notifications', function () {\n\n        it('should have 6 notifications in it', function () {\n            expect(notifications.all.count()).to.eventually.equal(6);\n        });\n\n        describe('by type', function () {\n            var success;\n\n            before(function () {\n                notifications.all.byType('success').then(function (successMessages) {\n                    success = successMessages;\n                });\n            });\n\n            it('should have two notifications', function () {\n                expect(success.length).to.equal(2);\n            });\n\n            it('should all be type \"success\"', function () {\n                _.forEach(success, function (successMessage) {\n                    expect(successMessage.type).to.eventually.equal('success');\n                });\n            });\n\n            describe('first notification', function () {\n                var notification;\n\n                before(function () {\n                    notification = success[0];\n                });\n\n                it('should have done it', function () {\n                    expect(notification.text).to.eventually.equal('You did it!');\n                });\n\n                it('should be dismissable', function () {\n                    expect(notification.isDismissable()).to.eventually.be.true;\n                });\n\n                it('should not have a spinner', function () {\n                    expect(notification.hasSpinner()).to.eventually.be.false;\n                });\n\n            });\n\n            describe('second notification', function () {\n                var notification;\n\n                before(function () {\n                    notification = success[1];\n                });\n\n                it('should have my message', function () {\n                    expect(notification.text).to.eventually.equal('My message');\n                });\n\n                it('should be dismissable', function () {\n                    expect(notification.isDismissable()).to.eventually.be.true;\n                });\n\n                it('should not have a spinner', function () {\n                    expect(notification.hasSpinner()).to.eventually.be.false;\n                });\n\n            });\n\n        });\n    });\n\n    describe('notifications exist', function () {\n\n        it('should find a notification with no class and a string (all)', function () {\n            expect(notifications.all.exists('Under Attack by Aliens')).to.eventually.be.true;\n        });\n\n        it('should find a notification with no class and a string (custom stack)', function () {\n            expect(notifications.byStack('custom').exists('Under Attack by Aliens')).to.eventually.be.true;\n        });\n\n        it('should find a notification with a class and a string', function () {\n            expect(notifications.all.exists('Under Attack by Aliens','error')).to.eventually.be.true;\n        });\n\n        it('should find a notification with a class and no string', function () {\n            expect(notifications.all.exists('','error')).to.eventually.be.true;\n        });\n\n        it('should not find a notification with the wrong class and a string', function () {\n            expect(notifications.all.exists('Under Attack by Aliens','success')).to.eventually.be.false;\n        });\n\n        it('should not find a notification with the wrong class and no string', function () {\n            expect(notifications.all.exists('','abject_failure')).to.eventually.be.false;\n        });\n\n        it('should not find a notification with no class and a wrong string', function () {\n            expect(notifications.all.exists('Under Attack by Alienists')).to.eventually.be.false;\n        });\n\n    });\n\n    describe('dismissing notifications', function () {\n        var allMessages;\n\n        before(function () {\n            notifications.all.messages.then(function (messages) {\n                allMessages = messages;\n            });\n        });\n\n        it('should dismiss a single notification', function () {\n            allMessages[0].dismiss();\n        });\n\n        it('should have actually dismissed the message', function () {\n            expect(notifications.all.count()).to.eventually.equal(5);\n        });\n\n        describe('by stack', function () {\n\n            it('should dismiss every notification in a stack', function () {\n                notifications.byStack('custom').dismiss();\n            });\n\n            it('should have actually dismissed every message', function () {\n                expect(notifications.byStack('custom').count()).to.eventually.equal(0);\n            });\n\n        });\n\n        describe('all', function () {\n\n            it('should dismiss all notifications', function () {\n                notifications.all.dismiss();\n            });\n\n            it('should have actually dismissed every message', function () {\n                expect(notifications.all.count()).to.eventually.equal(1);\n            });\n\n        });\n\n    });\n\n    describe('stackless notifications', function () {\n        var notification;\n\n        before(function () {\n            notification = notifications.initialize($('rx-notification[type=\"error\"] .rx-notification'));\n        });\n\n        it('should have a warning type', function () {\n            expect(notification.type).to.eventually.equal('error');\n        });\n\n        it('should say hello', function () {\n            expect(notification.text).to.eventually.equal('Hello, world!');\n        });\n\n        it('should not be dismissable', function () {\n            expect(notification.isDismissable()).to.eventually.be.false;\n        });\n\n        it('should not have a spinner', function () {\n            expect(notification.hasSpinner()).to.eventually.be.false;\n        });\n\n    });\n\n});\n"
        }
    },
    {
        "name": "rxPageTitle",
        "moduleName": "'encore.ui.rxPageTitle'",
        "displayName": "Rx Page Title",
        "srcFiles": [
            "src/rxPageTitle/rxPageTitle.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/stable.svg\" alt=\"stable\" title=\"\" /></a></p>\n\n<p>Service for managing the page titles.</p>",
            "js": "/*jshint unused:false*/\n\n// This file is used to help build the 'demo' documentation page and should be updated with example code\nfunction rxPageTitleCtrl ($scope, rxPageTitle) {\n    $scope.changeTitle = function () {\n        rxPageTitle.setTitle($scope.newTitle);\n    };\n\n    $scope.refreshTitle = function () {\n        $scope.pageTitle = rxPageTitle.getTitle();\n    };\n\n    $scope.refreshTitle();\n}",
            "html": "<!-- Sample HTML goes here as a live example of how to the component can be used -->\n<div ng-controller=\"rxPageTitleCtrl\">\n    Current Title: {{pageTitle}} <button ng-click=\"refreshTitle()\" class=\"button\">Get Updated Title</button><br />\n\n    <input type=\"text\" ng-change=\"changeTitle()\" ng-model=\"newTitle\" placeholder=\"New Title\" />\n</div>",
            "less": "",
            "midway": ""
        }
    },
    {
        "name": "rxPaginate",
        "moduleName": "'encore.ui.rxPaginate'",
        "displayName": "Rx Paginate",
        "srcFiles": [
            "src/rxPaginate/rxPaginate.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [
            "templates/rxPaginate/templates/rxPaginate.html"
        ],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/stable.svg\" alt=\"stable\" title=\"\" /></a></p>\n\n<p>Used for adding pagination around a data object.</p>\n\n<h1>Hiding the pagination</h1>\n\n<p>In some instances, the pagination should be hidden if there isn't enough data to require it. For example, if you have <code>itemsPerPage</code> set to 10, but only have 7 items of data (so only one page). Hiding the pagination is pretty simple:</p>\n\n<pre><code>&lt;rx-paginate page-tracking=\"pager\" ng-hide=\"pager.totalPages === 1\"&gt;&lt;/rx-paginate&gt;\n</code></pre>\n\n<p>You can use this code on any part of your view. For example, if you have pagination in your table footer, it's a good idea to hide the entire footer:</p>\n\n<pre><code>&lt;tfoot ng-hide=\"pager.totalPages === 1\"&gt;\n    &lt;tr class=\"paginate-area\"&gt;\n        &lt;td colspan=\"12\"&gt;\n            &lt;rx-paginate page-tracking=\"pager\"&gt;&lt;/rx-paginate&gt;\n        &lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/tfoot&gt;\n</code></pre>\n\n<p>See the demo page for more examples of this.</p>",
            "js": "/*jshint unused:false*/\n\n// This file is used to help build the 'demo' documentation page and should be updated with example code\nfunction rxPaginateCtrl ($scope, PageTracking) {\n    $scope.sorter = {\n        predicate: 'id',\n        reverse: false\n    };\n    $scope.pager = PageTracking.createInstance({ itemsPerPage: 3 });\n\n    var makeServers = function (serverCount) {\n        var servers = [];\n        var os = ['Ubuntu 12.04', 'Red Hat Enterprise Linux 6.4', 'CentOS 6.4', 'Ubuntu 13.04'];\n        for (var i = 1; i < serverCount + 1; i++) {\n            var server = {\n                id: i,\n                name: 'Server ' + i,\n                os: os[i % os.length]\n            };\n            servers.push(server);\n        }\n        return servers;\n    };\n\n    $scope.servers = makeServers(21);\n\n    $scope.removeServers = function () {\n        if ($scope.servers.length > 2) {\n            $scope.servers = $scope.servers.splice(2);\n        }\n    };\n\n    $scope.addServers = function () {\n        $scope.servers = $scope.servers.concat(makeServers(2));\n    };\n}\n",
            "html": "<div ng-controller=\"rxPaginateCtrl\">\n    <table class=\"table-striped\">\n        <thead>\n            <tr>\n                <th class=\"column-title\" style=\"width:10em;\">Name</th>\n                <th class=\"column-title\">OS</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr ng-repeat=\"server in servers | orderBy: sorter.predicate:sorter.reverse | Paginate:pager \">\n                <td>\n                    {{server.name}}\n                </td>\n                <td>{{server.os}}</td>\n            </tr>\n        </tbody>\n        <tfoot>\n            <tr class=\"paginate-area\">\n                <td colspan=\"12\">\n                    <rx-paginate page-tracking=\"pager\"></rx-paginate>\n                </td>\n            </tr>\n        </tfoot>\n    </table>\n\n    <p>Use these buttons to adjust the number of pages displayed. The pagination will hide when there is only one page available.</p>\n    <p>\n        <button ng-click=\"removeServers()\" class=\"button sm negative\">Remove first 2 servers</button>\n        <button ng-click=\"addServers()\" class=\"button sm positive\">Add 2 servers</button>\n    </p>\n</div>\n",
            "less": "/*\n # rxPaginate\n\nAdd the class `disabled` to classes `pagination-first`, `pagination-prev`, `pagination-next` and `pagination-last` to disable navigation links.\n\n```\n<table class=\"table-striped\">\n    <thead>\n        <tr>\n            <th class=\"column-title\" style=\"width:10em;\">Name</th>\n            <th class=\"column-title\">OS</a>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Server 1</td>\n            <td>Red Hat Enterprise Linux 6.4</td>\n        </tr>\n        <tr>\n            <td>Server 2</td>\n            <td>CentOS 6.4</td>\n        </tr>\n    </tbody>\n    <tfoot>\n        <tr class=\"paginate-area\">\n            <td colspan=\"12\">\n                <div class=\"rx-paginate\">\n                    <ul class=\"pagination\">\n                        <li class=\"pagination-first disabled\">\n                            <a class=\"ng-hide\">First</a>\n                        </li>\n                        <li class=\"pagination-prev disabled\">\n                            <a>« Prev</a>\n                        </li>\n                        <li class=\"pagination-page\">\n                            <a>1</a>\n                        </li>\n                        <li class=\"pagination-page\">\n                            <a>2</a>\n                        </li>\n                        <li class=\"pagination-page\">\n                            <a>3</a>\n                        </li>\n                        <li class=\"pagination-page active\">\n                            <a>4</a>\n                        </li>\n                        <li class=\"pagination-page page-number-last\">\n                            <a>5</a>\n                        </li>\n                        <li class=\"pagination-next\">\n                            <a>Next »</a>\n                        </li>\n                        <li class=\"pagination-last\">\n                            <a>Last</a>\n                        </li>\n                    </ul>\n                </div>\n            </td>\n        </tr>\n    </tfoot>\n</table>\n```\n\n */\n\n @paginationColor: #ababab;\n\n.paginate-area {\n    text-align: center;\n    td {\n        padding: 0;\n        background: #fff;\n    }\n}\n\n.rx-paginate {\n    .pagination {\n        display: flex;\n        flex-direction: row;\n        flex-flow: row;\n        padding-left: 0;\n        width: 100%;\n    }\n\n    .pagination li {\n        display: inline;\n    }\n\n    .pagination li a {\n        cursor: pointer;\n    }\n\n    .pagination li a,\n    .pagination li span {\n        position: relative;\n        float: left;\n        padding: 6px 12px;\n        margin-left: -1px;\n        text-decoration: none;\n        background: #fff;\n        border-top: 2px solid transparent;\n        color: @paginationColor;\n    }\n\n    .pagination > li:first-child {\n        order: 1;\n    }\n\n    .pagination > li:first-child > a,\n    .pagination > li:first-child > span {\n        padding-left: 30px;\n        color: @infoBlue;\n        background: transparent;\n        &:before {\n            content: \".\";\n            width: 0;\n            height: 0;\n            font-size: 0;\n            display: block;\n            position: absolute;\n            border: 6px solid transparent;\n            border-bottom-color: @infoBlue;\n            border-top: none;\n            left: 10px;\n            top: 55%;\n            margin-top: -4px;\n        }\n    }\n\n    .pagination > li:nth-child(2) {\n        order: 2;\n        padding: 6px 12px;\n        border-top: 2px solid transparent;\n        color: @paginationColor;\n    }\n\n    .pagination > .page-links {\n        order: 3;\n        margin: auto;\n        align-self: center;\n    }\n\n    .pagination > li:last-child {\n        order: 4;\n        border-top: 2px solid transparent;\n        padding: 6px 12px;\n        color: @paginationColor;\n        button[disabled] {\n            color: @paginationColor;\n        }\n    }\n\n    .pagination > li > div > ul {\n        float: right;\n        padding-left: 5px;\n        button {\n            padding: 0;\n            border: 0;\n            background: transparent;\n            color: @infoBlue;\n        }\n        span {\n            float: none;\n            background: transparent;\n        }\n        & li + li::before {\n           content: \" | \";\n           margin: 0 1em;\n        }\n    }\n\n    .pagination > li:last-child > a,\n    .pagination > li:last-child > span {\n    }\n\n    .pagination > .page-links > li > a:hover,\n    .pagination > .page-links > li > span:hover,\n    .pagination > .page-links > li > a:focus,\n    .pagination > .page-links > li > span:focus {\n        background: #eee;\n    }\n\n    .pagination > .page-links > .active > a,\n    .pagination > .page-links > .active > span,\n    .pagination > .page-links > .active > a:hover,\n    .pagination > .page-links > .active > span:hover,\n    .pagination > .page-links > .active > a:focus,\n    .pagination > .page-links > .active > span:focus {\n        z-index: 2;\n        cursor: default;\n        border-top-color: #000;\n        color: #000;\n        background: #fff;\n    }\n\n    .pagination .disabled > span,\n    .pagination .disabled > span:hover,\n    .pagination .disabled > span:focus,\n    .pagination .disabled > a,\n    .pagination .disabled > a:hover,\n    .pagination .disabled > a:focus {\n        visibility: hidden;\n    }\n\n    .pagination-lg > li > a,\n    .pagination-lg > li > span {\n        padding: 10px 16px;\n        font-size: 18px;\n    }\n\n    .pagination-sm > li > a,\n    .pagination-sm > li > span {\n        padding: 5px 10px;\n        font-size: 12px;\n    }\n}\n",
            "midway": "var pagination = require('../rxPaginate.page.js').rxPaginate;\n\ndescribe('rxPaginate', function () {\n\n    before(function () {\n        demoPage.go('#/component/rxPaginate');\n        pagination = pagination.main;\n    });\n\n    it('should jump forward to page 7 using pagination', function () {\n        pagination.page = 7;\n        expect(pagination.page).to.eventually.equal(7);\n    });\n\n    it('should jump backward to page 2 using pagination', function () {\n        pagination.page = 2;\n        expect(pagination.page).to.eventually.equal(2);\n    });\n\n    it('should navigate forward one page at a time', function () {\n        pagination.next();\n        expect(pagination.page).to.eventually.equal(3);\n    });\n\n    it('should navigate backwards one page at a time', function () {\n        pagination.previous();\n        pagination.previous();\n        expect(pagination.page).to.eventually.equal(1);\n    });\n\n    it('should navigate to the last page', function () {\n        pagination.page.then(function (page) {\n            var firstPage = page;\n            pagination.last();\n            expect(pagination.page).to.eventually.be.above(firstPage);\n        });\n    });\n\n    it('should not allow navigating `next` the last page', function () {\n        expect(pagination.next).to.throw(pagination.NoSuchPageException);\n    });\n\n    it('should allow attempting to navigate to the last page when already on the last page', function () {\n        pagination.page.then(function (page) {\n            pagination.last();\n            expect(pagination.page).to.eventually.equal(page);\n        });\n    });\n\n    it('should navigate to the first page', function () {\n        pagination.first();\n        expect(pagination.page).to.eventually.equal(1);\n    });\n\n    it('should not allow navigating `prev` the first page', function () {\n        expect(pagination.previous).to.throw(pagination.NoSuchPageException);\n    });\n\n    it('should allow attempting to navigate to the first page when already on the first page', function () {\n        pagination.first();\n        expect(pagination.page).to.eventually.equal(1);\n    });\n\n    it('should have all available page sizes', function () {\n        expect(pagination.pageSizes).to.eventually.eql([3, 50, 200, 350, 500]);\n    });\n\n    it('should highlight the current items per page selection', function () {\n        expect(pagination.pageSize).to.eventually.equal(3);\n    });\n\n    it('should switch to a different items per page', function () {\n        pagination.pageSize = 50;\n        expect(pagination.pageSize).to.eventually.equal(50);\n    });\n\n    it('should not allow selecting an unavailable items per page', function () {\n        var fn = function () {\n            return protractor.promise.fulfilled(pagination.__lookupSetter__('pageSize').call(pagination, 45));\n        };\n        expect(fn()).to.be.rejectedWith(pagination.NoSuchItemsPerPage);\n    });\n\n});\n"
        }
    },
    {
        "name": "rxPermission",
        "moduleName": "'encore.ui.rxPermission'",
        "displayName": "Rx Permission",
        "srcFiles": [
            "src/rxPermission/rxPermission.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [
            "templates/rxPermission/templates/rxPermission.html"
        ],
        "dependencies": [
            "rxSession",
            "rxLocalStorage"
        ],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\" title=\"\" /></a></p>\n\n<p>Service and directive for mananging permissions in EncoreUI</p>",
            "js": "function rxPermissionCtrl ($scope, Session, rxNotify) {\n    rxNotify.add('Respect My Authority!!', {\n        stack: 'permission',\n        type: 'warning'\n    });\n\n    $scope.storeToken = function () {\n        Session.storeToken({ access: { user: { roles: [{ name: 'test' } ] }}});\n    }\n\n    $scope.clearToken = function () {\n        Session.logout();\n    };\n}\n",
            "html": "<!-- Sample HTML goes here as a live example of how to the component can be used -->\n<div ng-controller=\"rxPermissionCtrl\">\n    <button class=\"storeToken button\" name=\"button\" ng-click=\"storeToken()\">Store Token</button>\n    <button class=\"clearToken button button-negative\" name=\"button\" ng-click=\"clearToken()\">Clear Token</button>\n\n    <rx-permission role=\"test\">\n        <rx-notifications stack=\"permission\"></rx-notifications>\n    </rx-permission>\n</div>\n",
            "less": "",
            "midway": "var rxPermissionPage = require('../rxPermission.page.js').rxPermission;\n\ndescribe('rxPermission', function () {\n\n    before(function () {\n        demoPage.go('#/component/rxPermission');\n    });\n\n    it('rxPermission should display and hide content when appropriate', function () {\n        var rxPermission = rxPermissionPage.rxPermission;\n        expect(rxPermission.isDisplayed()).to.eventually.be.false;\n        demoPage.storeTokenButton.click();\n        expect(rxPermission.isDisplayed()).to.eventually.be.true;\n        demoPage.clearTokenButton.click();\n        expect(rxPermissionPage.rxPermission.isDisplayed()).to.eventually.be.false;\n    });\n});\n"
        }
    },
    {
        "name": "rxSession",
        "moduleName": "'encore.ui.rxSession'",
        "displayName": "Rx Session",
        "srcFiles": [
            "src/rxSession/rxSession.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [
            "rxLocalStorage"
        ],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\" title=\"\" /></a></p>\n\n<p>Service for managing user session in encore-ui.</p>",
            "js": "function rxSessionCtrl ($scope, Session) {\n    $scope.isAuthenticated = function () {\n        alert(Session.isAuthenticated());\n    };\n}\n",
            "html": "<div ng-controller=\"rxSessionCtrl\">\n    <button ng-click=\"isAuthenticated()\" class=\"button\">Is Authenticated</button>\n</div>\n",
            "less": "",
            "midway": ""
        }
    },
    {
        "name": "rxSessionStorage",
        "moduleName": "'encore.ui.rxSessionStorage'",
        "displayName": "Rx Session Storage",
        "srcFiles": [
            "src/rxSessionStorage/rxSessionStorage.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\" title=\"\" /></a></p>\n\n<p>A simple wrapper of the global sessionStorage object for interacting with session storage.\nThis service is similar to angular's $window and $document services.  The API is exactly the\nsame as the W3C's specification provided at: http://dev.w3.org/html5/webstorage/#storage-0</p>",
            "js": "function rxSessionStorageCtrl ($scope, SessionStorage) {\n    $scope.setSideKick = function () {\n        SessionStorage.setItem('Batman', 'Robin');\n    };\n\n    $scope.getSideKick = function () {\n        alert(SessionStorage.getItem('Batman'));\n    };\n}\n",
            "html": "<div ng-controller=\"rxSessionStorageCtrl\">\n    <label>Who is Batman's side kick?</label>\n    <button ng-click=\"setSideKick()\" class=\"button button-positive\">Store Answer</button>\n    <button ng-click=\"getSideKick()\" class=\"button\">Answer?</button>\n</div>\n",
            "less": "",
            "midway": ""
        }
    },
    {
        "name": "rxSortableColumn",
        "moduleName": "'encore.ui.rxSortableColumn'",
        "displayName": "Rx Sortable Column",
        "srcFiles": [
            "src/rxSortableColumn/rxSortableColumn.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [
            "templates/rxSortableColumn/templates/rxSortableColumn.html"
        ],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\" title=\"\" /></a></p>\n\n<p>A clickable link in a table heading which will sort the table by the referenced property in ascending or descending order.</p>",
            "js": "/*jshint unused:false*/\n\n// This file is used to help build the 'demo' documentation page and should be updated with example code\nfunction rxSortableColumnCtrl ($scope, PageTracking, rxSortUtil) {\n    $scope.sort = rxSortUtil.getDefault();\n    $scope.pager = PageTracking.createInstance();\n\n    $scope.sortCol = function (predicate) {\n        return rxSortUtil.sortCol($scope, predicate);\n    };\n\n    $scope.talentPool = [\n        {\n            name: 'Andrew Yurisich',\n            jobTitle: 'Mailroom Associate IV'\n        },\n        {\n            name: 'Patrick Deuley',\n            jobTitle: 'Design Chaplain'\n        },\n        {\n            name: 'Hussam Dawood',\n            jobTitle: 'Evangelist of Roger Enriquez'\n        },\n        {\n            name: 'Kerry Bowley',\n            jobTitle: 'Dev Mom'\n        },\n    ];\n}",
            "html": "<div ng-controller=\"rxSortableColumnCtrl\">\n    <table>\n        <thead>\n            <tr>\n                <th scope=\"col\">\n                    <rx-sortable-column\n                        sort-method=\"sortCol(property)\"\n                        sort-property=\"name\"\n                        predicate=\"sort.predicate\"\n                        reverse=\"sort.reverse\">\n                        Name\n                    </rx-sortable-column>\n                </th>\n                <th scope=\"col\">\n                    <rx-sortable-column\n                        sort-method=\"sortCol(property)\"\n                        sort-property=\"jobTitle\"\n                        predicate=\"sort.predicate\"\n                        reverse=\"sort.reverse\">\n                        Occupation\n                    </rx-sortable-column>\n                </th>\n            </tr>\n        </thead>\n        <tbody id=\"talentPoolData\">\n            <tr ng-repeat=\"resource in talentPool | orderBy:sort.predicate:sort.reverse\">\n                <th scope=\"row\" class=\"talent-name\">\n                    {{resource.name}}\n                </th>\n                <td class=\"talent-job\">\n                    {{resource.jobTitle}}\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n",
            "less": "/*\n * rxSortableColumn\n */\n.rx-sortable-column {\n    position: relative;\n\n    .sort-action {\n        display: block;\n        width: 100%;\n        margin: 0;\n        text-align: left;\n        &:focus {\n            // since we underline on focus, we can remove the outline rectangle that sticks around\n            outline: none;\n        }\n    }\n\n    .sort-icon {\n        display: block;\n        height: 0;\n        width: 0;\n        border: solid transparent;\n        border-width: 6px 5px;\n        position: absolute;\n        right: 0;\n        top: 50%;\n\n        &.asc {\n            margin-top: -9px;\n            border-bottom-color: #4a4a4a;\n        }\n        &.desc {\n            margin-top: -3px;\n            border-top-color: #4a4a4a;\n        }\n    }\n}",
            "midway": "var rxSortableColumn = require('../rxSortableColumn.page.js').rxSortableColumn;\n\ndescribe('rxSortableColumn', function () {\n    var nameColumn = null;\n    var roleColumn = null;\n\n    before(function () {\n        demoPage.go('#/component/rxSortableColumn');\n        var nameSelector = $('rx-sortable-column[sort-property=\"name\"]');\n        var roleSelector = $('rx-sortable-column[sort-property=\"jobTitle\"]');\n        nameColumn = rxSortableColumn.initialize(nameSelector, 'resource in talentPool');\n        roleColumn = rxSortableColumn.initialize(roleSelector);\n    });\n\n    it('should display some sortable columns', function () {\n        expect(nameColumn.rootElement.isDisplayed()).to.eventually.eq.true;\n        expect(roleColumn.rootElement.isDisplayed()).to.eventually.eq.true;\n    });\n\n    it('should have a descending sort shown by default for the name column', function () {\n        expect(nameColumn.currentSortDirection).to.eventually.eq(0);\n    });\n\n    it('should have no sort shown by default for the job title column', function () {\n        expect(roleColumn.currentSortDirection).to.eventually.eq(-1);\n    });\n\n    it('should support sorting columns ascending', function () {\n        var isAscending = true;\n        nameColumn.sort(isAscending);\n        expect(nameColumn.currentSortDirection).to.eventually.eq(1);\n    });\n\n    it('should support sorting columns descending', function () {\n        var isAscending = false;\n        nameColumn.sort(isAscending);\n        expect(nameColumn.currentSortDirection).to.eventually.eq(0);\n    });\n\n    it('should remove all other sorts when sorting an unsorted column', function () {\n        roleColumn.sort();\n        expect(nameColumn.currentSortDirection).to.eventually.eq(-1);\n    });\n\n    it('should have a name', function () {\n        expect(nameColumn.name).to.eventually.eq('Name');\n        expect(roleColumn.name).to.eventually.eq('Occupation');\n    });\n\n    describe('column data', function () {\n\n        it('should throw an error if attempting to access cell data without a repeater string', function () {\n            expect(roleColumn.data).to.eventually.be.rejectedWith(roleColumn.CellUndiscoverableError);\n        });\n\n        it('should return all names as data', function () {\n            var names = ['Andrew Yurisich', 'Hussam Dawood', 'Kerry Bowley', 'Patrick Deuley'];\n            expect(nameColumn.data).to.eventually.eql(names);\n        });\n\n        it('should apply a custom map function to cells', function () {\n            var mapFn = function sortsMail (cellElements) {\n                return cellElements.map(function (cellElement) {\n                    return cellElement.getText().then(function (name) {\n                        return name === 'Andrew Yurisich';\n                    });\n                });\n            };\n\n            expect(nameColumn.getDataUsing(mapFn)).to.eventually.eql([true, false, false, false]);\n        });\n\n        it('should apply a custom reduce function to cells', function () {\n            var reduceFn = function hasNamedState (cellElements) {\n                return cellElements.reduce(function (acc, cellElement) {\n                    return cellElement.getText().then(function (text) {\n                        if (text === 'Hussam Dawood') {\n                            acc[text] = 'Republic of Dawood';\n                        }\n                        return acc;\n                    });\n                }, {});\n            };\n\n            expect(nameColumn.getDataUsing(reduceFn)).to.eventually.eql({ 'Hussam Dawood': 'Republic of Dawood' });\n        });\n\n    });\n\n});\n"
        }
    },
    {
        "name": "rxSpinner",
        "moduleName": "'encore.ui.rxSpinner'",
        "displayName": "Rx Spinner",
        "srcFiles": [
            "src/rxSpinner/rxSpinner.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/stable.svg\" alt=\"stable\" title=\"\" /></a></p>\n\n<p>Add a spinner icon to any element</p>",
            "js": "/*jshint unused:false*/\nfunction rxSpinnerCtrl ($scope) {\n    $scope.loading = true;\n}",
            "html": "<div ng-controller=\"rxSpinnerCtrl\">\n    <button rx-toggle=\"loading\" class=\"button\">Toggle Loading</button>\n    <div rx-spinner toggle=\"loading\" class=\"rxSpinnerExample\">Spinning = {{loading}}</div>\n</div>\n<style type=\"text/css\">\n.rxSpinnerExample {\n    background: #00ac31;\n    padding: 20px;\n    color: white;\n    line-height: 20px;\n}\n</style>\n",
            "less": "@import 'vars';\n\n/*********************************************************\n *  CSS3 Animation spinner\n *\n *  Based on: http://cssdeck.com/labs/css3-animation-spinner\n *  Copyright 2013 - birkof.ro\n *********************************************************/\n.rx-spinner {\n    background-color: transparent;\n    border: 2px solid white;\n    border-top-color: transparent;\n    border-left-color: transparent;\n    border-radius: 150px;\n    display: inline-block;\n    width: 12px;\n    height: 12px;\n    margin-bottom: 3px;\n    vertical-align: middle;\n    -webkit-animation: spin .8s infinite linear;\n    -moz-animation: spin .8s infinite linear;\n    -ms-animation: spin .8s infinite linear;\n    -o-animation: spin .8s infinite linear;\n    animation: spin .8s infinite linear;\n}\n.rx-spinner.dark {\n    border-bottom-color: @appTextColor;\n    border-right-color: @appTextColor;\n}\n.rx-spinner.mini {\n    border-width: 2px;\n    width: 4px;\n    height: 4px;\n}\n.rx-spinner.small {\n    border-width: 2px;\n    width: 8px;\n    height: 8px;\n}\n.rx-spinner.large {\n    border-width: 3px;\n    width: 22px;\n    height: 22px;\n}\n.rx-spinner.extra-large {\n    border-width: 4px;\n    width: 32px;\n    height: 32px;\n}\n@-webkit-keyframes spin { /* Safari and Chrome */\n    0% { -webkit-transform: rotate(0deg); }\n    100% { -webkit-transform: rotate(360deg); }\n}\n@-moz-keyframes spin { /* Firefox */\n    0% { -moz-transform: rotate(0deg); }\n    100% { -moz-transform: rotate(360deg); }\n}\n@-ms-keyframes spin { /* IE */\n    0% { -ms-transform: rotate(0deg); }\n    100% { -ms-transform: rotate(360deg); }\n}\n@-o-keyframes spin { /* Opera */\n    0% { -o-transform: rotate(0deg); }\n    100% { -o-transform: rotate(360deg); }\n}\n@keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n}\n",
            "midway": "var rxSpinnerPage = require('../rxSpinner.page.js').rxSpinner;\n\ndescribe('rxSpinner', function () {\n\n    it('beforeAll', function () {\n        demoPage.go('#/component/rxSpinner');\n    });\n\n    it.skip('should show element', function () {\n        expect(rxSpinnerPage.rxSpinnerElement.isDisplayed()).toEqual(true);\n    });\n\n});\n"
        }
    },
    {
        "name": "rxStatus",
        "moduleName": "'encore.ui.rxStatus'",
        "displayName": "Rx Status",
        "srcFiles": [
            "src/rxStatus/rxStatus.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [
            "rxNotify"
        ],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/stable.svg\" alt=\"stable\" title=\"\" /></a></p>\n\n<h1>Description</h1>\n\n<p>This service is provided as a compliment to <a href=\"http://rackerlabs.github.io/encore-ui/#/component/rxNotify\"><code>rxNotify</code> rxNotify service</a>.  It abstracts out some of the raw functionality provided by rxNotify to make the addition and removal of single messages easier.</p>\n\n<h1>Usage</h1>\n\n<h2>Preparation</h2>\n\n<p>In order to use the <code>Status</code> service, one has to instantiate it with a proper <code>$scope</code> object to keep track of a running state.  <code>rxNotify</code> indirectly makes use of the <code>$scope</code> variable when a message can be auto-dismissed.  In order to keep the interface for the wrapper functions coherent, the <code>$scope</code> variable must be provided before use.  This can be accomplished as follows:</p>\n\n<pre><code>    Status.setupScope($scope);\n</code></pre>\n\n<h2>Success cases</h2>\n\n<p>The <code>Status</code> service is provided as a wrapper to rxNotify.  As such, the status types supported by <code>rxNotify</code> are still used and have been wrapped into utility functions.  For example, on page load it is usually necessary to inform the user of pending data retrieval.  This can be accomplished by:</p>\n\n<pre><code>    Status.setLoading('Retrieving users');\n</code></pre>\n\n<p>This will call rxNotify in the following manner:</p>\n\n<pre><code>    rxNotify.add('Retrieving users', {\n        stack: 'page',\n        dismiss: [scope, 'loaded'],\n        loading: true\n    });\n</code></pre>\n\n<p>Similarly, the following call using the Status service:</p>\n\n<pre><code>    Status.setSuccess('Successfully deleted questionable ' +\n        'browsing history');\n</code></pre>\n\n<p>results in a call to rxNotify as such:</p>\n\n<pre><code>    rxNotify.add('Successfully deleted questionable ' +\n        'browsing history',\n        {\n            stack: 'page',\n            show: 'next'\n        }\n    );\n</code></pre>\n\n<p>Note: For <code>success</code> and <code>error</code> messages, the <code>repeat</code> attribute is set to false. Messages of <code>success</code> will also automatically timeout after 5 seconds. Both of these defaults were design decisions made at this level for usability and consistency across all Encore products. </p>\n\n<p>Each of the wrapper functions to the different rxNotify message types support receiving an <code>options:{}</code> parameter that can override defaults for the respective wrapper. For example, instead of showing a success message on next route change, it can be shown immediately:</p>\n\n<pre><code>    Status.setSuccess('Please show immediately', {\n        show: 'immediate'\n    });\n</code></pre>\n\n<p>Please note that the <code>options</code> are of the same type as one would provide to rxNotify.  This should allow for maximum flexibility when necessary.  However, as a bonus, some common behaviours expected to be overriden have been provided as their own wrapper functions.  For example:</p>\n\n<pre><code>    Status.setSuccessImmediate('Please show immediately')\n</code></pre>\n\n<p>is the equivalent of calling <code>Status.setSuccess()</code> with the <code>{ show: 'immediate' }</code> parameter.  Please note, there isn't much fault checking in place, so the following behaviour although permitted, is not advised:</p>\n\n<pre><code>    Status.setSuccessImmediate('Please show immediately', {\n        show: 'next'\n    });\n</code></pre>\n\n<h2>Error cases</h2>\n\n<p>The <code>{ type: 'error' }</code> wrapper is a unique one.  It allows for a string to be passed as an error message, just like the wrappers before.  For example:</p>\n\n<pre><code>    Status.setError('This is an error!');\n</code></pre>\n\n<p>It also allows for a specialized template to be specified as the error string with an <code>object:{}</code> as the second parameter containing the replacements for the template in the error string.  If in a proper format, the object can be automatically parsed using an <code>ErrorFormatter</code> and displayed to the user.  For example:</p>\n\n<pre><code>    Status.setError(\n        'Failed loading browsing history: ${message}',\n        { message: 'User has previously cleared their history!' }\n    );\n</code></pre>\n\n<p>Please note that the replacement variable <code>${message}</code> in the error string maps one-to-one to the keys provided in the the error object.  One can specify any number of template variables to replace.  Not providing a balanced list of variables and their replacements will result in a <code>ReferenceError: &lt;replacement&gt; is not defined</code>.</p>\n\n<p>The following wrapper functions are available today.  Their names should be self explanatory:</p>\n\n<ul>\n<li>setLoading</li>\n<li>setSuccess</li>\n<li>setSuccessNext</li>\n<li>setSuccessImmediate</li>\n<li>setWarning</li>\n<li>setInfo</li>\n<li>setError</li>\n<li>complete &rarr; setSuccessImmediate</li>\n</ul>\n\n<p>The following are used to programmatically remove notifications from the screen:</p>\n\n<ul>\n<li>dismiss</li>\n<li>clear</li>\n</ul>\n\n<h1>Utilities</h1>\n\n<p>The <code>Status</code> service requires that one provide a <code>$scope</code> object to keep tracking of state before any of the wrapper functions can be utilized.  Since it is expected that almost all pages will make use of notifications, one can place the repeated setup of the <code>Status</code> service in a page load event handler.  This will allow all pages to gain an already setup <code>Status</code> service for immediate use.  For example:</p>\n\n<pre><code>    .run(function ($rootScope, StatusUtil) {\n        $rootScope.$on('$routeChangeSuccess', function () {\n            Status.setupScope($rootScope);\n        });\n    });\n</code></pre>\n\n<p>Although hidden away in the app's bootstrap code, the above makes for a less repetitive call to <code>Status.setScope()</code> at the beginning of each use.</p>",
            "js": "function rxStatusCtrl ($scope, $rootScope, Status) {\n    Status.setScope($scope);\n\n    $scope.triggerRouteChangeSuccess = function () {\n        $rootScope.$broadcast('$routeChangeSuccess');\n    };\n\n    $scope.clear = function () {\n        Status.clear();\n        $scope.notify = undefined;\n    };\n\n    $scope.setLoading = function (msg) {\n        Status.clear();\n        $scope.notify = Status.setLoading(msg);\n    };\n\n    $scope.setSuccess = function (msg) {\n        Status.clear();\n        $scope.notify = Status.setSuccess(msg);\n    };\n\n    $scope.setSuccessNext = function (msg) {\n        Status.clear();\n        $scope.notify = Status.setSuccessNext(msg);\n    };\n\n    $scope.setSuccessImmediate = function (msg) {\n        Status.clear();\n        $scope.notify = Status.setSuccessImmediate(msg);\n    };\n\n    $scope.setWarning = function (msg) {\n        Status.clear();\n        $scope.notify = Status.setWarning(msg);\n    };\n\n    $scope.setInfo = function (msg) {\n        Status.clear();\n        $scope.notify = Status.setInfo(msg);\n    };\n\n    $scope.setError = function (msg) {\n        Status.clear();\n        $scope.notify = Status.setError(msg);\n    };\n\n    $scope.dismiss = function () {\n        $scope.notify && Status.dismiss($scope.notify);\n        $scope.notify = undefined;\n    };\n}\n",
            "html": "<div ng-controller=\"rxStatusCtrl\">\n    <div style=\"clear: left;\">\n        <ol>\n            <li>\n                <input type=\"button\" value=\"setLoading\"\n                    ng-click=\"setLoading('This should set a spinner')\"/>\n                        should set a spinner</li>\n            <li>&nbsp;</li>\n            <li>\n                <input type=\"button\" value=\"setSuccess\"\n                    ng-click=\"setSuccess('This should show a success on $routeChangeSuccess')\"/>\n                        should show a success on <strong>$routeChangeSuccess</strong> -\n                        <input type=\"button\" ng-click=\"triggerRouteChangeSuccess()\" value=\"Trigger it!\" /></li>\n            <li>&nbsp;</li>\n            <li>\n                <input type=\"button\" value=\"setSuccessNext\"\n                    ng-click=\"setSuccessNext('This should show a success on $routeChangeSuccess')\"/>\n                        should show a success on <strong>$routeChangeSuccess</strong> -\n                        <input type=\"button\" ng-click=\"triggerRouteChangeSuccess()\" value=\"Trigger it!\"/></li>\n            <li>&nbsp;</li>\n            <li>\n                <input type=\"button\" value=\"setSuccessImmediate\"\n                    ng-click=\"setSuccessImmediate('This should show a success immediately')\"/>\n                        should show a <strong>success immediately</strong></li>\n            <li>&nbsp;</li>\n            <li>\n                <input type=\"button\" value=\"setWarning\"\n                    ng-click=\"setWarning('This should set a warning')\"/>\n                        should set a <strong>warning</strong></li>\n            <li>&nbsp;</li>\n            <li>\n                <input type=\"button\" value=\"setInfo\"\n                    ng-click=\"setInfo('This should set an informational')\"/>\n                        should set an <strong>informational</strong></li>\n            <li>&nbsp;</li>\n            <li>\n                <input type=\"button\" value=\"setError\"\n                    ng-click=\"setError('This should set an error')\"/>\n                        should set an <strong>error</strong></li>\n        </ol>\n\n        <hr ng-show=\"!!notify\" />\n        <p ng-show=\"!!notify\">\n            <input type=\"button\" value=\"Dismiss\" ng-click=\"dismiss()\" /> the message shown </p>\n\n        <p ng-show=\"notify\">\n            <input type=\"button\" value=\"Clear\" ng-click=\"clear()\" /> all shown messages </p>\n    </div>\n</div>\n",
            "less": "",
            "midway": ""
        }
    },
    {
        "name": "rxToggle",
        "moduleName": "'encore.ui.rxToggle'",
        "displayName": "Rx Toggle",
        "srcFiles": [
            "src/rxToggle/rxToggle.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/stable.svg\" alt=\"stable\" title=\"\" /></a></p>\n\n<p>This component provides and attribute to handle toggling a boolean scope property for hide/show purposes. Normally used in conjunction with ng-show to toggle hidden content. See the collapse functionality in 'rxApp' for a real-world use.</p>\n\n<h2>Future plans</h2>\n\n<p>In conjunction with rxToggle, it would be helpful to have an attribute that binds the visibility state of an element with an event, so that when an event is fired from a component of the same type, it hides all other components of that time. For example, if a pop-up menu appears on click of a 'gear' component, it should hide any other existing pop-up menus currently showing.</p>",
            "js": "",
            "html": "<div>\n    <button rx-toggle=\"visible\" id=\"vacillator\" class=\"button\">Toggle Div</button>\n\n    <p>Current state: {{visible}}</p>\n\n    <div ng-show=\"visible\" id=\"vacillated\">Shows when $scope.visibile == true</div>\n</div>",
            "less": "",
            "midway": "describe('rxToggle', function () {\n    var rxToggle, rxToggleContent;\n\n    before(function () {\n        demoPage.go('#/component/rxToggle');\n        rxToggle = $('#vacillator');\n        rxToggleContent = $('#vacillated');\n    });\n\n    it('should toggle content on show', function () {\n        expect(rxToggleContent.isDisplayed()).to.eventually.be.false;\n\n        rxToggle.click();\n\n        expect(rxToggleContent.isDisplayed()).to.eventually.be.true;\n\n        rxToggle.click();\n\n        expect(rxToggleContent.isDisplayed()).to.eventually.be.false;\n    });\n});\n"
        }
    },
    {
        "name": "rxTokenInterceptor",
        "moduleName": "'encore.ui.rxTokenInterceptor'",
        "displayName": "Rx Token Interceptor",
        "srcFiles": [
            "src/rxTokenInterceptor/rxTokenInterceptor.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [
            "rxSession",
            "rxLocalStorage"
        ],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\" title=\"\" /></a></p>\n\n<p>Simple $http interceptor which adds auth token id to http requests.</p>",
            "js": "",
            "html": "<pre>\n    <code>\n        angular.module('encoreApp', ['encore.ui'])\n            .config(function ($httpProvider) {\n                $httpProvider.interceptors.push('TokenInterceptor');\n            });\n    </code>\n</pre>\n",
            "less": "",
            "midway": ""
        }
    },
    {
        "name": "rxUnauthorizedInterceptor",
        "moduleName": "'encore.ui.rxUnauthorizedInterceptor'",
        "displayName": "Rx Unauthorized Interceptor",
        "srcFiles": [
            "src/rxUnauthorizedInterceptor/rxUnauthorizedInterceptor.js"
        ],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [
            "rxSession",
            "rxLocalStorage"
        ],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\" title=\"\" /></a></p>\n\n<p>Simple $http interceptor which will redirect users back to login on 401.</p>",
            "js": "",
            "html": "<pre>\n    <code>\n        angular.module('encoreApp', ['encore.ui'])\n            .config(function ($httpProvider) {\n                $httpProvider.interceptors.push('UnauthorizedInterceptor');\n            });\n    </code>\n</pre>\n",
            "less": "",
            "midway": ""
        }
    },
    {
        "name": "tabs",
        "moduleName": "'encore.ui.tabs'",
        "displayName": "Tabs",
        "srcFiles": [],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\" title=\"\" /></a></p>\n\n<p>This component provides styles and a demo for the <a href=\"https://github.com/angular-ui/bootstrap/tree/master/src/tabs\">the Angular-UI Bootstrap Tabs plugin</a>, which is included as a dependency for Encore-UI.</p>\n\n<h2>Usage</h2>\n\n<p>Usage is the exact same as demoed on the Angular-UI Bootstrap site. See <a href=\"http://angular-ui.github.io/bootstrap/\">the Angular-UI Bootstrap Docs</a> for further guidance on usage and configuration of this component.</p>\n\n<h2>Disclaimer</h2>\n\n<p>Only the default horizontal tabs are supported by these styles. <code>Vertical</code>, <code>Pills</code> and <code>Justified</code> tabs are currently unsupported. Support can be added if needed.</p>",
            "js": "",
            "html": "<div>\n    <h1 class=\"title lg\">Alternative Lorem Ipsums</h1>\n    <tabset id=\"tabs\">\n        <tab heading=\"Bacon Ipsum\">\n            <p>Bacon ipsum dolor sit amet salami jowl corned beef, andouille flank tongue ball tip kielbasa pastrami tri-tip meatloaf short loin beef biltong. Cow bresaola ground round strip steak fatback meatball shoulder leberkas pastrami sausage corned beef t-bone pork belly drumstick.</p>\n        </tab>\n        <tab heading=\"Veggie Ipsum\">\n            <p>Veggies sunt bona vobis, proinde vos postulo esse magis grape pea sprouts horseradish courgette maize spinach prairie turnip jícama coriander quandong gourd broccoli seakale gumbo. Parsley corn lentil zucchini radicchio maize burdock avocado sea lettuce. Garbanzo tigernut earthnut pea fennel.</p>\n        </tab>\n        <tab>\n            <tab-heading>Cat Ipsum <span class=\"subdued\">(meow)</span></tab-heading>\n            <p>Cat ipsum dolor sit amet, hunt anything that moves or hopped up on goofballs hide when guests come over. Hide when guests come over intrigued by the shower, or stare at ceiling climb leg for stretch and use lap as chair. Hunt anything that moves flop over, leave dead animals as gifts for chase imaginary bugs, chase mice for stare at ceiling yet hopped up on goofballs.</p>\n        </tab>\n        <tab>\n            <tab-heading>Tupac Ipsum</tab-heading>\n            <p>I give a holla to my sisters on welfare 2Pac cares, if don't nobody else care And, I know they like to beat you down a lot When you come around the block, brothers clown a lot But please don't cry, dry your eyes, never let up Forgive but don't forget, girl, keep your head up And when he tells you you ain't nothin', don't believe him And if he can't learn to love you, you should leave him Cause sister, you don't need him And I ain't tryin' to gas ya up, I just call 'em how I see 'em</p>\n        </tab>\n    </tabset>\n</div>",
            "less": "@import 'vars';\n\n/*\n\n# Angular-UI Tabs\n\nProvides styling for the Angular-UI tab HTML\n\n```\n<div class=\"tabbable\">\n    <ul class=\"nav nav-tabs\">\n        <li class=\"active\">\n            <a>Bacon Ipsum</a>\n        </li>\n        <li>\n            <a>Veggie Ipsum</a>\n        </li>\n        <li>\n            <a>Cat Ipsum</a>\n        </li>\n    </ul>\n    <div class=\"tab-content\">\n        <div class=\"tab-pane active\">\n            <p>First Tab Content. Bacon ipsum dolor sit amet salami jowl corned beef, andouille flank tongue ball tip kielbasa pastrami tri-tip meatloaf short loin beef biltong. Cow bresaola ground round strip steak fatback meatball shoulder leberkas pastrami sausage corned beef t-bone pork belly drumstick.</p>\n        </div>\n        <div class=\"tab-pane\">\n            <p>Second tab content. Veggies sunt bona vobis, proinde vos postulo esse magis grape pea sprouts horseradish courgette maize spinach prairie turnip jícama coriander quandong gourd broccoli seakale gumbo. Parsley corn lentil zucchini radicchio maize burdock avocado sea lettuce. Garbanzo tigernut earthnut pea fennel.</p>\n        </div>\n        <div class=\"tab-pane\">\n            <p>Cat ipsum dolor sit amet, hunt anything that moves or hopped up on goofballs hide when guests come over. Hide when guests come over intrigued by the shower, or stare at ceiling climb leg for stretch and use lap as chair. Hunt anything that moves flop over, leave dead animals as gifts for chase imaginary bugs, chase mice for stare at ceiling yet hopped up on goofballs.</p>\n        </div>\n    </div>\n</div>\n```\n*/\n.nav-tabs {\n    display: flex;\n    border-bottom: 9px solid @tabBorder;\n    clear: both;\n\n    li {\n        flex: 0 0 auto;\n        font-size: 14px;\n    }\n\n    a {\n        display: block;\n        background: #3f6085;\n        color: #ccc;\n        padding: 10px 20px;\n\n        .subdued {\n            color: @subduedTextHover;\n        }\n\n        &:hover:not(.active),\n        &:focus:not(.active) {\n            cursor: pointer;\n            color: @white;\n            text-decoration: none;\n\n            .subdued {\n                color: @subduedText;\n            }\n        }\n    }\n\n    .active a {\n        background: @tabBorder;\n        color: @white;\n\n        .subdued {\n            color: @subduedText;\n        }\n    }\n}\n\n.tab-pane {\n    clear: both;\n    display: none;\n    background: @white;\n    padding: 10px;\n\n    &.active {\n        display: block;\n    }\n\n    // If the title is the first part of the tab-pane, remove its top border so there isn't so much space\n    .title:first-child {\n        margin-top: 0;\n    }\n}\n",
            "midway": "var tabsPage = require('../tabs.page.js').tabs;\n\ndescribe('tabs', function () {\n    var tabs;\n\n    before(function () {\n        demoPage.go('#/component/tabs');\n        tabs = tabsPage.initialize($('#tabs'));\n    });\n\n    it('should show element', function () {\n        expect(tabs.isDisplayed()).to.eventually.be.true;\n    });\n});\n"
        }
    },
    {
        "name": "tooltips",
        "moduleName": "'encore.ui.tooltips'",
        "displayName": "Tooltips",
        "srcFiles": [],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\" title=\"\" /></a></p>\n\n<p>This component provides styles and a demo for the <a href=\"https://github.com/angular-ui/bootstrap/tree/master/src/tabs\">the Angular-UI Bootstrap Tooltip plugin</a>, which is included as a dependency for Encore-UI.</p>\n\n<p>Note that the <code>tooltip</code> directive and its optional attributes can <em>only</em> be applied to raw HTML elements. They can't be applied to directives like this: <code>&lt;rx-button tooltip=\"...\"&gt;</code></p>\n\n<p>If you're creating your own custom directive, it's fine to use the <code>tooltip</code> directive inside of your directive's template.</p>\n\n<h2>Usage</h2>\n\n<p>Usage is the exact same as demoed on the Angular-UI Bootstrap site. See <a href=\"http://angular-ui.github.io/bootstrap/\">the Angular-UI Bootstrap Docs</a> for further guidance on usage and configuration of this component.</p>",
            "js": "/* jshint unused:false */\nfunction tooltipsCtrl ($scope) {\n    $scope.dynamicTooltip = 'I was defined in the controller!';\n}\n",
            "html": "<div ng-controller=\"tooltipsCtrl\">\n    <ul>\n        <li><span tooltip=\"Right tooltip\" tooltip-placement=\"right\">Hover over me for a right-side tooltip</span></li>\n        <li><span tooltip=\"A top tooltip\" tooltip-placement=\"top\"><rx-button default-msg=\"Top tooltip\"></rx-button></span></li>\n        <li><span tooltip=\"A bottom tooltip\" tooltip-placement=\"bottom\"><rx-button default-msg=\"Bottom tooltip\"></rx-button></span></li>\n        <li><span tooltip=\"{{dynamicTooltip}}\"><rx-button default-msg=\"Hover to see text coming from the controller\"></rx-button></span></li>\n        <li><span tooltip-html-unsafe=\"<span class='tooltip-header'>A Tooltip Title</span><p>You can use HTML</p>\"><span>Hover over this text to see HTML in a tooltip</span></li>\n    </ul>\n</div>\n",
            "less": "@import 'vars';\n//\n// Tooltips\n// --------------------------------------------------\n\n@zindexTooltip: 1070;\n@tooltipMaxWidth: 200px;\n@tooltipHeaderColor: #fff;\n@tooltipColor: #f1f1f1;\n@tooltipBg: #878787;\n@tooltipOpacity: 1;\n\n//** Tooltip arrow width\n@tooltipArrowWidth: 5px;\n//** Tooltip arrow color\n@tooltipArrowColor: @tooltipBg;\n\n// Base class\n.tooltip {\n    position: absolute;\n    z-index: @zindexTooltip;\n    display: block;\n    visibility: visible;\n    font-size: @appFontSize;\n    line-height: @appLineHeight;\n    .opacity(0);\n\n    &.in {\n        .opacity(@tooltipOpacity);\n    }\n\n    &.top {\n        margin-top: -3px;\n        padding: @tooltipArrowWidth 0;\n    }\n\n    &.right {\n        margin-left: 3px;\n        padding: 0 @tooltipArrowWidth;\n    }\n\n    &.bottom {\n        margin-top: 3px;\n        padding: @tooltipArrowWidth 0;\n    }\n\n    &.left {\n        margin-left: -3px;\n        padding: 0 @tooltipArrowWidth;\n    }\n}\n\n// Wrapper for the tooltip content\n.tooltip-inner {\n    max-width: @tooltipMaxWidth;\n    padding: 3px 8px;\n    color: @tooltipColor;\n    text-align: center;\n    text-decoration: none;\n    background-color: @tooltipBg;\n    border-radius: 4px;\n    box-shadow: rgba(0, 0, 0, 0.35) 1px 1px 4px 0px;\n    padding: 1em;\n    .tooltip-header {\n        color: @tooltipHeaderColor;\n        text-align: left;\n        font-size: 15px;\n        padding-bottom: 5px;\n        font-weight: 600;\n  }\n}\n\n// Arrows\n.tooltip-arrow {\n    position: absolute;\n    width: 0;\n    height: 0;\n    border-color: transparent;\n    border-style: solid;\n    text-shadow: rgba(0, 0, 0, 0.09) 1px 1px 1px;\n}\n.tooltip {\n    &.top .tooltip-arrow {\n        bottom: 0;\n        left: 50%;\n        margin-left: -@tooltipArrowWidth;\n        border-width: @tooltipArrowWidth @tooltipArrowWidth 0;\n        border-top-color: @tooltipArrowColor;\n    }\n    &.top-left .tooltip-arrow {\n        bottom: 0;\n        left: @tooltipArrowWidth;\n        border-width: @tooltipArrowWidth @tooltipArrowWidth 0;\n        border-top-color: @tooltipArrowColor;\n    }\n    &.top-right .tooltip-arrow {\n        bottom: 0;\n        right: @tooltipArrowWidth;\n        border-width: @tooltipArrowWidth @tooltipArrowWidth 0;\n        border-top-color: @tooltipArrowColor;\n    }\n    &.right .tooltip-arrow {\n        top: 50%;\n        left: 0;\n        margin-top: -@tooltipArrowWidth;\n        border-width: @tooltipArrowWidth @tooltipArrowWidth @tooltipArrowWidth 0;\n        border-right-color: @tooltipArrowColor;\n    }\n    &.left .tooltip-arrow {\n        top: 50%;\n        right: 0;\n        margin-top: -@tooltipArrowWidth;\n        border-width: @tooltipArrowWidth 0 @tooltipArrowWidth @tooltipArrowWidth;\n        border-left-color: @tooltipArrowColor;\n    }\n    &.bottom .tooltip-arrow {\n        top: 0;\n        left: 50%;\n        margin-left: -@tooltipArrowWidth;\n        border-width: 0 @tooltipArrowWidth @tooltipArrowWidth;\n        border-bottom-color: @tooltipArrowColor;\n    }\n    &.bottom-left .tooltip-arrow {\n        top: 0;\n        left: @tooltipArrowWidth;\n        border-width: 0 @tooltipArrowWidth @tooltipArrowWidth;\n        border-bottom-color: @tooltipArrowColor;\n    }\n    &.bottom-right .tooltip-arrow {\n        top: 0;\n        right: @tooltipArrowWidth;\n        border-width: 0 @tooltipArrowWidth @tooltipArrowWidth;\n        border-bottom-color: @tooltipArrowColor;\n    }\n}\n",
            "midway": ""
        }
    },
    {
        "name": "typeahead",
        "moduleName": "'encore.ui.typeahead'",
        "displayName": "Typeahead",
        "srcFiles": [],
        "tplFiles": [],
        "tplJsFiles": [],
        "dependencies": [],
        "docs": {
            "md": "<p><a href=\"http://github.com/badges/stability-badges\"><img src=\"http://badges.github.io/stability-badges/dist/unstable.svg\" alt=\"unstable\" title=\"\" /></a></p>\n\n<p>This component provides styles and a demo for the <a href=\"https://github.com/angular-ui/bootstrap/tree/master/src/typeahead\">the Angular-UI Bootstrap Typeahead plugin</a>, which is included as a dependency for Encore-UI.</p>\n\n<h2>Usage</h2>\n\n<p>Usage is the exact same as demoed on the Angular-UI Bootstrap site. See <a href=\"http://angular-ui.github.io/bootstrap/\">the Angular-UI Bootstrap Docs</a> for further guidance on usage and configuration of this component.</p>",
            "js": "/*jshint unused:false*/\nfunction typeaheadCtrl ($scope) {\n    $scope.states = ['Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut',\n        'Delaware', 'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas',\n        'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi',\n        'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York',\n        'North Dakota', 'North Carolina', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania', 'Republic of Dawood',\n        'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virginia',\n        'Washington', 'West Virginia', 'Wisconsin', 'Wyoming'];\n}\n",
            "html": "<div ng-controller=\"typeaheadCtrl\">\n    <rx-form-item label=\"States\">\n        <input type=\"text\" ng-model=\"selected\" typeahead=\"state for state in states | filter:$viewValue | limitTo:8\" class=\"form-input\" id=\"typeahead\">\n    </rx-form-item>\n</div>",
            "less": "@import 'vars';\n\n.dropdown-menu {\n    position: absolute;\n    top: 100%;\n    left: 0;\n    margin-top: -1px;\n    display: none;\n    list-style: none;\n    background: @white;\n    border: 1px solid #ccc;\n    padding: 6px 0;\n\n    a {\n        display: block;\n        margin: 0;\n        padding: 5px 10px;\n        color: @inputColor;\n    }\n    .active a {\n        background: @optionHighlightBg;\n        color: @white;\n    }\n}",
            "midway": "var typeaheadPage = require('../typeahead.page.js').typeahead;\n\ndescribe('typeahead', function () {\n    var typeahead;\n\n    before(function () {\n        demoPage.go('#/component/typeahead');\n        typeahead = typeaheadPage.initialize($('#typeahead'));\n    });\n\n    it('should show element', function () {\n        expect(typeahead.isDisplayed()).to.eventually.be.true;\n    });\n});\n"
        }
    }
]);